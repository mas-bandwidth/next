SETUP

	--------

	Update instructions in dev to setup cloudflare.

	--------

	Need to find a way to automatically setup the database by loading create.sql

	This probably requires uploading the database files to cloud storage

	--------

	Pain point. Manually enabling APIs is annoying.

	The APIs can be enabled via terraform...

	https://github.com/CloudNativeTech/gdg-terraform-gcp-workshop/blob/master/03-project/project.tf#L23

	--------

	Pain point, creating all the projects and service accounts and permissions takes up a lot of time and is fiddly and error prone.

	Solution. Create a terraform job to setup all the projects and link together permissions as necessary. This job can also provision the buckets in storage.

	--------

	Pain point. Manually specifying the service account name is annoying. 

	Ideally, grab the terraform service account from the credentials somehow? Or find the service account by name in terraform?

	--------

	Pain point. Have to manually give the service account permissions to download artifacts from bucket.

	No solution yet.

	--------

	Pain point. Managing secrets is a pain.

	Potentially solvable with hashicorp vault?

	There is also google cloud secrets manager.

	--------

	Upload artifacts to buckets according to tag

	Then drive semaphore only to upload artifacts after running full tests on them, from a tag.

	The current way of uploading artifacts is very bad workflow, there is no easy way to undo a deploy, there is no history of artifacts, and any commit to dev uploads artifacts (which can theoretically, affect prod).

	RULE: dev/prod should not be affected, until you make a terraform change.

	--------

	gcloud auth application-default login

	Running this is necessary for terraform to work with state in google cloud buckets

	--------
