DONE

	SDK rework

	Rebuild and test server backend

	Rebuild and test relay backend

	Define set of messages for analytics and portal

	Rebuild analytics service	

	Rebuild portal cruncher -> redis cruncher / map cruncher.

	API service with REST API to drive the portal functionality.

	API service with REST API to drive admin functionality (talk to the postgres database, eg. CRUD)

	API service with REST API to drive database.bin functionality (load the database.bin, query what is in there).

	Functional tests for admin, portal and database REST API functionality.

	Working "next" tool that runs off the REST API and supports any number of different configured environments.

	Setup dev environment in google cloud with terraform.

	Terraform modules to setup relays with google, amazon, akamai and linode (dev).

	Resolve external UDP load balancer blocker.

	API_KEY for API.

	Ability to run system locally under docker compose.

	Network Next terraform provider.

	Multithreaded relay with session database per-socket thread (no contention)

	Document setup process with terraform and run through it several times to check it out

	Setup dev backend with terraform

	Finish the terraform plugin and publish it

	Get tag based development working with semaphoreci and terraform

	Setup relays in dev

	Get raspberry clients sending traffic over relays in dev

	Rebuild portal (first half)

	IP2Location

	Setup staging environment

TODO

	Setup staging.sql and staging database

	Verify that I can load staging.sql

	-----------

	Implement load test program that acts like x servers, and y sessions.

	-----------

	Setup prod environment

	-----------

	Setup google pubsub in dev with terraform

	Verify that analytics service gets expected messages through pubsub

	-----------

	Setup google bigquery in dev with terraform

	Verify analytics service inserts data into bigquery.

	-----------

	HTTPS for api service

	HTTPS for relay gateway

	-----------

	Rebuild portal (second half)

	------------

	Load test backend systems in staging environment up to 1M sessions

	Almost certainly requires a load testing harness to simulate servers and clients...

	------------

	Add support for as many sellers as possible (terraform + config scripts...)

	------------

	Optimize the setup process by automating creation of projects, service accounts and permissions

	Enable:

		Compute Engine API
		Cloud Resource Manager API
		Google Cloud Memorystore for Redis API
		Service Networking API

	------------

	Fix multithreaded relay.
	
	https://developers.redhat.com/blog/2021/05/13/receive-side-scaling-rss-with-ebpf-and-cpumap#redirecting_into_a_cpumap

	------------

	Test SDK on all console platforms.

	------------

	Update UE4/UE5 plugin and test on all platforms.

	------------

	Document *everything*.

	------------
