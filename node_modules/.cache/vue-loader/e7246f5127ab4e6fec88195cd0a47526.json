{"remainingRequest":"/home/baumbachandrew/Projects/Work/portal/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/baumbachandrew/Projects/Work/portal/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/baumbachandrew/Projects/Work/portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/baumbachandrew/Projects/Work/portal/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/home/baumbachandrew/Projects/Work/portal/src/App.vue","mtime":1593632022704},{"path":"/home/baumbachandrew/Projects/Work/portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/baumbachandrew/Projects/Work/portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/baumbachandrew/Projects/Work/portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/baumbachandrew/Projects/Work/portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiYXBwIiB9IH0sIFsKICAgIF9jKAogICAgICAibmF2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgIm5hdmJhciBuYXZiYXItZXhwYW5kLW1kIG5hdmJhci1kYXJrIGZpeGVkLXRvcCBiZy1kYXJrIHAtMCBzaGFkb3ciCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfdm0uX20oMCksCiAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgIF92bS5fbSgyKSwKICAgICAgICBfdm0uX20oMyksCiAgICAgICAgZmFsc2UKICAgICAgICAgID8gX2MoInVsIiwgeyBzdGF0aWNDbGFzczogIm5hdmJhci1uYXYgcHgtMyIgfSwgW192bS5fbSg0KV0pCiAgICAgICAgICA6IF92bS5fZSgpCiAgICAgIF0KICAgICksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyAicGFkZGluZy10b3AiOiAiNDhweCIgfSB9LCBbCiAgICAgIGZhbHNlCiAgICAgICAgPyBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFsZXJ0IGFsZXJ0LXByaW1hcnkiLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSwKICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiYWxlcnQiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF92bS5fdigiIFBsZWFzZSBjb25maXJtIHlvdXIgZW1haWwgYWRkcmVzczogRU1BSUwgQUREUkVTUyAiKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgW192bS5fdigiIFJlc2VuZCBlbWFpbCAiKV0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICA6IF92bS5fZSgpLAogICAgICBmYWxzZQogICAgICAgID8gX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbGVydCBhbGVydC1zdWNjZXNzIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImFsZXJ0IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFZlcmlmaWNhdGlvbiBlbWFpbCB3YXMgc2VudCBzdWNjZXNzZnVsbHkuIFBsZWFzZSBjaGVjayB5b3VyIGVtYWlsIGZvciBmdXRoZXIgaW5zdHJ1Y3Rpb25zLiAiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdCiAgICAgICAgICApCiAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgZmFsc2UKICAgICAgICA/IF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWxlcnQgYWxlcnQtZGFuZ2VyIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0sCiAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImFsZXJ0IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFNvbWV0aGluZyB3ZW50IHdyb25nIHNlbmRpbmcgdGhlIHZlcmlmaWNhdGlvbiBlbWFpbC4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4gIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIDogX3ZtLl9lKCkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJtYWluIiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgdmFsdWU6IHRydWUsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidHJ1ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIGNvbC1sZy0xMiBweC00IiwKICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogIm1haW4iIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAiXG4gICAgICAgICAgICAgICAgICAgIGQtZmxleFxuICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlblxuICAgICAgICAgICAgICAgICAgICBmbGV4LXdyYXAgZmxleC1tZC1ub3dyYXBcbiAgICAgICAgICAgICAgICAgICAgYWxpZ24taXRlbXMtY2VudGVyXG4gICAgICAgICAgICAgICAgICAgIHB0LTNcbiAgICAgICAgICAgICAgICAgICAgcGItMlxuICAgICAgICAgICAgICAgICAgICBtYi0zXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b21cbiAgICAgICAgICAgICAgICAgICIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIm1hcC1zZXNzaW9ucy1jb3VudCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICAgICAgICAgPyBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogIm1hcC1zcGlubmVyIiB9IH0sIFtfdm0uX20oNSldKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgdHJ1ZQogICAgICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAgICAgImgxIiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoMiIsIGF0dHJzOiB7IGlkOiAid29ya3NwYWNlLXRpdGxlIiB9IH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIE1hcCAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiYmFkZ2UgYmFkZ2UtZGFyayIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIE1BUFNFU1NJT05TIFRvdGFsIFNlc3Npb25zICIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiYmFkZ2UgYmFkZ2Utc3VjY2VzcyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIE9OTk4gb24gTmV0d29yayBOZXh0ICIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX3ZtLl9tKDYpCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWFwLWNvbnRhaW5lci1uby1vZmZzZXQiLAogICAgICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICAgICAibWFwLWNvbnRhaW5lci1uby1vZmZzZXQiOiB0cnVlLAogICAgICAgICAgICAgICAgIm1hcC1jb250YWluZXItb2Zmc2V0IjogZmFsc2UKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAibWFwLWNvbnRhaW5lciIgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgZmFsc2UKICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgIm1haW4iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIGNvbC1sZy0xMiBweC00IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJtYWluIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogInNlc3Npb25zIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgZC1mbGV4XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXG4gICAgICAgICAgICAgICAgICAgIGZsZXgtd3JhcCBmbGV4LW1kLW5vd3JhcFxuICAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtcy1jZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgcHQtM1xuICAgICAgICAgICAgICAgICAgICBwYi0yXG4gICAgICAgICAgICAgICAgICAgIG1iLTNcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJoMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaDIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogIndvcmtzcGFjZS10aXRsZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgU2Vzc2lvbnMgIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImJhZGdlIGJhZGdlLWRhcmsiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBNQVBTRVNTSU9OUyBUb3RhbCBTZXNzaW9ucyAiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzcGFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiYmFkZ2UgYmFkZ2Utc3VjY2VzcyIgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgT05OTiBvbiBOZXR3b3JrIE5leHQgIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oNykKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNwaW5uZXItYm9yZGVyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAic3RhdHVzIiwgaWQ6ICJzZXNzaW9ucy1zcGlubmVyIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJzci1vbmx5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkxvYWRpbmcuLi4iKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICB0cnVlCiAgICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJsZS1yZXNwb25zaXZlIHRhYmxlLW5vLXRvcC1saW5lIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGFibGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGFibGUgdGFibGUtc20gdGFibGUtc3RyaXBlZCB0YWJsZS1ob3ZlciIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oOCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oOSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJ0aCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiIFVzZXIgSGFzaCAiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMTEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDEyKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxMyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMTQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZhLXctMTYgZmEtZncgdGV4dC1zdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAiY2lyY2xlIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYS13LTE2IGZhLWZ3IHRleHQtcHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImNpcmNsZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDE1KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoInRkIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRleHQtZGFyayBmaXhlZC13aWR0aCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIFNFU1NJT04gVVNFUiBIQVNIICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIgU0VTU0lPTiBMT0NBVElPTiBJU1AgIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxNiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1yaWdodCAiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgU0VTU0lPTiBESVJFQ1QgUlRUICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXJpZ2h0ICIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBTRVNTSU9OIE5FWFQgUlRUICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgxNykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIGZhbHNlCiAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICJtYWluIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbC1tZC0xMiBjb2wtbGctMTIgcHgtNCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAibWFpbiIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDE4KSwKICAgICAgICAgICAgICAgIF92bS5fbSgxOSksCiAgICAgICAgICAgICAgICBmYWxzZQogICAgICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWxlcnQgYWxlcnQtaW5mbyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJhbGVydCIsIGlkOiAic2Vzc2lvbi10b29sLWFsZXJ0IiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBQbGVhc2UgZW50ZXIgYSB2YWxpZCBTZXNzaW9uIElEIHRvIHZpZXcgaXRzIHN0YXRpc3RpY3MuIEl0IHNob3VsZCBiZSBhIGhleGFkZWNpbWFsIG51bWJlciAod2l0aCBsZWFkaW5nIHplcm9zKSwgb3IgYSBkZWNpbWFsIG51bWJlci4gIgogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFsZXJ0IGFsZXJ0LWRhbmdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJhbGVydCIsIGlkOiAic2Vzc2lvbi10b29sLWRhbmdlciIgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBGYWlsZWQgdG8gZmV0Y2ggc2Vzc2lvbiBkZXRhaWxzICIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAic2Vzc2lvbi1kZXRhaWxzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgdHJ1ZQogICAgICAgICAgICAgICAgICAgID8gX2MoImRpdiIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oMjApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTEyIGNvbC1sZy00IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDIxKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLWJvZHkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRsIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZHQiLCBbX3ZtLl92KCIgSVNQICIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgyMiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygiZGl2IiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZHQiLCBbX3ZtLl92KCIgVXNlciBIYXNoICIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgyMykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImR0IiwgW192bS5fdigiIFVzZXIgSVAgQWRkcmVzcyAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGQiLCBbX3ZtLl92KCIgTUVUQSBDTElFTlQgQUREUiAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZHQiLCBbX3ZtLl92KCIgUGxhdGZvcm0gIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRkIiwgW192bS5fdigiIE1FVEEgUExBVEZPUk0gIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJkdCIsIFtfdm0uX3YoIiBDdXN0b21lciAiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJkZCIsIFtfdm0uX3YoIiBCVVlFUiBOQU1FICIpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZHQiLCBbX3ZtLl92KCIgU0RLIFZlcnNpb24gIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRkIiwgW192bS5fdigiIE1FVEEgU0RLICIpXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkdCIsIFtfdm0uX3YoIiBDb25uZWN0aW9uIFR5cGUgIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRkIiwgW192bS5fdigiIE1FVEEgQ09OTkVDVElPTiAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoImR0IiwgW192bS5fdigiIE5lYXJieSBSZWxheXMgIildKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygiZGQiLCBbX3ZtLl92KCIgTm8gTmVhcmJ5IFJlbGF5cyAiKV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGFibGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YWJsZSB0YWJsZS1zbSBtdC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl9tKDI0KSwgX3ZtLl9tKDI1KV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoImR0IiwgW192bS5fdigiIFJvdXRlICIpXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0YWJsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRhYmxlIHRhYmxlLXNtIG10LTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX20oMjYpLCBfdm0uX20oMjcpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgZmFsc2UKICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgIm1haW4iLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIGNvbC1sZy0xMiBweC00IiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJtYWluIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX20oMjgpLAogICAgICAgICAgICAgICAgX3ZtLl9tKDI5KSwKICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbGVydCBhbGVydC1pbmZvIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImFsZXJ0IiwgaWQ6ICJ1c2VyLXRvb2wtYWxlcnQiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAiIFBsZWFzZSBlbnRlciBhIFVzZXIgSUQgb3IgSGFzaCB0byB2aWV3IHRoZWlyIHNlc3Npb25zLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICBmYWxzZQogICAgICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWxlcnQgYWxlcnQtZGFuZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImFsZXJ0IiwgaWQ6ICJ1c2VyLXRvb2wtZGFuZ2VyIiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIEZhaWxlZCB0byBmZXRjaCB1c2VyIHNlc3Npb25zICIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAidXNlci1zZXNzaW9ucyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0YWJsZS1yZXNwb25zaXZlIHRhYmxlLW5vLXRvcC1saW5lIiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygidGFibGUiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUgdGFibGUtc20iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgzMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnVlID8gX2MoInRib2R5IiwgW192bS5fbSgzMSldKSA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPyBfYygidGJvZHkiLCBbX3ZtLl9tKDMyKV0pIDogX3ZtLl9lKCkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICBfYygKICAgICAgICAgICJtYWluIiwKICAgICAgICAgIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZhbHNlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXSwKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMTIgY29sLWxnLTEyIHB4LTQiLAogICAgICAgICAgICBhdHRyczogeyByb2xlOiAibWFpbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl9tKDMzKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIG1iLTIiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4tZ3JvdXAtdmVydGljYWwgYnRuLWdyb3VwLXNtIGZsb2F0LXJpZ2h0IgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IG0tMSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAnIjE2MHB4IicgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiIyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ3aW5kb3cub3BlbignaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3BvcnRhbF9zZGtfZG93bmxvYWRfc3RvcmFnZV9wcm9kL25leHQtMy40LjYuemlwJykiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiU0RLIHYzLjQuNiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImZvbnQtYXdlc29tZS1pY29uIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEtdy0xNiBmYS1mdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImRvd25sb2FkIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBTREsgdjMuNC42ICIpCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IG0tMSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAnIjE2MHB4IicgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiAiIyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ3aW5kb3cub3BlbignaHR0cHM6Ly9uZXR3b3JrLW5leHQtc2RrLnJlYWR0aGVkb2NzLWhvc3RlZC5jb20vZW4vbGF0ZXN0LycpIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogInYzLjQuNiBEb2N1bWVudGF0aW9uIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYS13LTE2IGZhLWZ3IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAiZG93bmxvYWQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIHYzLjQuNiBEb2N1bWVudGF0aW9uICIpCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIE5ldHdvcmsgTmV4dCBTREsgIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIGZhbHNlCiAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICJtYWluIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbC1tZC0xMiBjb2wtbGctMTIgcHgtNCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAibWFpbiIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDM0KSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZCIsCiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1ib3R0b20iOiAiMjUwcHgiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1oZWFkZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAidWwiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibmF2IG5hdi10YWJzIGNhcmQtaGVhZGVyLXRhYnMiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogeyBhY3RpdmU6IHRydWUgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImFjY291bnRzLWxpbmsiLCBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgVXNlcnMgIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNDbGFzczogIm5hdi1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IHsgYWN0aXZlOiBmYWxzZSB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiY29uZmlnLWxpbmsiLCBocmVmOiAiIyIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgR2FtZSBDb25maWd1cmF0aW9uICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogInNldHRpbmdzLXBhZ2UiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhpZGRlbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJhdXRvLXNpZ25pbiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEF1dG9tYXRpYyBzaWduLWluICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgU2F2ZSB0aW1lIGJ5IGFsbG93aW5nIHVzZXJzIHdpdGggdmVyaWZpZWQgZW1haWwgYWRkcmVzc2VzIGF1dG9tYXRpYyBhY2Nlc3MgdG8geW91ciBOZXR3b3JrIE5leHQgYWNjb3VudC4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGlkOiAiYXV0by1zaWduLWluLXNwaW5uZXIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl9tKDM1KV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDM2KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDM3KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkgYnRuLXNtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJzdWJtaXQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBTYXZlIEF1dG9tYXRpYyBTaWduLWluICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQgdGV4dC1zbWFsbCBtdC0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImhyIiwgeyBzdGF0aWNDbGFzczogIm10LTQgbWItNCIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEFkZCBuZXcgdXNlcnMgIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIFByb3ZpZGUgb3RoZXIgcGVvcGxlIHdpdGggYWNjZXNzIHRvIHlvdXIgYWNjb3VudC4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImFkZC11c2VyLXNwaW5uZXIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fbSgzOCldCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWxlcnQgYWxlcnQtc3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJhbGVydCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogInNlc3Npb24tdG9vbC1hbGVydCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBORVdVU0VSIFNVQ0NFU1MgIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWxlcnQgYWxlcnQtZGFuZ2VyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogImFsZXJ0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAic2Vzc2lvbi10b29sLWFsZXJ0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIE5FV1VTRVIgRkFJTFVSRSAiKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInRydWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9tKDM5KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX20oNDApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1zbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJzdWJtaXQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgQWRkIFVzZXJzICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQgdGV4dC1zbWFsbCBtdC0yIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaHIiLCB7IHN0YXRpY0NsYXNzOiAibXQtNCBtYi00IiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIE1hbmFnZSBleGlzdGluZyB1c2VycyAiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLXRleHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgTWFuYWdlIHRoZSBsaXN0IG9mIHVzZXJzIHRoYXQgY3VycmVudGx5IGhhdmUgYWNjZXNzIHRvIHlvdXIgTmV0d29yayBOZXh0IGFjY291bnQuICIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJhY2NvdW50LXRhYmxlLXNwaW5uZXIiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fbSg0MSldCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0YWJsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAidHJ1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGFibGUgdGFibGUtc20gbXQtNCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSg0MiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInRib2R5IiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYWxlcnQgYWxlcnQtc3VjY2VzcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiYWxlcnQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIiBVUERBVEVVU0VSIFNVQ0NFU1MgIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbGVydCBhbGVydC1kYW5nZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImFsZXJ0IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgVVBEQVRFVVNFUiBGQUlMVVJFICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIgRU1BSUwgIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInRkIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0cnVlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZC1idG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJidG4gYnRuLXhzIGJ0bi1wcmltYXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtdG9nZ2xlIjogInRvb2x0aXAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtcGxhY2VtZW50IjogImJvdHRvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIkNoYW5nZSB0aGlzIHVzZXIncyBwZXJtaXNzaW9ucyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhLXctMTYgZmEtZnciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogInBlbiIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ0biBidG4teHMgYnRuLWRhbmdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXRvZ2dsZSI6ICJ0b29sdGlwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXBsYWNlbWVudCI6ICJib3R0b20iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJSZW1vdmUgdGhpcyB1c2VyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEtdy0xNiBmYS1mdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAidHJhc2giIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidGQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZC1idG4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtdG9nZ2xlIjogInRvb2x0aXAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtcGxhY2VtZW50IjogImJvdHRvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIlNhdmUgQ2hhbmdlcyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZm9udC1hd2Vzb21lLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhLXctMTYgZmEtZnciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImNoZWNrIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnRuIGJ0bi14cyBidG4tc2Vjb25kYXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtdG9nZ2xlIjogInRvb2x0aXAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtcGxhY2VtZW50IjogImJvdHRvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIkNhbmNlbCBDaGFuZ2VzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJmb250LWF3ZXNvbWUtaWNvbiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmEtdy0xNiBmYS1mdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAidGltZXMiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmYWxzZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogImNvbmZpZy1wYWdlIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10aXRsZSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgR2FtZSBDb25maWd1cmF0aW9uICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICIgTWFuYWdlIGhvdyB5b3VyIGdhbWUgY29ubmVjdHMgdG8gTmV0d29yayBOZXh0LiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbGVydCBhbGVydC1zdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImFsZXJ0IiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIFVQREFURUtFWSBTVUNDRVNTICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbGVydCBhbGVydC1kYW5nZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiYWxlcnQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgVVBEQVRFS0VZIEZBSUxVUkUgIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImFsZXJ0IGFsZXJ0LXN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiYWxlcnQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgVVBHUkFERSBTVUNDRVNTICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImZhbHNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJhbGVydCBhbGVydC1kYW5nZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiYWxlcnQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCIgVVBHUkFERSBGQUlMVVJFICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0OiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnVwZGF0ZVB1YktleSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tZ3JvdXAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6ICJwdWJLZXkiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsYWJlbCIsIFtfdm0uX3YoIiBDb21wYW55IE5hbWUgIildKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIkVudGVyIHlvdXIgY29tcGFueSBuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImNvbXBhbnktaW5wdXQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGFiZWwiLCBbX3ZtLl92KCIgUHVibGljIEtleSAiKV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInRleHRhcmVhIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiRW50ZXIgeW91ciBiYXNlNjQtZW5jb2RlZCBwdWJsaWMga2V5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogInB1YmtleS1pbnB1dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSBidG4tc20iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJzdWJtaXQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIFNhdmUgZ2FtZSBjb25maWd1cmF0aW9uICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCB0ZXh0LXNtYWxsIG10LTIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgOiBfdm0uX2UoKQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImEiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXZiYXItYnJhbmQgY29sLXNtLTMgY29sLW1kLTIgbXItMCIsCiAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibG9nby1jb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibG9nby1maXQiLAogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4vYXNzZXRzL2xvZ28ucG5nIikgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJuYXZiYXItbmF2IHB4LTMgdy0xMDAgbXItYXV0byIgfSwgWwogICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0gdGV4dC1ub3dyYXAiIH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIE1hcCAiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0gdGV4dC1ub3dyYXAiIH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIFNlc3Npb25zICIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSB0ZXh0LW5vd3JhcCIgfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIgU2Vzc2lvbiBUb29sICIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSB0ZXh0LW5vd3JhcCIgfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiB9LCBbX3ZtLl92KCIgVXNlciBUb29sICIpXSkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSB0ZXh0LW5vd3JhcCIgfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIgRG93bmxvYWRzICIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSB0ZXh0LW5vd3JhcCIgfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIgU2V0dGluZ3MgIikKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInVsIiwgeyBzdGF0aWNDbGFzczogIm5hdmJhci1uYXYgcHgtMyIgfSwgWwogICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0gdGV4dC1ub3dyYXAiIH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIExvZyBpbiAiKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAibmF2YmFyLW5hdiBweC0zIiB9LCBbCiAgICAgIF9jKCJsaSIsIHsgc3RhdGljQ2xhc3M6ICJuYXYtaXRlbSB0ZXh0LW5vd3JhcCIgfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogIm5hdi1saW5rIiwgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIgU2lnbiB1cCAiKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0gdGV4dC1ub3dyYXAiIH0sIFsKICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWxpbmsiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCIgTG9nb3V0ICIpCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsgc3RhdGljQ2xhc3M6ICJzcGlubmVyLWJvcmRlciIsIGF0dHJzOiB7IHJvbGU6ICJzdGF0dXMiIH0gfSwKICAgICAgW19jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInNyLW9ubHkiIH0sIFtfdm0uX3YoIkxvYWRpbmcuLi4iKV0pXQogICAgKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJ0bi10b29sYmFyIG1iLTIgbWItbWQtMCBmbGV4LWdyb3ctMSIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1yLWF1dG8iIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInB4LTIgaGlkZGVuIiB9LCBbCiAgICAgICAgX2MoInNlbGVjdCIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiIH0sIFsKICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCIgV29ybGQgIildKSwKICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCIgVW5pdGVkIFN0YXRlcyAiKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHgtMiBoaWRkZW4iIH0sIFsKICAgICAgICBfYygic2VsZWN0IiwgeyBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIgfSwgWwogICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJldmVyeXRoaW5nIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIgRXZlcnl0aGluZyAiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygib3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogImRpcmVjdCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiIERpcmVjdCBPbmx5ICIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGF0dHJzOiB7IHZhbHVlOiAibmV4dCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiIE5ldHdvcmsgTmV4dCBPbmx5ICIpCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInB4LTIgaGlkZGVuIiB9LCBbCiAgICAgICAgX2MoInNlbGVjdCIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiIH0sIFsKICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGF0dHJzOiB7IHZhbHVlOiAiYWxsIiB9IH0sIFtfdm0uX3YoIiBBbGwgIildKSwKICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCIgQlVZRVJOQU1FIEFETUlOIExPT1AgIildKSwKICAgICAgICAgIF9jKCJvcHRpb24iLCBbX3ZtLl92KCIgQlVZRVJOQU1FIFNJTkdMRSBCVVlFUiAiKV0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYnRuLXRvb2xiYXIgbWItMiBtYi1tZC0wIGZsZXgtZ3Jvdy0xIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibXItYXV0byIgfSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHgtMiBoaWRkZW4iIH0sIFsKICAgICAgICBfYygic2VsZWN0IiwgeyBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIgfSwgWwogICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJydHQiIH0gfSwgW192bS5fdigiIFNvcnQgYnkgUlRUICIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJweC0yIGhpZGRlbiIgfSwgWwogICAgICAgIF9jKCJzZWxlY3QiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIiB9LCBbCiAgICAgICAgICBfYygib3B0aW9uIiwgeyBhdHRyczogeyB2YWx1ZTogImV2ZXJ5dGhpbmciIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoIiBFdmVyeXRoaW5nICIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJvcHRpb24iLCB7IGF0dHJzOiB7IHZhbHVlOiAiZGlyZWN0IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIgRGlyZWN0IE9ubHkgIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJuZXh0IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIgTmV0d29yayBOZXh0IE9ubHkgIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHgtMiBoaWRkZW4iIH0sIFsKICAgICAgICBfYygic2VsZWN0IiwgeyBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIgfSwgWwogICAgICAgICAgX2MoIm9wdGlvbiIsIHsgYXR0cnM6IHsgdmFsdWU6ICJhbGwiIH0gfSwgW192bS5fdigiIEFsbCAiKV0pLAogICAgICAgICAgX2MoIm9wdGlvbiIsIFtfdm0uX3YoIiBCVVlFUk5BTUUgQURNSU4gTE9PUCAiKV0pLAogICAgICAgICAgX2MoIm9wdGlvbiIsIFtfdm0uX3YoIiBCVVlFUk5BTUUgU0lOR0xFIEJVWUVSICIpXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoIiwgW19jKCJzcGFuIildKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidGgiLCBbX2MoInNwYW4iLCBbX3ZtLl92KCIgU2Vzc2lvbiBJRCAiKV0pXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoIiwgW19jKCJzcGFuIiwgW192bS5fdigiIElTUCAiKV0pXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoIiwgW19jKCJzcGFuIiwgW192bS5fdigiIERhdGFjZW50ZXIgIildKV0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ0aCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXJpZ2h0IiB9LCBbCiAgICAgIF9jKCJzcGFuIiwgW192bS5fdigiIERpcmVjdCBSVFQgIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoIiwgeyBzdGF0aWNDbGFzczogInRleHQtcmlnaHQiIH0sIFsKICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCIgTmV4dCBSVFQgIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoIiwgeyBzdGF0aWNDbGFzczogInRleHQtcmlnaHQiIH0sIFsKICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KCIgSW1wcm92ZW1lbnQgIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRkIiwgWwogICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWRhcmsgZml4ZWQtd2lkdGgiLCBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCIgU0VTU0lPTiBJRCAiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRkIiwgWwogICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWRhcmsiIH0sIFtfdm0uX3YoIiBTRVNTSU9OIERBVEFDRU5URVIgIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRkIiwgeyBzdGF0aWNDbGFzczogInRleHQtcmlnaHQgIiB9LCBbCiAgICAgIF9jKCJzcGFuIiwgW19jKCJiIiwgW192bS5fdigiIFNFU1NJT04gREVMVEEgUlRUICIpXSldKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAiXG4gICAgICAgICAgICAgICAgICBkLWZsZXhcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXG4gICAgICAgICAgICAgICAgICBmbGV4LXdyYXBcbiAgICAgICAgICAgICAgICAgIGZsZXgtbWQtbm93cmFwXG4gICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtcy1jZW50ZXJcbiAgICAgICAgICAgICAgICAgIHB0LTNcbiAgICAgICAgICAgICAgICAgIHBiLTJcbiAgICAgICAgICAgICAgICAgIG1iLTNcbiAgICAgICAgICAgICAgICAgIGJvcmRlci1ib3R0b21cbiAgICAgICAgICAgICAgICAiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAiaDIiIH0sIFtfdm0uX3YoIiBTZXNzaW9uIFRvb2wgIildKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImJ0bi10b29sYmFyIG1iLTIgbWItbWQtMCBmbGV4LWdyb3ctMSBoaWRkZW4iIH0sCiAgICAgICAgICBbX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtci1hdXRvIiB9KV0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImZvcm0iLCB7IHN0YXRpY0NsYXNzOiAiZmxvdy1zdGF0cy1mb3JtIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAic2Vzc2lvbi1pZC1pbnB1dCIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiBTZXNzaW9uIElEICIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHR5cGU6ICJ0ZXh0IiwKICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiRW50ZXIgYSBTZXNzaW9uIElEIHRvIHZpZXcgc3RhdGlzdGljcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWF1dG8iIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSIsIGF0dHJzOiB7IHR5cGU6ICJzdWJtaXQiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIgVmlldyBTdGF0cyAiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtMTIgY29sLWxnLTgiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIG1iLTIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtaGVhZGVyIiB9LCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiIExhdGVuY3kgIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxvYXQtcmlnaHQiIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgImJvcmRlci1yaWdodCI6ICIycHggZG90dGVkIHJnYig1MSwgNTEsIDUxKSIsCiAgICAgICAgICAgICAgICBkaXNwbGF5OiAibm9uZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJyZ2IoMCwgMTA5LCA0NCkiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiIOKAlCBOZXR3b3JrIE5leHQgIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogInJnYig0OSwgMTMwLCAxODkpIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiDigJQgRGlyZWN0ICIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogImxhdGVuY3ktY2hhcnQtMSIgfSB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQgbWItMiIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1oZWFkZXIiIH0sIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIgSml0dGVyICIpXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsb2F0LXJpZ2h0IiB9LCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXItMiIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICAgICJib3JkZXItcmlnaHQiOiAiMnB4IGRvdHRlZCByZ2IoNTEsIDUxLCA1MSkiLAogICAgICAgICAgICAgICAgZGlzcGxheTogIm5vbmUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY1N0eWxlOiB7IGNvbG9yOiAicmdiKDAsIDEwOSwgNDQpIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiDigJQgTmV0d29yayBOZXh0ICIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJyZ2IoNDksIDEzMCwgMTg5KSIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIg4oCUIERpcmVjdCAiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgYXR0cnM6IHsgaWQ6ICJqaXR0ZXItY2hhcnQtMSIgfSB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQgbWItMiIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1oZWFkZXIiIH0sIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIgUGFja2V0IExvc3MgIildKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZmxvYXQtcmlnaHQiIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci0yIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgICAgImJvcmRlci1yaWdodCI6ICIycHggZG90dGVkIHJnYig1MSwgNTEsIDUxKSIsCiAgICAgICAgICAgICAgICBkaXNwbGF5OiAibm9uZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJyZ2IoMCwgMTA5LCA0NCkiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiIOKAlCBOZXR3b3JrIE5leHQgIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogInJnYig0OSwgMTMwLCAxODkpIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiDigJQgRGlyZWN0ICIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIpCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogInBhY2tldC1sb3NzLWNoYXJ0LTEiIH0gfSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkIG1iLTIiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtaGVhZGVyIiB9LCBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiIEJhbmR3aWR0aCAiKV0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbG9hdC1yaWdodCIgfSwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTIiLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAiYm9yZGVyLXJpZ2h0IjogIjJweCBkb3R0ZWQgcmdiKDUxLCA1MSwgNTEpIiwKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJub25lIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNTdHlsZTogeyBjb2xvcjogIm9yYW5nZSIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIg4oCUIFVwICIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljU3R5bGU6IHsgY29sb3I6ICJibHVlIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiDigJQgRG93biAiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInNwYW4iKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImZsb2F0LXJpZ2h0IiB9LCBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBhdHRyczogeyBpZDogInRyYWZmaWMtdXAtbGVnZW5kIiB9IH0pLAogICAgICAgICAgICBfYygic3BhbiIsIHsgYXR0cnM6IHsgaWQ6ICJ0cmFmZmljLWRvd24tbGVnZW5kIiB9IH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBhdHRyczogeyBpZDogImJhbmR3aWR0aC1jaGFydC0xIiB9IH0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1pbWctdG9wIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgIHdpZHRoOiAiMTAwJSIsCiAgICAgICAgICBoZWlnaHQ6ICI0MHZoIiwKICAgICAgICAgIG1hcmdpbjogIjBweCIsCiAgICAgICAgICBwYWRkaW5nOiAiMHB4IiwKICAgICAgICAgIHBvc2l0aW9uOiAicmVsYXRpdmUiCiAgICAgICAgfSwKICAgICAgICBhdHRyczogeyBpZDogInNlc3Npb24tdG9vbC1tYXAiIH0KICAgICAgfSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkZCIsIFtfYygiZW0iLCBbX3ZtLl92KCIgTUVUQSBMT0NBVElPTiBJU1AgIildKV0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkZCIsIFsKICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1kYXJrIiB9LCBbX3ZtLl92KCIgTUVUQSBVU0VSIEhBU0ggIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoZWFkIiwgWwogICAgICBfYygidHIiLCBbCiAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjUwJSIgfSB9LCBbX3ZtLl92KCIgTmFtZSAiKV0pLAogICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNi42NiUiIH0gfSwgW192bS5fdigiIFJUVCAiKV0pLAogICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNi42NiUiIH0gfSwgW192bS5fdigiIEppdHRlciAiKV0pLAogICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNi42NiUiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIgUGFja2V0IExvc3MgIikKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRib2R5IiwgWwogICAgICBfYygidHIiLCBbCiAgICAgICAgX2MoInRkIiwgW19jKCJhIiwgeyBzdGF0aWNDbGFzczogInRleHQtZGFyayIgfSwgW192bS5fdigiTkFNRSIpXSldKSwKICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIgQ0xJRU5UIFNUQVRTIFJUVCAiKV0pLAogICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIiBDTElFTlQgU1RBVFMgSklUVEVSICIpXSksCiAgICAgICAgX2MoInRkIiwgW192bS5fdigiIENMSUVOVCBTVEFUUyBQQUNLRVRMT1NTJSAiKV0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidGhlYWQiLCBbCiAgICAgIF9jKCJ0ciIsIFsKICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNTAlIiB9IH0sIFtfdm0uX3YoIiBOYW1lICIpXSksCiAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyB3aWR0aDogIjUwJSIgfSB9LCBbX3ZtLl92KCIgUm9sZSAiKV0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygidGJvZHkiLCBbCiAgICAgIF9jKCJ0ciIsIFsKICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIgTUVUQSBDTElFTlQgQUREUiAiKV0pLAogICAgICAgIF9jKCJ0ZCIsIFtfYygiZW0iLCBbX3ZtLl92KCIgVXNlciAoUGxheWVyKSAiKV0pXSkKICAgICAgXSksCiAgICAgIF9jKCJ0ciIsIFsKICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIgTkFNRSAiKV0pLAogICAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIiBIb3AgSU5ERVggKyAxICIpXSkKICAgICAgXSksCiAgICAgIF9jKCJ0ciIsIFsKICAgICAgICBfYygidGQiLCBbX3ZtLl92KCIgTUVUQSBTRVJWRVIgQUREUiAiKV0pLAogICAgICAgIF9jKCJ0ZCIsIFtfYygiZW0iLCBbX3ZtLl92KCJEZXN0aW5hdGlvbiBTZXJ2ZXIiKV0pXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgIlxuICAgICAgICAgICAgICAgICAgICBkLWZsZXhcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50LWJldHdlZW5cbiAgICAgICAgICAgICAgICAgICAgZmxleC13cmFwXG4gICAgICAgICAgICAgICAgICAgIGZsZXgtbWQtbm93cmFwXG4gICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zLWNlbnRlclxuICAgICAgICAgICAgICAgICAgICBwdC0zXG4gICAgICAgICAgICAgICAgICAgIHBiLTJcbiAgICAgICAgICAgICAgICAgICAgbWItM1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tXG4gICAgICAgICAgICAgICAgICAiCiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiaDEiLCB7IHN0YXRpY0NsYXNzOiAiaDIiIH0sIFtfdm0uX3YoIiBVc2VyIFRvb2wgIildKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImJ0bi10b29sYmFyIG1iLTIgbWItbWQtMCBmbGV4LWdyb3ctMSBoaWRkZW4iIH0sCiAgICAgICAgICBbX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtci1hdXRvIiB9KV0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImZvcm0iLCB7IHN0YXRpY0NsYXNzOiAiZmxvdy1zdGF0cy1mb3JtIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAidXNlci1oYXNoLWlucHV0IiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIFVzZXIgSGFzaCAiKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIsCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogIkVudGVyIGEgVXNlciBIYXNoIHRvIHZpZXcgc3RhdGlzdGljcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWF1dG8iIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSIsIGF0dHJzOiB7IHR5cGU6ICJzdWJtaXQiIH0gfSwKICAgICAgICAgICAgICBbX3ZtLl92KCIgVmlldyBTZXNzaW9ucyAiKV0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoZWFkIiwgWwogICAgICBfYygidHIiLCBbCiAgICAgICAgX2MoInRoIiwgW19jKCJzcGFuIiwgW192bS5fdigiIFNlc3Npb24gSUQgIildKV0pLAogICAgICAgIF9jKCJ0aCIsIFtfYygic3BhbiIsIFtfdm0uX3YoIiBQbGF0Zm9ybSAiKV0pXSksCiAgICAgICAgX2MoInRoIiwgW19jKCJzcGFuIiwgW192bS5fdigiIENvbm5lY3Rpb24gVHlwZSAiKV0pXSksCiAgICAgICAgX2MoInRoIiwgW19jKCJzcGFuIiwgW192bS5fdigiIElTUCAiKV0pXSksCiAgICAgICAgX2MoInRoIiwgW19jKCJzcGFuIiwgW192bS5fdigiIERhdGFjZW50ZXIgIildKV0pLAogICAgICAgIF9jKCJ0aCIsIFtfYygic3BhbiIsIFtfdm0uX3YoIiBTZXJ2ZXIgQWRkcmVzcyAiKV0pXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ0ciIsIFsKICAgICAgX2MoInRkIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtZGFyayBmaXhlZC13aWR0aCIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIgU0VTU0lPTiBJRCAiKV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygidGQiLCBbX3ZtLl92KCIgU0VTU0lPTiBQTEFURk9STSAiKV0pLAogICAgICBfYygidGQiLCBbX3ZtLl92KCIgU0VTU0lPTiBDT05ORUNUSU9OICIpXSksCiAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIiBTRVNTSU9OIExPQ0FUSU9OIElTUCAiKV0pLAogICAgICBfYygidGQiLCBbX3ZtLl92KCIgU0VTU0lPTiBEQVRBQ0VOVEVSICIpXSksCiAgICAgIF9jKCJ0ZCIsIFtfdm0uX3YoIiBTRVNTSU9OIFNFUlZFUiBBRERSICIpXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJ0ciIsIFsKICAgICAgX2MoInRkIiwgeyBzdGF0aWNDbGFzczogInRleHQtbXV0ZWQiLCBhdHRyczogeyBjb2xzcGFuOiAiNyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCIgVGhlcmUgYXJlIG5vIHNlc3Npb25zIGJlbG9uZ2luZyB0byB0aGlzIHVzZXIuICIpCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICJcbiAgICAgICAgICAgICAgICAgICAgZC1mbGV4XG4gICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXG4gICAgICAgICAgICAgICAgICAgIGZsZXgtd3JhcFxuICAgICAgICAgICAgICAgICAgICBmbGV4LW1kLW5vd3JhcFxuICAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtcy1jZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgcHQtM1xuICAgICAgICAgICAgICAgICAgICBwYi0yXG4gICAgICAgICAgICAgICAgICAgIG1iLTNcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyLWJvdHRvbVxuICAgICAgICAgICAgICAgICAgIgogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImgxIiwgeyBzdGF0aWNDbGFzczogImgyIiB9LCBbX3ZtLl92KCIgRG93bmxvYWRzICIpXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJidG4tdG9vbGJhciBtYi0yIG1iLW1kLTAgZmxleC1ncm93LTEgaGlkZGVuIiB9LAogICAgICAgICAgW19jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibXItYXV0byIgfSldCiAgICAgICAgKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKAogICAgICAiZGl2IiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgIlxuICAgICAgICAgICAgICAgICAgICBkLWZsZXhcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50LWJldHdlZW5cbiAgICAgICAgICAgICAgICAgICAgZmxleC13cmFwXG4gICAgICAgICAgICAgICAgICAgIGZsZXgtbWQtbm93cmFwXG4gICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zLWNlbnRlclxuICAgICAgICAgICAgICAgICAgICBwdC0zXG4gICAgICAgICAgICAgICAgICAgIHBiLTJcbiAgICAgICAgICAgICAgICAgICAgbWItM1xuICAgICAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tXG4gICAgICAgICAgIgogICAgICB9LAogICAgICBbCiAgICAgICAgX2MoImgxIiwgeyBzdGF0aWNDbGFzczogImgyIiB9LCBbX3ZtLl92KCIgU2V0dGluZ3MgIildKSwKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImJ0bi10b29sYmFyIG1iLTIgbWItbWQtMCBmbGV4LWdyb3ctMSBoaWRkZW4iIH0sCiAgICAgICAgICBbX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtci1hdXRvIiB9KV0KICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAic3Bpbm5lci1ib3JkZXIiLCBhdHRyczogeyByb2xlOiAic3RhdHVzIiB9IH0sCiAgICAgIFtfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJzci1vbmx5IiB9LCBbX3ZtLl92KCJMb2FkaW5nLi4uIildKV0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiY3VzdG9tZXJJZCIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCIgQXV0b21hdGljIFNpZ24taW4gRG9tYWluICIpCiAgICAgIF0pLAogICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLXNtIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgdHlwZTogInRleHQiLAogICAgICAgICAgdmFsdWU6ICJuZXR3b3JrbmV4dC5jb20iLAogICAgICAgICAgaWQ6ICJhdXRvLXNpZ24taW4tZG9tYWluIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLXRleHQgdGV4dC1tdXRlZCIgfSwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICcgSWYgeW91IHNldCB0aGlzIHRvIGEgZG9tYWluLCBzdWNoIGFzICJleGFtcGxlLmNvbSIsIHRoZW4gYW55b25lIHdpdGggYSB2ZXJpZmllZCBlbWFpbCBhZGRyZXNzIHdpdGggdGhpcyBkb21haW4gd2lsbCBhdXRvbWF0aWNhbGx5IGpvaW4geW91ciBhY2NvdW50IHdoZW4gbG9nZ2luZyBpbi4gWW91IGNhbiBzZXQgdGhpcyBzbyB0aGF0IHlvdSBkb25cJ3QgbmVlZCB0byBtYW51YWxseSBvbmJvYXJkIGV2ZXJ5b25lIGluIHlvdXIgb3JnYW5pemF0aW9uLiAnCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiY3VzdG9tZXJJZCIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCIgUGVybWlzc2lvbiBMZXZlbCAiKQogICAgICBdKSwKICAgICAgX2MoInNlbGVjdCIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgYXR0cnM6IHsgaWQ6ICJhdXRvLXNpZ25pbi1wZXJtaXNzaW9ucyIsIG11bHRpcGxlOiAiIiB9CiAgICAgIH0pLAogICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS10ZXh0IHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFRoZSBwZXJtaXNzaW9uIGxldmVsIHRvIGdyYW50IGFjY291bnRzIHRoYXQgam9pbiB5b3VyIGFjY291bnQgdmlhIGF1dG9tYXRpYyBzaWduLWluLiAiCiAgICAgICAgKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAic3Bpbm5lci1ib3JkZXIiLCBhdHRyczogeyByb2xlOiAic3RhdHVzIiB9IH0sCiAgICAgIFtfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJzci1vbmx5IiB9LCBbX3ZtLl92KCJMb2FkaW5nLi4uIildKV0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLWdyb3VwIiB9LCBbCiAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiY3VzdG9tZXJJZCIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCIgQWRkIHVzZXJzIGJ5IGVtYWlsIGFkZHJlc3MgIikKICAgICAgXSksCiAgICAgIF9jKCJ0ZXh0YXJlYSIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc20iLAogICAgICAgIGF0dHJzOiB7IGlkOiAibmV3LXVzZXItZW1haWxzIiB9CiAgICAgIH0pLAogICAgICBfYygic21hbGwiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS10ZXh0IHRleHQtbXV0ZWQiIH0sIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIEVudGVyIGEgbmV3bGluZSBvciBjb21tYS1kZWxpbWl0ZWQgbGlzdCBvZiBlbWFpbCBhZGRyZXNzZXMgdG8gYWRkIHVzZXJzIHRvIHlvdXIgYWNjb3VudC4gIgogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZm9ybS1ncm91cCIgfSwgWwogICAgICBfYygibGFiZWwiLCB7IGF0dHJzOiB7IGZvcjogImN1c3RvbWVySWQiIH0gfSwgWwogICAgICAgIF92bS5fdigiIFBlcm1pc3Npb24gTGV2ZWwgIikKICAgICAgXSksCiAgICAgIF9jKCJzZWxlY3QiLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBpZDogImFkZC11c2VyLXBlcm1pc3Npb25zIiwKICAgICAgICAgIHBsYWNlaG9sZGVyOiAiU2VsZWN0Li4uIiwKICAgICAgICAgIG11bHRpcGxlOiAiIgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF9jKCJzbWFsbCIsIHsgc3RhdGljQ2xhc3M6ICJmb3JtLXRleHQgdGV4dC1tdXRlZCIgfSwgWwogICAgICAgIF92bS5fdigiIFRoZSBwZXJtaXNzaW9uIGxldmVsIHRvIGdyYW50IHRoZSBhZGRlZCB1c2VyIGFjY291bnRzLiAiKQogICAgICBdKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJkaXYiLAogICAgICB7IHN0YXRpY0NsYXNzOiAic3Bpbm5lci1ib3JkZXIiLCBhdHRyczogeyByb2xlOiAic3RhdHVzIiB9IH0sCiAgICAgIFtfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJzci1vbmx5IiB9LCBbX3ZtLl92KCJMb2FkaW5nLi4uIildKV0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInRoZWFkIiwgeyBzdGF0aWNDbGFzczogInRoZWFkLWxpZ2h0IiB9LCBbCiAgICAgIF9jKCJ0ciIsIFsKICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMjAlIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIEVtYWlsIEFkZHJlc3MgIikKICAgICAgICBdKSwKICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiNzAlIiB9IH0sIFtfdm0uX3YoIiBQZXJtaXNzaW9ucyAiKV0pLAogICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMCUiIH0gfSwgW192bS5fdigiIEFjdGlvbnMgIildKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}