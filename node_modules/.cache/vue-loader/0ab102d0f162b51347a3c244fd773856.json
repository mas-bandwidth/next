{"remainingRequest":"/home/baumbachandrew/Projects/Work/portal/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/baumbachandrew/Projects/Work/portal/src/App.vue?vue&type=template&id=7ba5bd90&","dependencies":[{"path":"/home/baumbachandrew/Projects/Work/portal/src/App.vue","mtime":1593632022704},{"path":"/home/baumbachandrew/Projects/Work/portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/baumbachandrew/Projects/Work/portal/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/baumbachandrew/Projects/Work/portal/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/baumbachandrew/Projects/Work/portal/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}