DONE

	Use queries to look for bad things

	Fallback to direct is happening a lot (thousands of times a day)

	Fallback to direct error is not showing up in error code.

	SessionError_Aborted = (1 << 5) seems to be happening semi-frequently (hundreds of times a day)

	Bad slice number (512) is happening extremely rarely. a few a day...

	A lot of route_no_longer_exists are happening, 1000s a day.

	Latency worse is happening less than 100 times a day.

	Mispredict is happening thousands of times a day.

	Best thing I can do is try disabling the mispredict.

	I can also disable the latency worse.

	Did this by setting core.Relax = true, easier than doing it in route shader.

	This way we can turn off relax whenever and return to old behavior.

	Verify we no longer see next latency too high

	Verify we no longer see mispredicts

	Verify we no longer see latency worse

	Look into the abort. Why does it happen? Is it related to fallback to direct?

		// currently taking network next

		if !state.Request.Next {

			// the sdk aborted this session

			core.Debug("aborted")
			state.Output.RouteState.Next = false
			state.Output.RouteState.Veto = true
			state.Error |= constants.SessionError_Aborted
			if state.Debug != nil {
				*state.Debug += "aborted\n"
			}
			return
		}

	It's basically the backend going, OK hold on, the previous slice was next, but now we're direct.

	It's effectively a fallback to direct that forgets to set the fallback to direct flag.

	To diagnose what is going on, we need to find where (on the server or client) it might
	transition from being next to being on direct, without setting the fallback to direct flag.

	Build up one graph "bad stuff" where all the bad stuff we don't want to see is graphed in the last 24 hours by hour.

	This will make it easy to apply fixes and verify they work quickly.

TODO

	The fallback to direct error is not being set in the summary, even though it is set on the bool.

	-----

	Try to identify why abort is triggering.

	It's basically a fallback to direct while forgetting to set the fallback to direct flag.

	-----

	Things not fixed yet:

		1. Fallback to direct

		2. Abort

		3. Lost route

	-----

	Wait for the patch to go out. We should see a reduction in fallback to direct (longer timeouts).

	Plus, we will see the reasons for fallback to direct. Identify what is happening and think about how it could happen.

	Can we reduce it?

	-----

	Why is lost route happening?

	It could be that the server relay is flaky

	It could be that the client has only one working client relay, and it goes away or becomes not routable?

	But shouldn't the system find other routes? There's usually a lot of route redundancy.

	Drill in on sessions that lost route and see what's happening.

	-----

	Drill in and find brasil sessions above 100ms that aren't being fixed.

	Why not? What's happening?

	Things it could be:

		1. No client relays

		2. No server relays

		3. No route

		4. Fallback to direct

		5. ???

	-----





















	-----

	Would be nice if I could get the session counts over to the left a bit so I don't need to include scrollbar in screenshots...

	-----

	Add a functional test to verify that we see the correct lat/longs passed up from the SDK

	-----

	Add a functional test to verify that we see server delta time min/max/avg passed up from SDK

	-----

	Add a functional test to verify we get game rtt, jitter and pl

	-----

	Add a functional test to verify we see flags

	-----

	Add functional test to verify we see match id from sessions

	-----

	Update documentation

	-----

	Fix some easy issues

	-----

	Make release

	-----
