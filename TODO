DONE

	Optimize unit test builds

	"next database" would be cool. print out the current database.bin

	Sketch out database validation

TODO

	Hook up database validation where it's needed

	-------------

	Actually implement database validation

	-------------

	Standardize the code to read from SQL into the database.go module.

	Add correct error handling, eg. return error with detailed description of what went wrong.

	Call into the database function from the extract_database tool.

	-------------

	Command to load a relay version, eg. "next load google.iowa.1 reference-1.0.5"

	-------------

	raspberry client should detect when it has fallen back to direct and restart the client. will make iteration faster.

	----------------

	Concurrent map read in happy path. Not sure what is causing this:

		fatal error: concurrent map read and map writereceived relay update for 'local.3' 00:27
		506goroutine 32 [running]: 00:27
		507github.com/networknext/backend/modules/common.(*RelayManager).GetRelays(0xc00007eb40, 0x63d181b1, {0xc00004c320, 0xa, 0xc000130060?}, {0xc0000014a0, 0xa, 0x11bb440?}, {0xc0003041e0, 0xa, ...}) 00:27
		508	/home/semaphore/backend/modules/common/relay_manager.go:352 +0x4ad 00:27
		509github.com/networknext/backend/modules/common.(*RelayManager).GetRelaysCSV(0x0?, 0x2?, {0xc00004c320?, 0x2d?, 0x2d?}, {0xc0000014a0?, 0xc00004c370?, 0xa?}, {0xc0003041e0, 0xa, ...}) 00:27
		510	/home/semaphore/backend/modules/common/relay_manager.go:436 +0x65 00:27
		511main.UpdateRouteMatrix.func1() 00:27
		512	/home/semaphore/backend/cmd/relay_backend/relay_backend.go:489 +0x1a5 00:27
		513created by main.UpdateRouteMatrix 00:27
		514	/home/semaphore/backend/cmd/relay_backend/relay_backend.go:471 +0xcc 00:27
		515goroutine 1 [chan receive]: 00:27
		516github.com/networknext/backend/modules/common.(*Service).WaitForShutdown(0xc0000b8580) 00:27
		517	/home/semaphore/backend/modules/common/service.go:563 +0xb3 00:27
		518main.main() 00:27
		519	/home/semaphore/backend/cmd/relay_backend/relay_backend.go:128 +0xf18 00:27
		520goroutine 19 [select]: 00:27

	----------------


































































Essentials:

    --------------

    Send portal messages to redis streams

	--------------

	Portal cruncher new

	--------------

	Send rest of server backend messages to google pubsub

	--------------

	Extend analytics service to insert messages into bigquery.

	--------------

	Leader election needs to wait at least 11 seconds to make sure it gets the correct result when > 2 vms start at the same time without flap

	--------------

	Leader election func testing for relay backends + ready delay

	--------------

	Implement func test for server backend to make sure when it is in connection drain state, it indicates to the LB health test that traffic should not be sent to it.

	--------------

	Extend the relay to support a secondary relay backend.

	This will enable relays to be shared between dev and dev5, and prod and prod5.

	--------------

	We need a new relay implementation. The current relay is garbage.

	--------------








Nice to have:

	-----------

	Add match id to both portal data and session update data by default (first slice only, and summary...)

	Then work out a new API to link the session with a match (start of session, with tags...), separate from setting match data (end of match).

	-----------

	Add unit test to make sure we write out session update message

	Add unit test to make sure we write out portal message

	Add unit test to make sure we write out near relay message 

	--------------

	Simplified debug string for first slice: "first slice always goes direct" without a bunch of other junk.

	Printing out names of near relays would be nice etc.

	--------------

	Code in service.go to only shut down service once various subsystems have reported that they're complete

	Extend this to the server backend to make sure that we flush all channels of messages before shutting down

	--------------

	Change SDK to pass up the real packet loss, real jitter, real out of order etc.

	We don't need to store multiple uint64 in session data to calculate this

	It's wasteful to pass this data back to the client with each session update response.

	--------------

	Create a new message for near relay stats.

	Unit test it, then on slice #1 when near relay data comes in, write a near relay ping stats message and send it.

	--------------

	Implement the near relay ping token.

	We need to do this now, so we don't have problems with it in the future.

	It can be as simple as an expire time for pings

	The relay can also have a count of the maximum number of pings to reply to, eg. 10 * 10 = 100.

	--------------

	Implement a fix for a re-ordering of route tokens / continue tokens to create loops. Order of tokens must be enforced.

	This probably means we need to have some sort of signed bit, that indicates that indeed, this is token n, n+1 etc.

	And then this can be checked.

	Needs to be designed...

	--------------

	Extend the SDK5 so we have the option of sending down new near relay stats on multiple slices, later on.

	Use a near relay ping sequence # (uint8) so we can tell when we have new near relay pings that we should upload to the backend.

	Add a func test to make sure we capture this functionality. We want the option to redo near relay pings on later slice, in the future without changing the SDK.

	--------------

	Multipath across two network next routes.

	--------------

	It would be good to track when sessions shut down, vs. having them always time out

	This would require new messages up then back down the chain of relays for ack

	It would also reduce the risk of missing packets or having sessions time out and not noticing.

	We can now track sessions timing out before being closed, and this would indicate problems (or at least, hard disconnects...)

	Again, adding this later would be challenging. Best to do it now.

	--------------

	Rework the reference relay and make it the official relay.

	The trick is to use the code from the proxy to go wide across n threads with SO_REUSEPORT

	Since each port/address maps to a specific socket, there is no need for locks across the session map, there will be a session map per-thread.

	Stats can be managed with atomics, eg. count of sessions per-thread in a uint64 atomic, summed by the main thread before uploading the total to the relay backend.

	--------------

	A relay which has its firewall misconfigured will cause players to fallback to direct, because traffic can't be sent to it.

	Would be nice if the relay backend would talk to the relay over its UDP port and say hi, and if this heartbeat was a prerequisite for the relay coming online.

	This way misconfigured relays can't cause problems.

	--------------

	The SDK must never transmit the user hash in plaintext. It must always be encrypted.

	--------------

	Put "MatchId" into session data (first).

	This way we can easily look up from a session the match it is in.

	--------------

	I'm not sure the expire timestamp in the server backend was even working correctly.

	Investigate how the expire timestamp was used, calculated and if it was even doing anything...

	Also investigate relay concept of time in reference vs. real relay

	--------------

	Relay stats message needs to be revisited. Make sure it doesn't have old crap in it

	--------------

	We are very close to removing libsodium from golang. It should be possible. If we do this, it becomes much easier to build and run golang services, as they are fully native.

	--------------

	We need to track client no packets in 0.1 sec, 0.25sec, 0.5sec, 1.0 sec.

	This way we can identify if we are likely seeing thread starvation on the server

	They currently have 1000 server threads on the server, and this is potentially causing serious starvation issues with packets... (!!!!)

	--------------

	Can we do something to detect thread starvation on the server and warn?

	It looks like we've been in production with thread starvation with Blue Mammoth for a while now, and it would be much better if we could catch this ourselves, before it becomse a customer problem.

	--------------

	Relays should detect and count when they can't read the route token

	This indicates a misconfigured relay. This should get loaded up into bigquery so it can be searched on by data science.

	--------------
