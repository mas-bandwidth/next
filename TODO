DONE

	Extend code in server backend session update to fill next/prev internal flags, but ONLY set internal if BOTH relays have internal addresses and are same supplier.

TODO

	--------------

	Send down array of "internal" uint8 flags to relay with update. Only set internal if BOTH relays have internal addresses and are same supplier.

    --------------

    Update the reference relay to read these internal uint8 flags and use them to decide whether it uses public or internal address when sending ping packets to other relays.

	--------------

	Fill in the next/prev internal flags in the route token

	--------------


















































Essentials:

    --------------

	Create a new minimal "api" service that provides the JSONRPC calls necessary for the next tool to work.

	--------------

	Extend "next relays" to show "PublicAddress" and "InternalAddress" for relays.

	--------------

	Simplify the sync service so it just periodically downloads files and puts them in google cloud storage locations

	--------------

    Send portal messages to redis streams

	--------------

	Portal cruncher

	--------------

	Send rest of server backend messages to google pubsub

	--------------

	Extend relay stats, or add a new message to make sure relay counters get uploaded to bigquery from the relay backend leader

	This lets data science investigate relay counters by time as well. Check if relays are working correctly or having problems.

	--------------

	Extend analytics service to insert messages into bigquery.

	--------------

	Leader election needs to wait at least 11 seconds to make sure it gets the correct result when > 2 vms start at the same time without flap

	--------------

	Leader election func testing for relay backends + ready delay

	--------------

	Implement func test for server backend to make sure when it is in connection drain state, it indicates to the LB health test that traffic should not be sent to it.

	--------------

	Extend and clean up the current reference relay implementation so it is multithreaded.

	--------------








Nice to have:

	-----------

	Add match id to both portal data and session update data by default (first slice only, and summary...)

	Then work out a new API to link the session with a match (start of session, with tags...), separate from setting match data (end of match).

	-----------

	Add unit test to make sure we write out session update message

	Add unit test to make sure we write out portal message

	Add unit test to make sure we write out near relay message 

	--------------

	Simplified debug string for first slice: "first slice always goes direct" without a bunch of other junk.

	Printing out names of near relays would be nice etc.

	--------------

	Code in service.go to only shut down service once various subsystems have reported that they're complete

	Extend this to the server backend to make sure that we flush all channels of messages before shutting down

	--------------

	Change SDK to pass up the real packet loss, real jitter, real out of order etc.

	We don't need to store multiple uint64 in session data to calculate this

	It's wasteful to pass this data back to the client with each session update response.

	--------------

	Implement the near relay ping token.

	We need to do this now, so we don't have problems with it in the future.

	It can be as simple as an expire time for pings

	The relay can also have a count of the maximum number of pings to reply to, eg. 10 * 10 = 100.

	--------------

	Implement a fix for a re-ordering of route tokens / continue tokens to create loops. Order of tokens must be enforced.

	This probably means we need to have some sort of signed bit, that indicates that indeed, this is token n, n+1 etc.

	And then this can be checked.

	Needs to be designed...

	--------------

	Extend the SDK5 so we have the option of sending down new near relay stats on multiple slices, later on.

	Use a near relay ping sequence # (uint8) so we can tell when we have new near relay pings that we should upload to the backend.

	Add a func test to make sure we capture this functionality. We want the option to redo near relay pings on later slice, in the future without changing the SDK.

	--------------

	Multipath across two network next routes.

	--------------

	It would be good to track when sessions shut down, vs. having them always time out

	This would require new messages up then back down the chain of relays for ack

	It would also reduce the risk of missing packets or having sessions time out and not noticing.

	We can now track sessions timing out before being closed, and this would indicate problems (or at least, hard disconnects...)

	Again, adding this later would be challenging. Best to do it now.

	--------------

	The SDK must never transmit the user hash in plaintext. It must always be encrypted.

	--------------

	Put "MatchId" into session data (first).

	This way we can easily look up from a session the match it is in.

	--------------

	Relay stats message needs to be revisited. Make sure it doesn't have old crap in it

	--------------

	We are very close to removing libsodium from golang. It should be possible. If we do this, it becomes much easier to build and run golang services, as they are fully native.

	--------------

	We need to track client no packets in 0.1 sec, 0.25sec, 0.5sec, 1.0 sec.

	This way we can identify if we are likely seeing thread starvation on the server

	They currently have 1000 server threads on the server, and this is potentially causing serious starvation issues with packets... (!!!!)

	--------------

	Can we do something to detect thread starvation on the server and warn?

	It looks like we've been in production with thread starvation with Blue Mammoth for a while now, and it would be much better if we could catch this ourselves, before it becomse a customer problem.

	--------------

	Relays should detect and count when they can't read the route token

	This indicates a misconfigured relay. This should get loaded up into bigquery so it can be searched on by data science.

	--------------

	Add confirmation for all "next" tool actions that modify relays... especially "reboot", "upgrade", "start", "stop" and so on.

	OR, just disable these tool actions in prod.

	--------------

	Disable SSH related actions in "local". They don't have anywhere to go...

	--------------

	New relay really needs a series of counters that get updated with each update sent to the backend.

	These counters can be for bad things that we want to track, so we have the data by timestamp inserted into bigquery for analysis.

	eg. could not read route token, for example.

	--------------

	Functional tests to verify that relay gateway, relay backend, server backend 5 are resilient to invalid or won't read in database.bin files being injected.

	--------------

	There should be relay functional tests.

	--------------

	There should be unit tests, functional load tests for the relay manager.

	It's a problematic component. It must be absolutely solid.

	---------------

	Extend "next ssh" to ssh into google Vms by name, if no relay is found

	---------------

	I really can't answer the question "why are half the relays not carrying sessions in dev?"

	Is it just a property of the optimizer, eg. it will go away if I disable mispredict and set all costs to zero?

	Or is there some sort of bias causing this. It seems important to explore this and work it out.

	If there is some systemic bias that just makes some relays carry a lot of sessions while other relays don't... that's a serious problem in production.

	---------------

	There should be func tests for relay counters

	---------------

	Add a packets sent counter to reference relay. Right now we have a packets received counter, but not sent. Useful to have both.

	---------------

	View leader election state as a HTML table under "/leader"

    --------------

    Add extensive verification when a relay starts to catch configuration errors:

		1. Verify UDP port is working

		2. Verify its public/private keypairs are valid (can encrypt/decrypt)

 		3. Verify that it can read/write test tokens sent to it from the backend

		4. Verify that it is configured with the correct public and internal address

    --------------
