DONE

	Main thread next_client_t needs magic updated each time a route changes (new notify, next_notify_updated_magic...)

	Internal client needs to clear client external address and magic values on close session.

	Client needs to use magic value and client external address on main thread packet send.

	The server proxy session entry needs to (lazily) update the magic value post-route update ack. 

	New server notify.

	Client needs to accept both previous and current magic on packet read.

	Server needs to accept both previous and current magic on packet read.

	Client should use magic value and client external address when sending packets to the server and relays.

	Server should use magic per-session proxy entry and address of that session, when sending packets to a client.

	At this point magic should theoretically be working... hahahahaha

	Port across the pittle and chonkle functions plus tests into golang (I think this has already been done?)

	When the server receives a backend packet, the magic should always be zero.

	Move the client packet filter processing into a block, so the data doesn't get accidentally reused in response packets.

	Do the same to the server packet filter processing.

	Fix the upgrade response so it has the correct magic and address data

	Get the reference backend 5 up, and have it working with the pittle and chonkle -- hold magic at zero for all server backend comms.

	Extend the server init response packet to include the initial magic value.

	Reference backend needs to know its send and receive addresses and ports, so it can apply the advanced packet filter.

	Port across "GetAddressData" function backend.go

	Hacked it up for now, needs better fix in future.

	There's a mismatch between chonkle in C++ and Golang. Confirmed with test.

	Fix the desync in golang. It's probably some transformation of the inputs to byte arrays...

	It was a copy pasta. Also, signed vs. unsigned error in C (via char*).

	Get advanced packet filter working reading server init request packet backend side, with magic of zero.

TODO

	--------------

	read_backend_packet needs to be updated so that it works when the header at the front is skipped past with += 16

	At this point, the server should receive and process the init response packet from the ref backend 5.

	--------------

	Add a goroutine to the reference backend 5 to generate a new magic every 60 seconds.

	Add a "getMagic" function to safely get the magic w. read lock as needed.

	Log the magic when it changes in the ref backend.

	--------------
	
	Extend server init response packet to include current magic value.

	Verify that the server gets the initial magic value.

	--------------







	--------------

	Now the server can init, verify that server updates get through to the reference backend 5.

	--------------

	Extend the server update to have a server update response which includes the current magic.

	--------------

	Verify that the server gets updated magic every minute, as they charge 

	--------------

















	--------------

	Think through exactly how the server should wait 30 seconds before it uses the magic value... ?

	Seems like it should wait until it gets 3 server update responses until it considers itself fully inited?

	--------------

	But the server can't upgrade players until it knows the magic...

	This means we have a new state, where the server is unable to upgrade players, for the first 30 seconds.

	This kinda sucks.

	--------------

	Maybe the server should remember each player to be upgraded, if the upgrade is performed while the init is in progress,
	and then actually start the upgrade process, post-30 seconds and init... ?

	--------------













	--------------

	The server is in a mode where it will send server init request forever until it gets a response.

	Did I manually disable the timeout here, or is something wrong?

	Server init should timeout after 30 seconds with no response...

	--------------

	Fix up the "GetAddressData" function to work properly with IPv4 and IPv6

	--------------

	Bring across "GetAddressData" function into core.go and port across tests from C++

	--------------


















	--------------

	Now verify that the server can upgrade a client and exchange direct packets.

	--------------

	From this point get as many func tests working with direct packets as possible.

	--------------




















	==================================
	Get the client/server upgrade working and the upgraded direct packets being exchanged between client and server.

	--------------

	Update the func backend 5 so it can handle new SDK5 packet types.

	--------------

	Get various upgraded direct func tests passing.

	--------------






























	========================================================

	--------------

	Work out how to get ping tokens down to the client

	--------------

	Get the client pinging near relays w. ping tokens and getting responses.

	--------------

	Update the reference relay so it can handle the new SDK5 packet types.

	--------------

	Get an actual end-to-end network next route going with SDK5 client/server.

	--------------

	Get the rest of the func tests passing.

	--------------

	=================================================

	--------------

	Move server whois to the backend, it's unreliable when run on the SDK server
	and the iteration time for fixes (new SDK deploy) is just too long.

	--------------

	We need a server flush method to timeout all sessions and flush session updates until acked.

	--------------









	--------------

	Routing private key should be properly secured and not included in source code.

	--------------
