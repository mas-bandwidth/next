DONE

	We need to put dependencies on redis, so the redis instances get created first, then all the instance groups do.

	Right now they are created, run without redis, don't work, and I have to deploy a second time when I first bring staging up.

	Add active relays time series in relay backend

	Hook up active relays to admin view

	Added time series setup to relay backend

	Separate admin time series from buyer time series

TODO

	Do what is necessary to get relay time series working again

	I think what we need to do is to first run a pipeline to see if the keys exist, then only for existing keys, get time series data.

	--------------

	Add "portal_cruncher_sessions" counter. We need to see the throughput of the portal cruncher, to see if it is getting backed up or behind.

	Add "session_cruncher_sessions" counter. We need to see the input to the session cruncher.

	--------------

	Add option to specify that only sessions with improvement > X get sent to the portal.

	This option would make it possible to significantly reduce the cost of running redis for the portal.

	If this option is set, session counts need to be grabbed from the redis counters, not the session cruncher (as it will be inaccurate)


	--------------















	--------------

	Add sessions crunched per-second to admin view. Lets me see if portal cruncher is overloaded @ 10M

	--------------

	There seems to be rapid leader flapping in relay backend on deploy. You can see this by looking at oscillations in route matrix size and total routes in admin view.

	Can I reproduce this in dev? If I can reproduce, then I can fix it in dev.

	(Perhaps a fix could be, don't consider yourself a leader until you have a > 0 routes in the route matrix?)

	--------------

	
















	--------------

	Extend initial delay on server cruncher and session cruncher for 120. This will delay them from becoming active until they have had a full minute + to calculate sessions

	--------------

	Could I be creating too many insertion connections into redis and making it not scale as well as it could? Tuning is probably required here.

	--------------

	Is there something I can do to ensure that all data for a session ends up on the same redis cluster?

	Slice data is what needs to be looked at very closely...

	--------------

	The server sessions not working @ 10M needs to be looked at closely

	It is most likely that too many sessions are locally created per-server, and thus, the overload occurred with the minute, minute - 1 stuff.

	But it is an average of only 100 sessions per-server, which is totally ordinary and to be expected with modern games....

	--------------

	Still getting some data holes in session slices @ 10M. Which part is getting overloaded? Portal cruncher? Redis?

	--------------

	There seems to be a load related issue @ 1000 relays.

	--------------

	Fix the fallback to direct when scaling down server backend instances.

	--------------

	Change analytics to perform bulk inserts instead of streaming inserts.

	https://cloud.google.com/bigquery/docs/write-api-batch

	--------------














Small things:

	--------------

	If a single time series or counter key does not exist, all data for the "set" of pipelined ts.range will fail.

	This seems really bad. You'd expect that it would fail to execute only for the cmds that don't have keys.

	--------------

	The sort order for sessions appears incorrect according to score... not sure why.

	--------------

	Y axis labels spill over the right side when they get up to 100,000, 1,000,000 etc... convert to 500K, 1M, 2M?

	--------------

	Current sessions on server doesn't seem to be correct, or at least, it is 181 when it should be just 1...

	--------------

	uPlot graphs really need to calculate the real maximum from the data passed in

	In so many cases, they fail to calculate it. It's extremely annoying.

	--------------

	I need more space on a standard macbook air screen in the sessions list for longer ISP names

	Right now it is way too tight. A long ISP name would throw the whole layout off

	--------------

	There will be a challenge getting prod relays up in AWS vs. dev. There are no projects to segregate?

	Might need to create a separate project, or distinguish resources with naming convention.

	--------------

	Connection type detection needs to be brought back for all platforms in the SDK. On linux, connection type was 0 -> "Unknown"

	--------------

	Session counts on relays being 8 when relay backend restarts seems a bit suspicious. Are we not decrementing session counts somewhere?

	--------------

	Probably good to provide a way to disable the high priority threads on server with env var.

	When many server instances are running on one server, this can cause problems. eg. thread starvation

	--------------










Finalize terraform and document:

	Setup projects and service accounts with terraform

	--------------

	Relays need to be setup to use cloud storage for tf state

	--------------








Finalize SDK and UE5 plugin:

	------------------

	Update to latest PS4 and PS5 SDK on Windows PC

	Verify that we can build, link and run across PS4

	Verify that we can build, link and run across PS5

	------------------

	Update to latest XDK

	Verify that we can build, link and run across XBoxOne

	Verify that we can build, link and run across SeriesX

	------------------

	Setup PS4 compilation with custom agents

	Setup PS5 compilation with custom agents

	Setup XBoxOne compilation with custom agents

	Setup Series X compilation with custom agents

	------------------

	Get the UE5 plugin back up

	Make sure to include Flush on the server before the server is destroyed

	------------------
