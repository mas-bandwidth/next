DONE

	Need to seriously consider the implementation of advanced packet filter and how it will work with load balanced routers, eg. my firewalla with multi-WAN.

	Can it work? 

	Maybe the hashes need to not be tied to the source address/port?

	Maybe the advanced packet filter can't work with the first hop relays?

	Maybe we need n addresses "approved" in the ping token?

	Think this through, it's complicated, and maybe it just doesn't work. Think about it -- will it pass the challenge/response from gcore, and then not be able to connect, because it comes through to a different dest address? No, it's the same dest address the whole time, so it should pin.

	Now the client is filtering out the server -> client direct packet (1) with the advanced packet filter.

	What's causing this?

	I'll bet it's a problem where the magic isn't communicated to the server from internal.

	Encoding with magic of zero. It's the only difference.

	Client is now receiving direct packets, but they are garbage.

	It's going to be another problem with the += 16 on the packet data or whatever.
	
	Fixed. Client is upgrading and successfully sending and receiving direct packets :)

TODO

	--------------

	Verify that the client works across magic changes, and sees the updated magic (witchout any logs from advanced packet filter).

	--------------




















	--------------

	Idea, challenge response encoded in ping/pong packets, eg. some sort of data passed back in the pong, expected to be passed back to the relay in the next ping...

	--------------











Exec meeting:

	Turtle Rock acquisition by Tencent. Positive. Q1 or Q2 opportunity for us again. Assume $15k.

	Looker contract. What's going on?

	Update on EA meeting with Sunaina?


B2S:

	Turtle Rock

	Photon

	Velan

	Albion Online

	Mountain Top

	Follow up with Jon and Drew

	Tech follow up with Pragma

	Supercell

	Rec Room

	Valorant

	GGPO team

	Fortnite guys

	Roblox

	WoW guys. Blizzard.

	What other top games?

	----------------------

















	--------------

	Client also needs to be able to read packets sent with current, upcoming and previous magic (in that order).

	Do we still need complicated acks between the client and server for which magic to send with? I don't think so...

	--------------








	--------------

	The server is in a mode where it will send server init request forever until it gets a response.

	Server init should timeout if no response is received within 30 seconds...

	--------------

	Now the server can init, verify that server updates get through to the reference backend 5.

	--------------

	Extend the server update to have a server update response which includes the current magic.

	--------------

	Verify that the server gets updated magic every minute, as they charge 

	--------------

















	--------------

	Fix up the "GetAddressData" function to work properly with IPv4 and IPv6

	--------------

	Bring across "GetAddressData" function into core.go and port across tests from C++

	--------------


















	--------------

	Now verify that the server can upgrade a client and exchange direct packets.

	--------------

	From this point get as many func tests working with direct packets as possible.

	--------------




















	==================================
	Get the client/server upgrade working and the upgraded direct packets being exchanged between client and server.

	--------------

	Update the func backend 5 so it can handle new SDK5 packet types.

	--------------

	Get various upgraded direct func tests passing.

	--------------






























	========================================================

	--------------

	Work out how to get ping tokens down to the client

	--------------

	Get the client pinging near relays w. ping tokens and getting responses.

	--------------

	Update the reference relay so it can handle the new SDK5 packet types.

	--------------

	Get an actual end-to-end network next route going with SDK5 client/server.

	--------------

	Get the rest of the func tests passing.

	--------------

	=================================================

	--------------

	Move server whois to the backend, it's unreliable when run on the SDK server
	and the iteration time for fixes (new SDK deploy) is just too long.

	--------------

	We need a server flush method to timeout all sessions and flush session updates until acked.

	--------------









	--------------

	Routing private key should be properly secured and not included in source code.

	--------------
