DONE

	reference backend5 needs golang functions for chonkle, pittle generation, simple packet filter, complex packet filter.

	Write core tests for chonkle, pittle and packet filter in core_test.go

	Initially, when getting everything working, magic will be held at zero.

	Extend the reference server backend 5 so it can apply the basic packet filter to incoming packets.

	Prints out whether they pass or not.

TODO

	--------------

	Fix the server5 so it can actually send server init packets to the backend.

	Verify the server backend 5 can receive the packets and they pass the basic packet filter.

	Extend the server backend 5 to respond with an server init response with chonkle and pittle that pass basic packet filter.

	Verify the server5 receives the init response and it passes basic packet filter.

	--------------

	Update the ref backend 5 so the server5 can talk with it

	This means:

		1. server init request
		2. server init response
		3. session update

	Packets all get through and their responses are handled by the SDK.

	--------------

	Once the server5 can talk with backend5, pass over next.cpp so upgrade passes

	This means that:

		1. upgrade request
		2. upgrade response
		3. upgrade ack

	Packets all get sent, received and processed, and the client and server can exchange packets over direct packets.

	--------------

	Get the direct packet func test passing.

	--------------

	Extend the relay so it knows how to process SDK5 packets.

	--------------

	Work out how to get ping tokens down to the client

	--------------

	Get the client pinging near relays w. ping tokens and getting responses.

	--------------

	Get a func test working with a network next route.

	--------------

	Now we need to work out how to make magic dynamic.

	--------------

	Get rest of func tests passing

	--------------

	Switch the routing keypair and store it via a secret.

	Don't actually put it in the code anywhere.

	The only person who knows the keypair should be me.

	--------------
