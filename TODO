DONE

TODO

	--------------

	Need to get the whole dev environment setup and working and be trusted, including continuous raspberry pi clients.

	--------------

	Then implement the code that passes session update messages from the session update handler.

	--------------

	Implement the near relay ping token.

	We need to do this now, so we don't have problems with it in the future.

	--------------

	Implement the relay backend checking signature as needed to secure relay updates.

	--------------

	Implement a fix for a re-ordering of route tokens / continue tokens to create loops. Order of tokens must be enforced.

	This probably means we need to have some sort of signed bit, that indicates that indeed, this is token n, n+1 etc.

	And then this can be checked.

	Needs to be designed...

	--------------

	Create a new message for near relay stats.

	Unit test it, then on slice #1 when near relay data comes in, write a near relay ping stats message and send it.

	--------------

	Extend the SDK5 so we have the option of sending down new near relay stats on multiple slices, later on.

	Use a near relay ping sequence # (uint8) so we can tell when we have new near relay pings that we should upload to the backend.

	Add a func test to make sure we capture this functionality. We want the option to redo near relay pings on later slice, in the future without changing the SDK.

	--------------

	I don't trust the leader election.

	It needs more functional testing.

	The specific backends as well, especially relay gateway, and relay backend need testing to make sure that leadership changes happen properly, with the delay.

	--------------

	Rework the reference relay and make it the official relay.

	The trick is to use the code from the proxy to go wide across n threads with SO_REUSEPORT

	Since each port/address maps to a specific socket, there is no need for locks across the route manager, aside from communications to the relay backend.

	--------------
