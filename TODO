DONE

	Add a goroutine to the reference backend 5 to generate a new magic every 60 seconds.

	Add a "getMagic" function to safely get the magic w. read lock as needed.

	Log the magic when it changes in the ref backend.

	Extend server init response packet to include current magic value.

	Extend the server init response packet send to check the packet filters before sending.
	
	Verify that the server gets the initial magic value sent down in init response (via log).

TODO

	--------------

	Instead of having any complex logic on the server, client or relays...

	There should be three magics at any time.

	1. Upcoming
	2. Current
	3. Previous

	The relay, client and server will always use #2, current for sending, but will be able to read any of the 3.

	This way clients, servers and relays don't have any waiting time until they can communicate, they don't need to cache
	upcoming/current/previous and run timers. This is all done on the backend.

	On the backend, initially three random magics are selected. Then every 60 seconds, current -> previous, upcoming -> current, and roll a new upcoming.

	Then these three values are simply transmitted down to the server and relays, which just run the simple logic described above, without timers or change overs or caching or any delay waiting for upcoming to be ready.

	This works. Switch to this now.

	--------------








	--------------

	The server is in a mode where it will send server init request forever until it gets a response.

	Server init should timeout if no response is received within 30 seconds...

	--------------

	Now the server can init, verify that server updates get through to the reference backend 5.

	--------------

	Extend the server update to have a server update response which includes the current magic.

	--------------

	Verify that the server gets updated magic every minute, as they charge 

	--------------

















	--------------

	Think through exactly how the server should wait 30 seconds before it uses the magic value... ?

	Seems like it should wait until it gets 3 server update responses until it considers itself fully inited?

	--------------

	But the server can't upgrade players until it knows the magic...

	This means we have a new state, where the server is unable to upgrade players, for the first 30 seconds.

	This kinda sucks.

	--------------

	Maybe the server should remember each player to be upgraded, if the upgrade is performed while the init is in progress,
	and then actually start the upgrade process, post-30 seconds and init... ?

	--------------













	--------------

	Fix up the "GetAddressData" function to work properly with IPv4 and IPv6

	--------------

	Bring across "GetAddressData" function into core.go and port across tests from C++

	--------------


















	--------------

	Now verify that the server can upgrade a client and exchange direct packets.

	--------------

	From this point get as many func tests working with direct packets as possible.

	--------------




















	==================================
	Get the client/server upgrade working and the upgraded direct packets being exchanged between client and server.

	--------------

	Update the func backend 5 so it can handle new SDK5 packet types.

	--------------

	Get various upgraded direct func tests passing.

	--------------






























	========================================================

	--------------

	Work out how to get ping tokens down to the client

	--------------

	Get the client pinging near relays w. ping tokens and getting responses.

	--------------

	Update the reference relay so it can handle the new SDK5 packet types.

	--------------

	Get an actual end-to-end network next route going with SDK5 client/server.

	--------------

	Get the rest of the func tests passing.

	--------------

	=================================================

	--------------

	Move server whois to the backend, it's unreliable when run on the SDK server
	and the iteration time for fixes (new SDK deploy) is just too long.

	--------------

	We need a server flush method to timeout all sessions and flush session updates until acked.

	--------------









	--------------

	Routing private key should be properly secured and not included in source code.

	--------------
