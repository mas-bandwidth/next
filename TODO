DONE

	Also watch "Latency Saves (% Daily)" we will see increases here as we fix more players.

	These is a signficant increase as I bumped packet loss sensitivity up to 0.1%. 

	I think this is because small amounts of packet loss tend to indicate a connection that might need help.

	Let SLOCLAP know about short sessions.

TODO

	Work up additional queries around short sessions

	------------

	Look at "Debug Latency Not Fixed (% Daily)" to see if there is improvement.

	------------

	Vast majority of "Brasil Sessions Above 100ms Not Fixed" are because "all_client_relays_are_zero"

	This is the thing to fix now.

	no client relays now 100% tracks all client relays are zero

	so this is all the same problem. seems like I should try to fix this today.

	------------

	*** Biggest win by far is fixing fallback to direct!!! ***

	Fallback to direct % does seem to be related to how far away from google cloud server backend.

		i3d.dubai is top (3%+)!!!
		google.frankfurt.1 is bottom (zero)

	Maybe having different regional server backends will reduce?

	Try one in frankfurt?

	Try one in sao paulo?

	Try one in middle east?

	OVH ashburn has 1.0%. This is pretty bad, it's not just distance, but how well connected servers are to google cloud?

	------------

	Add a server_not_accelerated flag in the session summary. Makes it easy to exclude these.

	------------

	Watch "Lost Route (% Hourly)" to see if I can spot some improvement post fixes.

	------------

	Add "lag_spike" flag in summary. Any slice with direct rtt above 500ms.

	This should be broken up into:

		next_lag_spike
		direct_lag_spike

	------------

	next_jitter_spike
	direct_jitter_spike
	real_jitter_spike

	------------

	next_packet_loss_spike
	direct_packet_loss_spike
	real_packet_loss_spike

	------------

	It seems that duration_on_next is sometimes zero, even though a session has spent time on network next.

	What's going on here?!

	Example session:

		-8003309578772432229

	Add some analytics to track this case, and see how frequently it occurs. I think it's a pretty rare bug, but I'd like to be able to rely 100% on duration_on_next in queries

	------------------------------------

	All client relays at 255, clamped or excluded?

		-4122038815216347266
		-397611957962678889

	I think clamped.

	Add new bool: all_client_relays_clamped

	-----------

	There's a lot of stuff that sets "state.Error" kinda assuming its persistent, but it's not.

	I'd feel more comfortable migrating this over to bools instead of flags.

	And the bools must be persisted in route state and then set in the session summary.

    -----------

	To save money I should seriously consider downsizing some google cloud and AWS relays.

	At the session counts they have, many do not need more than 2 cores.

	This could save a lot of money!

	-----------

	To work out which relays should be adjusted, look at peak session count on a per-relay basis during October.

	Some will only even have a few hundred. These are the ones that can be adjusted down.

	-----

	Wait for the patch to go out. We should see a reduction in fallback to direct (longer timeouts).

	Plus, we will see the reasons for fallback to direct. Identify what is happening and think about how it could happen.

	Can we reduce it?

	-----

	Try to identify why abort is triggering.

	-----

	Why is lost route happening?

	It could be that the server relay is flaky

	It could be that the client has only one working client relay, and it goes away or becomes not routable?

	But shouldn't the system find other routes? There's usually a lot of route redundancy.

	Drill in on sessions that lost route and see what's happening.

	-----

	Fallback to direct is counter productive because it remove visibility past the point of fallback.

	Instead, we can rely on veto and abort to say, OK, we shouldn't accelerate this person anymore

	But it's good for them to keep talking to the backend as long as the session exists, so we retain visibility!

	-----

	Having a multi-region server backend could be the thing that fixes the fallback to directs in middle east, south america?

	-----



















	-----

	Would be nice if I could get the session counts over to the left a bit so I don't need to include scrollbar in screenshots...

	-----

	Add a functional test to verify that we see the correct lat/longs passed up from the SDK

	-----

	Add a functional test to verify that we see server delta time min/max/avg passed up from SDK

	-----

	Add a functional test to verify we get game rtt, jitter and pl

	-----

	Add a functional test to verify we see flags

	-----

	Add functional test to verify we see match id from sessions

	-----

	Add functional test to verify we get the likely_vpn_or_cross_region

	-----

	If we end up doing source relay filtering for jitter, add some unit tests and func tests around this.

	-----

	Update documentation

	-----

	Fix some easy issues

	-----

	Make release

	-----
