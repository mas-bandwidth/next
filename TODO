DONE

TODO

	The relay needs to be updated to support the new style pings

#define NEXT_RELAY_PING_PACKET                                         20
#define NEXT_RELAY_PONG_PACKET                                         21
	
int next_write_relay_ping_packet( uint8_t * packet_data, const uint8_t * ping_token, uint64_t ping_sequence, uint64_t session_id, const uint8_t * magic, const uint8_t * from_address, int from_address_bytes, uint16_t from_port, const uint8_t * to_address, int to_address_bytes, uint16_t to_port )
{
    uint8_t * p = packet_data;
    next_write_uint8( &p, NEXT_RELAY_PING_PACKET );
    uint8_t * a = p; p += 15;
    next_write_uint64( &p, ping_sequence );
    next_write_uint64( &p, session_id );
    next_write_bytes( &p, ping_token, NEXT_ENCRYPTED_PING_TOKEN_BYTES );
    uint8_t * b = p; p += 2;
    int packet_length = p - packet_data;
    next_generate_chonkle( a, magic, from_address, from_address_bytes, from_port, to_address, to_address_bytes, to_port, packet_length );
    next_generate_pittle( b, from_address, from_address_bytes, from_port, to_address, to_address_bytes, to_port, packet_length );
    return packet_length;
}

int next_write_relay_pong_packet( uint8_t * packet_data, uint64_t ping_sequence, uint64_t session_id, const uint8_t * magic, const uint8_t * from_address, int from_address_bytes, uint16_t from_port, const uint8_t * to_address, int to_address_bytes, uint16_t to_port )
{
    uint8_t * p = packet_data;
    next_write_uint8( &p, NEXT_RELAY_PONG_PACKET );
    uint8_t * a = p; p += 15;
    next_write_uint64( &p, ping_sequence );
    next_write_uint64( &p, session_id );
    uint8_t * b = p; p += 2;
    int packet_length = p - packet_data;
    next_generate_chonkle( a, magic, from_address, from_address_bytes, from_port, to_address, to_address_bytes, to_port, packet_length );
    next_generate_pittle( b, from_address, from_address_bytes, from_port, to_address, to_address_bytes, to_port, packet_length );
    return packet_length;
}

void test_relay_ping_packet()
{
    uint8_t packet_data[NEXT_MAX_PACKET_BYTES];
    uint64_t iterations = 100;
    for ( uint64_t i = 0; i < iterations; ++i )
    {
        uint8_t magic[8];
        uint8_t from_address[4];
        uint8_t to_address[4];
        next_random_bytes( magic, 8 );
        next_random_bytes( from_address, 4 );
        next_random_bytes( to_address, 4 );
        uint16_t from_port = uint16_t( i + 1000000 );
        uint16_t to_port = uint16_t( i + 5000 );

        uint8_t ping_token[NEXT_ENCRYPTED_PING_TOKEN_BYTES];
        next_random_bytes( ping_token, NEXT_ENCRYPTED_PING_TOKEN_BYTES );

        uint64_t ping_sequence = i;
        uint64_t ping_session_id = 0x12345;

        int packet_bytes = next_write_relay_ping_packet( packet_data, ping_token, ping_sequence, ping_session_id, magic, from_address, 4, from_port, to_address, 4, to_port );

        next_check( packet_bytes >= 0 );
        next_check( packet_bytes <= NEXT_MTU + 27 );

        next_check( next_basic_packet_filter( packet_data, packet_bytes ) );
        next_check( next_advanced_packet_filter( packet_data, magic, from_address, 4, from_port, to_address, 4, to_port, packet_bytes ) );

        next_check( packet_data[0] == NEXT_RELAY_PING_PACKET );

        const uint8_t * p = packet_data + 16;
        uint64_t read_ping_sequence = next_read_uint64( &p );
        uint64_t read_ping_session_id = next_read_uint64( &p );

        next_check( read_ping_sequence == ping_sequence );
        next_check( read_ping_session_id == ping_session_id );

        next_check( memcmp( packet_data + 1 + 15 + 8 + 8, ping_token, NEXT_ENCRYPTED_PING_TOKEN_BYTES ) == 0 );
    }
}

void test_relay_pong_packet()
{
    uint8_t packet_data[NEXT_MAX_PACKET_BYTES];
    uint64_t iterations = 100;
    for ( uint64_t i = 0; i < iterations; ++i )
    {
        uint8_t magic[8];
        uint8_t from_address[4];
        uint8_t to_address[4];
        next_random_bytes( magic, 8 );
        next_random_bytes( from_address, 4 );
        next_random_bytes( to_address, 4 );
        uint16_t from_port = uint16_t( i + 1000000 );
        uint16_t to_port = uint16_t( i + 5000 );

        uint64_t pong_sequence = i;
        uint64_t pong_session_id = 0x123456;

        int packet_bytes = next_write_relay_pong_packet( packet_data, pong_sequence, pong_session_id, magic, from_address, 4, from_port, to_address, 4, to_port );

        next_check( packet_bytes >= 0 );
        next_check( packet_bytes <= NEXT_MTU + 27 );

        next_check( next_basic_packet_filter( packet_data, packet_bytes ) );
        next_check( next_advanced_packet_filter( packet_data, magic, from_address, 4, from_port, to_address, 4, to_port, packet_bytes ) );

        next_check( packet_data[0] == NEXT_RELAY_PONG_PACKET );

        const uint8_t * p = packet_data + 16;
        uint64_t read_pong_sequence = next_read_uint64( &p );
        uint64_t read_pong_session_id = next_read_uint64( &p );

        next_check( read_pong_sequence == pong_sequence );
        next_check( read_pong_session_id == pong_session_id );
    }
}








Essentials:

    --------------

    Send portal messages to redis streams

	--------------

	Portal cruncher new

	--------------

	Send rest of server backend messages to google pubsub

	--------------

	Extend analytics service to insert messages into bigquery.

	--------------

	Leader election needs to wait at least 11 seconds to make sure it gets the correct result when > 2 vms start at the same time without flap

	--------------

	Leader election func testing for relay backends + ready delay

	--------------

	Implement func test for server backend to make sure when it is in connection drain state, it indicates to the LB health test that traffic should not be sent to it.

	--------------

	Extend the relay to support a secondary relay backend.

	This will enable relays to be shared between dev and dev5, and prod and prod5.

	--------------









Nice to have:

	-----------

	Rename to "game events" all the way down to the sdk5

	-----------

	Add match id to both portal data and session update data by default (first slice only, and summary...)

	Then work out a new API to link the session with a match (start of session, with tags...), separate from setting match data (end of match).

	-----------

	Add unit test to make sure we write out session update message

	Add unit test to make sure we write out portal message

	Add unit test to make sure we write out near relay message 

	--------------

	Simplified debug string for first slice: "first slice always goes direct" without a bunch of other junk.

	Printing out names of near relays would be nice etc.

	--------------

	Code in service.go to only shut down service once various subsystems have reported that they're complete

	Extend this to the server backend to make sure that we flush all channels of messages before shutting down

	--------------

	Change SDK to pass up the real packet loss, real jitter, real out of order etc.

	We don't need to store multiple uint64 in session data to calculate this

	It's wasteful to pass this data back to the client with each session update response.

	--------------

	Create a new message for near relay stats.

	Unit test it, then on slice #1 when near relay data comes in, write a near relay ping stats message and send it.

	--------------

	Implement the near relay ping token.

	We need to do this now, so we don't have problems with it in the future.

	It can be as simple as an expire time for pings

	The relay can also have a count of the maximum number of pings to reply to, eg. 10 * 10 = 100.

	--------------

	Implement a fix for a re-ordering of route tokens / continue tokens to create loops. Order of tokens must be enforced.

	This probably means we need to have some sort of signed bit, that indicates that indeed, this is token n, n+1 etc.

	And then this can be checked.

	Needs to be designed...

	--------------

	Extend the SDK5 so we have the option of sending down new near relay stats on multiple slices, later on.

	Use a near relay ping sequence # (uint8) so we can tell when we have new near relay pings that we should upload to the backend.

	Add a func test to make sure we capture this functionality. We want the option to redo near relay pings on later slice, in the future without changing the SDK.

	--------------

	Multipath across two network next routes.

	--------------

	It would be good to track when sessions shut down, vs. having them always time out

	This would require new messages up then back down the chain of relays for ack

	It would also reduce the risk of missing packets or having sessions time out and not noticing.

	We can now track sessions timing out before being closed, and this would indicate problems (or at least, hard disconnects...)

	Again, adding this later would be challenging. Best to do it now.

	--------------

	Rework the reference relay and make it the official relay.

	The trick is to use the code from the proxy to go wide across n threads with SO_REUSEPORT

	Since each port/address maps to a specific socket, there is no need for locks across the session map, there will be a session map per-thread.

	Stats can be managed with atomics, eg. count of sessions per-thread in a uint64 atomic, summed by the main thread before uploading the total to the relay backend.

	--------------

	A relay which has its firewall misconfigured will cause players to fallback to direct, because traffic can't be sent to it.

	Would be nice if the relay backend would talk to the relay over its UDP port and say hi, and if this heartbeat was a prerequisite for the relay coming online.

	This way misconfigured relays can't cause problems.

	--------------

	The SDK must never transmit the user hash in plaintext. It must always be encrypted.

	--------------

	Consider renaming "Server Events" to "Game Events" in SDK5

	--------------

	Put "MatchId" into session data (first).

	This way we can easily look up from a session the match it is in.

	--------------
