DONE

	Add test for server update packet.

	Add test for server response packet.

	Why does the ref backend 5 get a bad server address at the end of the server update packet?

	Is the packet getting truncated somehow?

	No, it was non-pointer receiver for the interface. Needed for write packets. Doesn't work for read.

TODO

	--------------

	Hook up code to process the server update response in the server internal.

	--------------

	When the server response comes back, the server should compare the upcoming magic in the packet with its value.

	If the value is different, then copy across all magic values from the packet into the magic values for the server and print them.

	--------------

	Change all logs of magic to use %02x in next.cpp

	--------------

	Verify the server gets upcoming, current and previous magic values by printing them when upcoming changes.

	--------------

	Extend server to resend the server update 5 times, once per-second, until it gets an response with matching request id.

	This can be modelled on how it is done for the server init request packet...

	If the server doesn't get response, it should fall back to direct mode and stop communicating with the server backend.

	--------------



























	--------------

	Client also needs to be able to read packets sent with current, upcoming and previous magic (in that order).

	Do we still need complicated acks between the client and server for which magic to send with? I don't think so...

	--------------








	--------------

	The server is in a mode where it will send server init request forever until it gets a response.

	Server init should timeout if no response is received within 30 seconds...

	--------------

	Now the server can init, verify that server updates get through to the reference backend 5.

	--------------

	Extend the server update to have a server update response which includes the current magic.

	--------------

	Verify that the server gets updated magic every minute, as they charge 

	--------------

















	--------------

	Fix up the "GetAddressData" function to work properly with IPv4 and IPv6

	--------------

	Bring across "GetAddressData" function into core.go and port across tests from C++

	--------------


















	--------------

	Now verify that the server can upgrade a client and exchange direct packets.

	--------------

	From this point get as many func tests working with direct packets as possible.

	--------------




















	==================================
	Get the client/server upgrade working and the upgraded direct packets being exchanged between client and server.

	--------------

	Update the func backend 5 so it can handle new SDK5 packet types.

	--------------

	Get various upgraded direct func tests passing.

	--------------






























	========================================================

	--------------

	Work out how to get ping tokens down to the client

	--------------

	Get the client pinging near relays w. ping tokens and getting responses.

	--------------

	Update the reference relay so it can handle the new SDK5 packet types.

	--------------

	Get an actual end-to-end network next route going with SDK5 client/server.

	--------------

	Get the rest of the func tests passing.

	--------------

	=================================================

	--------------

	Move server whois to the backend, it's unreliable when run on the SDK server
	and the iteration time for fixes (new SDK deploy) is just too long.

	--------------

	We need a server flush method to timeout all sessions and flush session updates until acked.

	--------------









	--------------

	Routing private key should be properly secured and not included in source code.

	--------------
