DONE

	Use queries to look for bad things

	Fallback to direct is happening a lot (thousands of times a day)

	Fallback to direct error is not showing up in error code.

	SessionError_Aborted = (1 << 5) seems to be happening semi-frequently (hundreds of times a day)

	Bad slice number (512) is happening extremely rarely. a few a day...

	A lot of route_no_longer_exists are happening, 1000s a day.

	Latency worse is happening less than 100 times a day.

	Mispredict is happening thousands of times a day.

	Best thing I can do is try disabling the mispredict.

	I can also disable the latency worse.

	Did this by setting core.Relax = true, easier than doing it in route shader.

	This way we can turn off relax whenever and return to old behavior.

	Verify we no longer see next latency too high

	Verify we no longer see mispredicts

	Verify we no longer see latency worse

	Look into the abort. Why does it happen? Is it related to fallback to direct?

		// currently taking network next

		if !state.Request.Next {

			// the sdk aborted this session

			core.Debug("aborted")
			state.Output.RouteState.Next = false
			state.Output.RouteState.Veto = true
			state.Error |= constants.SessionError_Aborted
			if state.Debug != nil {
				*state.Debug += "aborted\n"
			}
			return
		}

	It's basically the backend going, OK hold on, the previous slice was next, but now we're direct.

	It's effectively a fallback to direct that forgets to set the fallback to direct flag.

	To diagnose what is going on, we need to find where (on the server or client) it might
	transition from being next to being on direct, without setting the fallback to direct flag.

	Build up one graph "bad stuff" where all the bad stuff we don't want to see is graphed in the last 24 hours by hour.

	This will make it easy to apply fixes and verify they work quickly.

	The fallback to direct error is not being set in the summary, even though it is set on the bool.

	Drill in and find brasil sessions above 100ms that aren't being fixed.

	Why not? What's happening?

	Implement a session debugger tool, where I can pass in the session id and see details about it that I care about, then investigate some sessions.

	Implement a user sessions tool, so I can look at session data for a player from user hash.

	Implement likely_vpn_or_cross_region flag in session update

	Verify that likely VPN or cross region % makes sense. So far it doesn't seem to (?)

	Implement a cool "no_client_relays" bool in the session data and stick it in summary.

	The other class of not improved are the ones with the latency spike at the end

		-8607038412054842491

	Updated the query to exclude these

	I'd like to add "no_server_relays" as a flag, just in case, since it's a reason why we would not accelerate, and it's per-server (from pings...)

	So it could be contributing to cases of not accelerating.

TODO

	Add some analytics to track frequency of no server relays

	------------

	Add "lag_spike" flag in summary. Any slice with direct rtt above 500ms.

	------------

	Add some analytics to track frequency af all_client_relay_pings_are_zero in session_summary.

	------------

	It seems that duration_on_next is sometimes zero, even though a session has spent time on network next.

	What's going on here?!

	Example session:

		-8003309578772432229

	Add some analytics to track this case, and see how frequently it occurs. I think it's a pretty rare bug, but I'd like to be able to rely 100% on duration_on_next in queries

	------------

	All client relays are 0,0,0 so we cannot accelerate. What's going on here?!

		-5618685767813459892
		-1466112885510063509
		-6531585617792199589
		8626309331168103250
		1256175871434182346
		-3589464958499009427
		7486276099044843494
		-9069884948771580693
		7063449195796243893

	This is common enough that we really need to investigate what's going on here!

	------------------------------------

	Not accelerated, but can't really see why not:

		8117643850499796991
		1453666514356258270

	------------------------------------

	All client relays at 255, clamped or excluded?

		-4122038815216347266
		-397611957962678889

	-----------

	Iterate on "Brasil Sessions Above 100ms Not Fixed" until I identify each class of session not getting fixed, and accelerate them.

	-----------

	There's a lot of stuff that sets "state.Error" kinda assuming its persistent, but it's not.

	I'd feel more comfortable migrating this over to bools instead of flags.

    -----------

	To save money I should seriously consider downsizing some google cloud and AWS relays.

	At the session counts they have, many do not need more than 2 cores.

	This could save a lot of money!

	-----------

	To work out which relays should be adjusted, look at peak session count on a per-relay basis during October.

	Some will only even have a few hundred. These are the ones that can be adjusted down.

	-----

	Sometimes the very last slice has high latency (lag spike)

	Example sessions:

		-2198154435340565541
		4455691751385035519
		-7129124477292008386
		-4567202628162033718
		-5634882001556190819
		-3941993414834069369
		6536157024088213710
		-6633077465191186675
		3641719633669816223
		-7047731294649380860
		3039743475755461855
		3073525261838943415
		8675631615792893545

	These sessions also tend to have fallback_to_direct as true on the last slice

	Did the session have a huge packet loss event, or did the person turn off their console?

	If they turned off their console, then fallback_to_direct wouldn't get set to true, because it's set to true on the client.

	So I think these are just big packet loss events causing fallback to direct.

	-----

	This session is just broken:

		-7086141734212354562

	-----

	Things not fixed yet:

		1. Fallback to direct

		2. Abort

		3. Lost route

	-----

	Wait for the patch to go out. We should see a reduction in fallback to direct (longer timeouts).

	Plus, we will see the reasons for fallback to direct. Identify what is happening and think about how it could happen.

	Can we reduce it?

	-----

	Try to identify why abort is triggering.

	-----

	Why is lost route happening?

	It could be that the server relay is flaky

	It could be that the client has only one working client relay, and it goes away or becomes not routable?

	But shouldn't the system find other routes? There's usually a lot of route redundancy.

	Drill in on sessions that lost route and see what's happening.

	-----

	Fallback to direct is counter productive because it remove visibility past the point of fallback.

	Instead, we can rely on veto and abort to say, OK, we shouldn't accelerate this person anymore

	But it's good for them to keep talking to the backend as long as the session exists, so we retain visibility!

	-----




















	-----

	Would be nice if I could get the session counts over to the left a bit so I don't need to include scrollbar in screenshots...

	-----

	Add a functional test to verify that we see the correct lat/longs passed up from the SDK

	-----

	Add a functional test to verify that we see server delta time min/max/avg passed up from SDK

	-----

	Add a functional test to verify we get game rtt, jitter and pl

	-----

	Add a functional test to verify we see flags

	-----

	Add functional test to verify we see match id from sessions

	-----

	Add functional test to verify we get the likely_vpn_or_cross_region

	-----

	If we end up doing source relay filtering for jitter, add some unit tests and func tests around this.

	-----

	Update documentation

	-----

	Fix some easy issues

	-----

	Make release

	-----
