// Code generated by protoc-gen-go. DO NOT EDIT.
// source: config.proto

package storage

import ("io"
    "os"
    "log"
    "sync"
    "strings"
    "time"
    "encoding/binary"
    "google.golang.org/grpc/status"
    "google.golang.org/grpc/codes"
    "hash/fnv"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ValueType int32

const (
	ValueType_unknown   ValueType = 0
	ValueType_double    ValueType = 1
	ValueType_int64     ValueType = 2
	ValueType_string    ValueType = 3
	ValueType_timestamp ValueType = 4
	ValueType_boolean   ValueType = 5
	ValueType_bytes     ValueType = 6
	ValueType_key       ValueType = 7
	ValueType_uint64    ValueType = 8
)

var ValueType_name = map[int32]string{
	0: "unknown",
	1: "double",
	2: "int64",
	3: "string",
	4: "timestamp",
	5: "boolean",
	6: "bytes",
	7: "key",
	8: "uint64",
}

var ValueType_value = map[string]int32{
	"unknown":   0,
	"double":    1,
	"int64":     2,
	"string":    3,
	"timestamp": 4,
	"boolean":   5,
	"bytes":     6,
	"key":       7,
	"uint64":    8,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}

func (ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}

type SchemaFieldEditorInfoType int32

const (
	SchemaFieldEditorInfoType_default  SchemaFieldEditorInfoType = 0
	SchemaFieldEditorInfoType_password SchemaFieldEditorInfoType = 1
	SchemaFieldEditorInfoType_lookup   SchemaFieldEditorInfoType = 2
)

var SchemaFieldEditorInfoType_name = map[int32]string{
	0: "default",
	1: "password",
	2: "lookup",
}

var SchemaFieldEditorInfoType_value = map[string]int32{
	"default":  0,
	"password": 1,
	"lookup":   2,
}

func (x SchemaFieldEditorInfoType) String() string {
	return proto.EnumName(SchemaFieldEditorInfoType_name, int32(x))
}

func (SchemaFieldEditorInfoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
}

type SchemaIndexType int32

const (
	SchemaIndexType_unspecified SchemaIndexType = 0
	SchemaIndexType_memory      SchemaIndexType = 1
)

var SchemaIndexType_name = map[int32]string{
	0: "unspecified",
	1: "memory",
}

var SchemaIndexType_value = map[string]int32{
	"unspecified": 0,
	"memory":      1,
}

func (x SchemaIndexType) String() string {
	return proto.EnumName(SchemaIndexType_name, int32(x))
}

func (SchemaIndexType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
}

type WatchEventType int32

const (
	WatchEventType_Created WatchEventType = 0
	WatchEventType_Updated WatchEventType = 1
	WatchEventType_Deleted WatchEventType = 2
)

var WatchEventType_name = map[int32]string{
	0: "Created",
	1: "Updated",
	2: "Deleted",
}

var WatchEventType_value = map[string]int32{
	"Created": 0,
	"Updated": 1,
	"Deleted": 2,
}

func (x WatchEventType) String() string {
	return proto.EnumName(WatchEventType_name, int32(x))
}

func (WatchEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{3}
}

type ConfigstoreTraceEntry_ConfigstoreTraceEntryType int32

const (
	ConfigstoreTraceEntry_INITIAL_STATE_SEND_BEGIN                           ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 0
	ConfigstoreTraceEntry_INITIAL_STATE_SEND_ENTITY                          ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 1
	ConfigstoreTraceEntry_INITIAL_STATE_SEND_END                             ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 2
	ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_BEGIN                        ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 3
	ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_ENTITY                       ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 4
	ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_END                          ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 5
	ConfigstoreTraceEntry_TRANSACTION_BATCH_SEND_BEGIN                       ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 6
	ConfigstoreTraceEntry_TRANSACTION_BATCH_SEND_MUTATED_ENTITY              ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 7
	ConfigstoreTraceEntry_TRANSACTION_BATCH_SEND_DELETED_ENTITY_KEY          ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 8
	ConfigstoreTraceEntry_TRANSACTION_BATCH_SEND_END                         ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 9
	ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_BEGIN                    ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 10
	ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_MUTATED_ENTITY           ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 11
	ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_DELETED_ENTITY_KEY       ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 12
	ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_END                      ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 13
	ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY                             ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 14
	ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY                            ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 15
	ConfigstoreTraceEntry_TRANSACTION_ARRIVED                                ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 16
	ConfigstoreTraceEntry_TRANSACTION_FINISHED_PROCESSING                    ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 17
	ConfigstoreTraceEntry_TRANSACTION_STALLED                                ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 18
	ConfigstoreTraceEntry_CONFIGSTORE_CONSISTENT                             ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 19
	ConfigstoreTraceEntry_TRANSACTION_MUTATED_ENTITY_KEY                     ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 20
	ConfigstoreTraceEntry_TRANSACTION_DELETED_ENTITY_KEY                     ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 21
	ConfigstoreTraceEntry_TRANSACTION_RECONSTRUCT_APPEND_MUTATED_ENTITY      ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 22
	ConfigstoreTraceEntry_CLIENT_CURRENTLY_DISCONNECTED_ATTEMPTING_RECONNECT ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 23
	ConfigstoreTraceEntry_CLIENT_GOT_EOF_ATTEMPTING_RECONNECTING             ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 24
	ConfigstoreTraceEntry_CLIENT_GOT_NIL_BUG_IGNORING                        ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 25
	ConfigstoreTraceEntry_CLIENT_FAILED_RECONNECT                            ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 26
	ConfigstoreTraceEntry_CLIENT_CONNECTION_REESTABLISHED                    ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 27
	ConfigstoreTraceEntry_CLIENT_GOT_UNEXPECTED_CODE_ATTEMPTING_RECONNECT    ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 28
	ConfigstoreTraceEntry_SERVER_STARTUP_GRPC_PORT                           ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 29
	ConfigstoreTraceEntry_SERVER_STARTUP_HTTP_PORT                           ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 30
	ConfigstoreTraceEntry_SERVER_GRACEFUL_SHUTDOWN                           ConfigstoreTraceEntry_ConfigstoreTraceEntryType = 31
)

var ConfigstoreTraceEntry_ConfigstoreTraceEntryType_name = map[int32]string{
	0:  "INITIAL_STATE_SEND_BEGIN",
	1:  "INITIAL_STATE_SEND_ENTITY",
	2:  "INITIAL_STATE_SEND_END",
	3:  "INITIAL_STATE_RECEIVE_BEGIN",
	4:  "INITIAL_STATE_RECEIVE_ENTITY",
	5:  "INITIAL_STATE_RECEIVE_END",
	6:  "TRANSACTION_BATCH_SEND_BEGIN",
	7:  "TRANSACTION_BATCH_SEND_MUTATED_ENTITY",
	8:  "TRANSACTION_BATCH_SEND_DELETED_ENTITY_KEY",
	9:  "TRANSACTION_BATCH_SEND_END",
	10: "TRANSACTION_BATCH_RECEIVE_BEGIN",
	11: "TRANSACTION_BATCH_RECEIVE_MUTATED_ENTITY",
	12: "TRANSACTION_BATCH_RECEIVE_DELETED_ENTITY_KEY",
	13: "TRANSACTION_BATCH_RECEIVE_END",
	14: "IN_MEMORY_STORE_ENTITY",
	15: "IN_MEMORY_DELETE_ENTITY",
	16: "TRANSACTION_ARRIVED",
	17: "TRANSACTION_FINISHED_PROCESSING",
	18: "TRANSACTION_STALLED",
	19: "CONFIGSTORE_CONSISTENT",
	20: "TRANSACTION_MUTATED_ENTITY_KEY",
	21: "TRANSACTION_DELETED_ENTITY_KEY",
	22: "TRANSACTION_RECONSTRUCT_APPEND_MUTATED_ENTITY",
	23: "CLIENT_CURRENTLY_DISCONNECTED_ATTEMPTING_RECONNECT",
	24: "CLIENT_GOT_EOF_ATTEMPTING_RECONNECTING",
	25: "CLIENT_GOT_NIL_BUG_IGNORING",
	26: "CLIENT_FAILED_RECONNECT",
	27: "CLIENT_CONNECTION_REESTABLISHED",
	28: "CLIENT_GOT_UNEXPECTED_CODE_ATTEMPTING_RECONNECT",
	29: "SERVER_STARTUP_GRPC_PORT",
	30: "SERVER_STARTUP_HTTP_PORT",
	31: "SERVER_GRACEFUL_SHUTDOWN",
}

var ConfigstoreTraceEntry_ConfigstoreTraceEntryType_value = map[string]int32{
	"INITIAL_STATE_SEND_BEGIN":                           0,
	"INITIAL_STATE_SEND_ENTITY":                          1,
	"INITIAL_STATE_SEND_END":                             2,
	"INITIAL_STATE_RECEIVE_BEGIN":                        3,
	"INITIAL_STATE_RECEIVE_ENTITY":                       4,
	"INITIAL_STATE_RECEIVE_END":                          5,
	"TRANSACTION_BATCH_SEND_BEGIN":                       6,
	"TRANSACTION_BATCH_SEND_MUTATED_ENTITY":              7,
	"TRANSACTION_BATCH_SEND_DELETED_ENTITY_KEY":          8,
	"TRANSACTION_BATCH_SEND_END":                         9,
	"TRANSACTION_BATCH_RECEIVE_BEGIN":                    10,
	"TRANSACTION_BATCH_RECEIVE_MUTATED_ENTITY":           11,
	"TRANSACTION_BATCH_RECEIVE_DELETED_ENTITY_KEY":       12,
	"TRANSACTION_BATCH_RECEIVE_END":                      13,
	"IN_MEMORY_STORE_ENTITY":                             14,
	"IN_MEMORY_DELETE_ENTITY":                            15,
	"TRANSACTION_ARRIVED":                                16,
	"TRANSACTION_FINISHED_PROCESSING":                    17,
	"TRANSACTION_STALLED":                                18,
	"CONFIGSTORE_CONSISTENT":                             19,
	"TRANSACTION_MUTATED_ENTITY_KEY":                     20,
	"TRANSACTION_DELETED_ENTITY_KEY":                     21,
	"TRANSACTION_RECONSTRUCT_APPEND_MUTATED_ENTITY":      22,
	"CLIENT_CURRENTLY_DISCONNECTED_ATTEMPTING_RECONNECT": 23,
	"CLIENT_GOT_EOF_ATTEMPTING_RECONNECTING":             24,
	"CLIENT_GOT_NIL_BUG_IGNORING":                        25,
	"CLIENT_FAILED_RECONNECT":                            26,
	"CLIENT_CONNECTION_REESTABLISHED":                    27,
	"CLIENT_GOT_UNEXPECTED_CODE_ATTEMPTING_RECONNECT":    28,
	"SERVER_STARTUP_GRPC_PORT":                           29,
	"SERVER_STARTUP_HTTP_PORT":                           30,
	"SERVER_GRACEFUL_SHUTDOWN":                           31,
}

func (x ConfigstoreTraceEntry_ConfigstoreTraceEntryType) String() string {
	return proto.EnumName(ConfigstoreTraceEntry_ConfigstoreTraceEntryType_name, int32(x))
}

func (ConfigstoreTraceEntry_ConfigstoreTraceEntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{48, 0}
}

type PartitionId struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionId) Reset()         { *m = PartitionId{} }
func (m *PartitionId) String() string { return proto.CompactTextString(m) }
func (*PartitionId) ProtoMessage()    {}
func (*PartitionId) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{0}
}

func (m *PartitionId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionId.Unmarshal(m, b)
}
func (m *PartitionId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionId.Marshal(b, m, deterministic)
}
func (m *PartitionId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionId.Merge(m, src)
}
func (m *PartitionId) XXX_Size() int {
	return xxx_messageInfo_PartitionId.Size(m)
}
func (m *PartitionId) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionId.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionId proto.InternalMessageInfo

func (m *PartitionId) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type PathElement struct {
	Kind string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	// Types that are valid to be assigned to IdType:
	//	*PathElement_Id
	//	*PathElement_Name
	IdType               isPathElement_IdType `protobuf_oneof:"idType"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PathElement) Reset()         { *m = PathElement{} }
func (m *PathElement) String() string { return proto.CompactTextString(m) }
func (*PathElement) ProtoMessage()    {}
func (*PathElement) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{1}
}

func (m *PathElement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathElement.Unmarshal(m, b)
}
func (m *PathElement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathElement.Marshal(b, m, deterministic)
}
func (m *PathElement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathElement.Merge(m, src)
}
func (m *PathElement) XXX_Size() int {
	return xxx_messageInfo_PathElement.Size(m)
}
func (m *PathElement) XXX_DiscardUnknown() {
	xxx_messageInfo_PathElement.DiscardUnknown(m)
}

var xxx_messageInfo_PathElement proto.InternalMessageInfo

func (m *PathElement) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

type isPathElement_IdType interface {
	isPathElement_IdType()
}

type PathElement_Id struct {
	Id int64 `protobuf:"varint,2,opt,name=id,proto3,oneof"`
}

type PathElement_Name struct {
	Name string `protobuf:"bytes,3,opt,name=name,proto3,oneof"`
}

func (*PathElement_Id) isPathElement_IdType() {}

func (*PathElement_Name) isPathElement_IdType() {}

func (m *PathElement) GetIdType() isPathElement_IdType {
	if m != nil {
		return m.IdType
	}
	return nil
}

func (m *PathElement) GetId() int64 {
	if x, ok := m.GetIdType().(*PathElement_Id); ok {
		return x.Id
	}
	return 0
}

func (m *PathElement) GetName() string {
	if x, ok := m.GetIdType().(*PathElement_Name); ok {
		return x.Name
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PathElement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PathElement_Id)(nil),
		(*PathElement_Name)(nil),
	}
}

type Key struct {
	PartitionId          *PartitionId   `protobuf:"bytes,1,opt,name=partitionId,proto3" json:"partitionId,omitempty"`
	Path                 []*PathElement `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{2}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetPartitionId() *PartitionId {
	if m != nil {
		return m.PartitionId
	}
	return nil
}

func (m *Key) GetPath() []*PathElement {
	if m != nil {
		return m.Path
	}
	return nil
}

type Value struct {
	Id                   int32                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 ValueType            `protobuf:"varint,2,opt,name=type,proto3,enum=config.ValueType" json:"type,omitempty"`
	DoubleValue          float64              `protobuf:"fixed64,3,opt,name=doubleValue,proto3" json:"doubleValue,omitempty"`
	Int64Value           int64                `protobuf:"varint,4,opt,name=int64Value,proto3" json:"int64Value,omitempty"`
	StringValue          string               `protobuf:"bytes,5,opt,name=stringValue,proto3" json:"stringValue,omitempty"`
	TimestampValue       *timestamp.Timestamp `protobuf:"bytes,6,opt,name=timestampValue,proto3" json:"timestampValue,omitempty"`
	BooleanValue         bool                 `protobuf:"varint,7,opt,name=booleanValue,proto3" json:"booleanValue,omitempty"`
	BytesValue           []byte               `protobuf:"bytes,8,opt,name=bytesValue,proto3" json:"bytesValue,omitempty"`
	KeyValue             *Key                 `protobuf:"bytes,9,opt,name=keyValue,proto3" json:"keyValue,omitempty"`
	Uint64Value          uint64               `protobuf:"varint,10,opt,name=uint64Value,proto3" json:"uint64Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{3}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Value) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_unknown
}

func (m *Value) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *Value) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *Value) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *Value) GetTimestampValue() *timestamp.Timestamp {
	if m != nil {
		return m.TimestampValue
	}
	return nil
}

func (m *Value) GetBooleanValue() bool {
	if m != nil {
		return m.BooleanValue
	}
	return false
}

func (m *Value) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *Value) GetKeyValue() *Key {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *Value) GetUint64Value() uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return 0
}

type SchemaField struct {
	Id                   int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 ValueType              `protobuf:"varint,3,opt,name=type,proto3,enum=config.ValueType" json:"type,omitempty"`
	Comment              string                 `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Editor               *SchemaFieldEditorInfo `protobuf:"bytes,5,opt,name=editor,proto3" json:"editor,omitempty"`
	Readonly             bool                   `protobuf:"varint,6,opt,name=readonly,proto3" json:"readonly,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SchemaField) Reset()         { *m = SchemaField{} }
func (m *SchemaField) String() string { return proto.CompactTextString(m) }
func (*SchemaField) ProtoMessage()    {}
func (*SchemaField) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{4}
}

func (m *SchemaField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaField.Unmarshal(m, b)
}
func (m *SchemaField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaField.Marshal(b, m, deterministic)
}
func (m *SchemaField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaField.Merge(m, src)
}
func (m *SchemaField) XXX_Size() int {
	return xxx_messageInfo_SchemaField.Size(m)
}
func (m *SchemaField) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaField.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaField proto.InternalMessageInfo

func (m *SchemaField) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SchemaField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SchemaField) GetType() ValueType {
	if m != nil {
		return m.Type
	}
	return ValueType_unknown
}

func (m *SchemaField) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *SchemaField) GetEditor() *SchemaFieldEditorInfo {
	if m != nil {
		return m.Editor
	}
	return nil
}

func (m *SchemaField) GetReadonly() bool {
	if m != nil {
		return m.Readonly
	}
	return false
}

type SchemaFieldEditorInfo struct {
	DisplayName                           string                        `protobuf:"bytes,1,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Type                                  SchemaFieldEditorInfoType     `protobuf:"varint,2,opt,name=type,proto3,enum=config.SchemaFieldEditorInfoType" json:"type,omitempty"`
	EditorReadonly                        bool                          `protobuf:"varint,3,opt,name=editorReadonly,proto3" json:"editorReadonly,omitempty"`
	AllowedKinds                          []string                      `protobuf:"bytes,4,rep,name=allowedKinds,proto3" json:"allowedKinds,omitempty"`
	UseFinancialValueToNibblinsConversion bool                          `protobuf:"varint,5,opt,name=useFinancialValueToNibblinsConversion,proto3" json:"useFinancialValueToNibblinsConversion,omitempty"`
	Validators                            []*SchemaFieldEditorValidator `protobuf:"bytes,6,rep,name=validators,proto3" json:"validators,omitempty"`
	TextArea                              bool                          `protobuf:"varint,7,opt,name=textArea,proto3" json:"textArea,omitempty"`
	XXX_NoUnkeyedLiteral                  struct{}                      `json:"-"`
	XXX_unrecognized                      []byte                        `json:"-"`
	XXX_sizecache                         int32                         `json:"-"`
}

func (m *SchemaFieldEditorInfo) Reset()         { *m = SchemaFieldEditorInfo{} }
func (m *SchemaFieldEditorInfo) String() string { return proto.CompactTextString(m) }
func (*SchemaFieldEditorInfo) ProtoMessage()    {}
func (*SchemaFieldEditorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{5}
}

func (m *SchemaFieldEditorInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaFieldEditorInfo.Unmarshal(m, b)
}
func (m *SchemaFieldEditorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaFieldEditorInfo.Marshal(b, m, deterministic)
}
func (m *SchemaFieldEditorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaFieldEditorInfo.Merge(m, src)
}
func (m *SchemaFieldEditorInfo) XXX_Size() int {
	return xxx_messageInfo_SchemaFieldEditorInfo.Size(m)
}
func (m *SchemaFieldEditorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaFieldEditorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaFieldEditorInfo proto.InternalMessageInfo

func (m *SchemaFieldEditorInfo) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *SchemaFieldEditorInfo) GetType() SchemaFieldEditorInfoType {
	if m != nil {
		return m.Type
	}
	return SchemaFieldEditorInfoType_default
}

func (m *SchemaFieldEditorInfo) GetEditorReadonly() bool {
	if m != nil {
		return m.EditorReadonly
	}
	return false
}

func (m *SchemaFieldEditorInfo) GetAllowedKinds() []string {
	if m != nil {
		return m.AllowedKinds
	}
	return nil
}

func (m *SchemaFieldEditorInfo) GetUseFinancialValueToNibblinsConversion() bool {
	if m != nil {
		return m.UseFinancialValueToNibblinsConversion
	}
	return false
}

func (m *SchemaFieldEditorInfo) GetValidators() []*SchemaFieldEditorValidator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *SchemaFieldEditorInfo) GetTextArea() bool {
	if m != nil {
		return m.TextArea
	}
	return false
}

type SchemaFieldEditorValidator struct {
	// Types that are valid to be assigned to Validator:
	//	*SchemaFieldEditorValidator_Required
	//	*SchemaFieldEditorValidator_FixedLength
	//	*SchemaFieldEditorValidator_Default
	//	*SchemaFieldEditorValidator_FormatIPAddress
	//	*SchemaFieldEditorValidator_FormatIPAddressPort
	Validator            isSchemaFieldEditorValidator_Validator `protobuf_oneof:"validator"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *SchemaFieldEditorValidator) Reset()         { *m = SchemaFieldEditorValidator{} }
func (m *SchemaFieldEditorValidator) String() string { return proto.CompactTextString(m) }
func (*SchemaFieldEditorValidator) ProtoMessage()    {}
func (*SchemaFieldEditorValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{6}
}

func (m *SchemaFieldEditorValidator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaFieldEditorValidator.Unmarshal(m, b)
}
func (m *SchemaFieldEditorValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaFieldEditorValidator.Marshal(b, m, deterministic)
}
func (m *SchemaFieldEditorValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaFieldEditorValidator.Merge(m, src)
}
func (m *SchemaFieldEditorValidator) XXX_Size() int {
	return xxx_messageInfo_SchemaFieldEditorValidator.Size(m)
}
func (m *SchemaFieldEditorValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaFieldEditorValidator.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaFieldEditorValidator proto.InternalMessageInfo

type isSchemaFieldEditorValidator_Validator interface {
	isSchemaFieldEditorValidator_Validator()
}

type SchemaFieldEditorValidator_Required struct {
	Required *SchemaFieldEditorValidatorRequired `protobuf:"bytes,1,opt,name=required,proto3,oneof"`
}

type SchemaFieldEditorValidator_FixedLength struct {
	FixedLength *SchemaFieldEditorValidatorFixedLength `protobuf:"bytes,2,opt,name=fixedLength,proto3,oneof"`
}

type SchemaFieldEditorValidator_Default struct {
	Default *SchemaFieldEditorValidatorDefault `protobuf:"bytes,3,opt,name=default,proto3,oneof"`
}

type SchemaFieldEditorValidator_FormatIPAddress struct {
	FormatIPAddress *SchemaFieldEditorValidatorFormatIPAddress `protobuf:"bytes,4,opt,name=formatIPAddress,proto3,oneof"`
}

type SchemaFieldEditorValidator_FormatIPAddressPort struct {
	FormatIPAddressPort *SchemaFieldEditorValidatorFormatIPAddressPort `protobuf:"bytes,5,opt,name=formatIPAddressPort,proto3,oneof"`
}

func (*SchemaFieldEditorValidator_Required) isSchemaFieldEditorValidator_Validator() {}

func (*SchemaFieldEditorValidator_FixedLength) isSchemaFieldEditorValidator_Validator() {}

func (*SchemaFieldEditorValidator_Default) isSchemaFieldEditorValidator_Validator() {}

func (*SchemaFieldEditorValidator_FormatIPAddress) isSchemaFieldEditorValidator_Validator() {}

func (*SchemaFieldEditorValidator_FormatIPAddressPort) isSchemaFieldEditorValidator_Validator() {}

func (m *SchemaFieldEditorValidator) GetValidator() isSchemaFieldEditorValidator_Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *SchemaFieldEditorValidator) GetRequired() *SchemaFieldEditorValidatorRequired {
	if x, ok := m.GetValidator().(*SchemaFieldEditorValidator_Required); ok {
		return x.Required
	}
	return nil
}

func (m *SchemaFieldEditorValidator) GetFixedLength() *SchemaFieldEditorValidatorFixedLength {
	if x, ok := m.GetValidator().(*SchemaFieldEditorValidator_FixedLength); ok {
		return x.FixedLength
	}
	return nil
}

func (m *SchemaFieldEditorValidator) GetDefault() *SchemaFieldEditorValidatorDefault {
	if x, ok := m.GetValidator().(*SchemaFieldEditorValidator_Default); ok {
		return x.Default
	}
	return nil
}

func (m *SchemaFieldEditorValidator) GetFormatIPAddress() *SchemaFieldEditorValidatorFormatIPAddress {
	if x, ok := m.GetValidator().(*SchemaFieldEditorValidator_FormatIPAddress); ok {
		return x.FormatIPAddress
	}
	return nil
}

func (m *SchemaFieldEditorValidator) GetFormatIPAddressPort() *SchemaFieldEditorValidatorFormatIPAddressPort {
	if x, ok := m.GetValidator().(*SchemaFieldEditorValidator_FormatIPAddressPort); ok {
		return x.FormatIPAddressPort
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SchemaFieldEditorValidator) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SchemaFieldEditorValidator_Required)(nil),
		(*SchemaFieldEditorValidator_FixedLength)(nil),
		(*SchemaFieldEditorValidator_Default)(nil),
		(*SchemaFieldEditorValidator_FormatIPAddress)(nil),
		(*SchemaFieldEditorValidator_FormatIPAddressPort)(nil),
	}
}

type SchemaFieldEditorValidatorRequired struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaFieldEditorValidatorRequired) Reset()         { *m = SchemaFieldEditorValidatorRequired{} }
func (m *SchemaFieldEditorValidatorRequired) String() string { return proto.CompactTextString(m) }
func (*SchemaFieldEditorValidatorRequired) ProtoMessage()    {}
func (*SchemaFieldEditorValidatorRequired) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{7}
}

func (m *SchemaFieldEditorValidatorRequired) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaFieldEditorValidatorRequired.Unmarshal(m, b)
}
func (m *SchemaFieldEditorValidatorRequired) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaFieldEditorValidatorRequired.Marshal(b, m, deterministic)
}
func (m *SchemaFieldEditorValidatorRequired) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaFieldEditorValidatorRequired.Merge(m, src)
}
func (m *SchemaFieldEditorValidatorRequired) XXX_Size() int {
	return xxx_messageInfo_SchemaFieldEditorValidatorRequired.Size(m)
}
func (m *SchemaFieldEditorValidatorRequired) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaFieldEditorValidatorRequired.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaFieldEditorValidatorRequired proto.InternalMessageInfo

type SchemaFieldEditorValidatorFixedLength struct {
	Length               uint32   `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaFieldEditorValidatorFixedLength) Reset()         { *m = SchemaFieldEditorValidatorFixedLength{} }
func (m *SchemaFieldEditorValidatorFixedLength) String() string { return proto.CompactTextString(m) }
func (*SchemaFieldEditorValidatorFixedLength) ProtoMessage()    {}
func (*SchemaFieldEditorValidatorFixedLength) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{8}
}

func (m *SchemaFieldEditorValidatorFixedLength) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaFieldEditorValidatorFixedLength.Unmarshal(m, b)
}
func (m *SchemaFieldEditorValidatorFixedLength) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaFieldEditorValidatorFixedLength.Marshal(b, m, deterministic)
}
func (m *SchemaFieldEditorValidatorFixedLength) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaFieldEditorValidatorFixedLength.Merge(m, src)
}
func (m *SchemaFieldEditorValidatorFixedLength) XXX_Size() int {
	return xxx_messageInfo_SchemaFieldEditorValidatorFixedLength.Size(m)
}
func (m *SchemaFieldEditorValidatorFixedLength) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaFieldEditorValidatorFixedLength.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaFieldEditorValidatorFixedLength proto.InternalMessageInfo

func (m *SchemaFieldEditorValidatorFixedLength) GetLength() uint32 {
	if m != nil {
		return m.Length
	}
	return 0
}

type SchemaFieldEditorValidatorDefault struct {
	Value                *Value   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaFieldEditorValidatorDefault) Reset()         { *m = SchemaFieldEditorValidatorDefault{} }
func (m *SchemaFieldEditorValidatorDefault) String() string { return proto.CompactTextString(m) }
func (*SchemaFieldEditorValidatorDefault) ProtoMessage()    {}
func (*SchemaFieldEditorValidatorDefault) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{9}
}

func (m *SchemaFieldEditorValidatorDefault) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaFieldEditorValidatorDefault.Unmarshal(m, b)
}
func (m *SchemaFieldEditorValidatorDefault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaFieldEditorValidatorDefault.Marshal(b, m, deterministic)
}
func (m *SchemaFieldEditorValidatorDefault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaFieldEditorValidatorDefault.Merge(m, src)
}
func (m *SchemaFieldEditorValidatorDefault) XXX_Size() int {
	return xxx_messageInfo_SchemaFieldEditorValidatorDefault.Size(m)
}
func (m *SchemaFieldEditorValidatorDefault) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaFieldEditorValidatorDefault.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaFieldEditorValidatorDefault proto.InternalMessageInfo

func (m *SchemaFieldEditorValidatorDefault) GetValue() *Value {
	if m != nil {
		return m.Value
	}
	return nil
}

type SchemaFieldEditorValidatorFormatIPAddress struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaFieldEditorValidatorFormatIPAddress) Reset() {
	*m = SchemaFieldEditorValidatorFormatIPAddress{}
}
func (m *SchemaFieldEditorValidatorFormatIPAddress) String() string { return proto.CompactTextString(m) }
func (*SchemaFieldEditorValidatorFormatIPAddress) ProtoMessage()    {}
func (*SchemaFieldEditorValidatorFormatIPAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{10}
}

func (m *SchemaFieldEditorValidatorFormatIPAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddress.Unmarshal(m, b)
}
func (m *SchemaFieldEditorValidatorFormatIPAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddress.Marshal(b, m, deterministic)
}
func (m *SchemaFieldEditorValidatorFormatIPAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddress.Merge(m, src)
}
func (m *SchemaFieldEditorValidatorFormatIPAddress) XXX_Size() int {
	return xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddress.Size(m)
}
func (m *SchemaFieldEditorValidatorFormatIPAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddress.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddress proto.InternalMessageInfo

type SchemaFieldEditorValidatorFormatIPAddressPort struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaFieldEditorValidatorFormatIPAddressPort) Reset() {
	*m = SchemaFieldEditorValidatorFormatIPAddressPort{}
}
func (m *SchemaFieldEditorValidatorFormatIPAddressPort) String() string {
	return proto.CompactTextString(m)
}
func (*SchemaFieldEditorValidatorFormatIPAddressPort) ProtoMessage() {}
func (*SchemaFieldEditorValidatorFormatIPAddressPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{11}
}

func (m *SchemaFieldEditorValidatorFormatIPAddressPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddressPort.Unmarshal(m, b)
}
func (m *SchemaFieldEditorValidatorFormatIPAddressPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddressPort.Marshal(b, m, deterministic)
}
func (m *SchemaFieldEditorValidatorFormatIPAddressPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddressPort.Merge(m, src)
}
func (m *SchemaFieldEditorValidatorFormatIPAddressPort) XXX_Size() int {
	return xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddressPort.Size(m)
}
func (m *SchemaFieldEditorValidatorFormatIPAddressPort) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddressPort.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaFieldEditorValidatorFormatIPAddressPort proto.InternalMessageInfo

type SchemaKindEditor struct {
	Singular                      string   `protobuf:"bytes,1,opt,name=singular,proto3" json:"singular,omitempty"`
	Plural                        string   `protobuf:"bytes,2,opt,name=plural,proto3" json:"plural,omitempty"`
	RenderEditorDropdownWithField string   `protobuf:"bytes,3,opt,name=renderEditorDropdownWithField,proto3" json:"renderEditorDropdownWithField,omitempty"`
	KeyComment                    string   `protobuf:"bytes,4,opt,name=keyComment,proto3" json:"keyComment,omitempty"`
	SortByField                   string   `protobuf:"bytes,5,opt,name=sortByField,proto3" json:"sortByField,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *SchemaKindEditor) Reset()         { *m = SchemaKindEditor{} }
func (m *SchemaKindEditor) String() string { return proto.CompactTextString(m) }
func (*SchemaKindEditor) ProtoMessage()    {}
func (*SchemaKindEditor) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{12}
}

func (m *SchemaKindEditor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaKindEditor.Unmarshal(m, b)
}
func (m *SchemaKindEditor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaKindEditor.Marshal(b, m, deterministic)
}
func (m *SchemaKindEditor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaKindEditor.Merge(m, src)
}
func (m *SchemaKindEditor) XXX_Size() int {
	return xxx_messageInfo_SchemaKindEditor.Size(m)
}
func (m *SchemaKindEditor) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaKindEditor.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaKindEditor proto.InternalMessageInfo

func (m *SchemaKindEditor) GetSingular() string {
	if m != nil {
		return m.Singular
	}
	return ""
}

func (m *SchemaKindEditor) GetPlural() string {
	if m != nil {
		return m.Plural
	}
	return ""
}

func (m *SchemaKindEditor) GetRenderEditorDropdownWithField() string {
	if m != nil {
		return m.RenderEditorDropdownWithField
	}
	return ""
}

func (m *SchemaKindEditor) GetKeyComment() string {
	if m != nil {
		return m.KeyComment
	}
	return ""
}

func (m *SchemaKindEditor) GetSortByField() string {
	if m != nil {
		return m.SortByField
	}
	return ""
}

type SchemaKind struct {
	Fields               []*SchemaField    `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Editor               *SchemaKindEditor `protobuf:"bytes,3,opt,name=editor,proto3" json:"editor,omitempty"`
	Indexes              []*SchemaIndex    `protobuf:"bytes,4,rep,name=indexes,proto3" json:"indexes,omitempty"`
	Ancestors            []string          `protobuf:"bytes,5,rep,name=ancestors,proto3" json:"ancestors,omitempty"`
	Id                   int32             `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SchemaKind) Reset()         { *m = SchemaKind{} }
func (m *SchemaKind) String() string { return proto.CompactTextString(m) }
func (*SchemaKind) ProtoMessage()    {}
func (*SchemaKind) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{13}
}

func (m *SchemaKind) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaKind.Unmarshal(m, b)
}
func (m *SchemaKind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaKind.Marshal(b, m, deterministic)
}
func (m *SchemaKind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaKind.Merge(m, src)
}
func (m *SchemaKind) XXX_Size() int {
	return xxx_messageInfo_SchemaKind.Size(m)
}
func (m *SchemaKind) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaKind.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaKind proto.InternalMessageInfo

func (m *SchemaKind) GetFields() []*SchemaField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *SchemaKind) GetEditor() *SchemaKindEditor {
	if m != nil {
		return m.Editor
	}
	return nil
}

func (m *SchemaKind) GetIndexes() []*SchemaIndex {
	if m != nil {
		return m.Indexes
	}
	return nil
}

func (m *SchemaKind) GetAncestors() []string {
	if m != nil {
		return m.Ancestors
	}
	return nil
}

func (m *SchemaKind) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SchemaIndex struct {
	Name string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type SchemaIndexType `protobuf:"varint,2,opt,name=type,proto3,enum=config.SchemaIndexType" json:"type,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*SchemaIndex_Computed
	//	*SchemaIndex_Field
	Value                isSchemaIndex_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SchemaIndex) Reset()         { *m = SchemaIndex{} }
func (m *SchemaIndex) String() string { return proto.CompactTextString(m) }
func (*SchemaIndex) ProtoMessage()    {}
func (*SchemaIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{14}
}

func (m *SchemaIndex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaIndex.Unmarshal(m, b)
}
func (m *SchemaIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaIndex.Marshal(b, m, deterministic)
}
func (m *SchemaIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaIndex.Merge(m, src)
}
func (m *SchemaIndex) XXX_Size() int {
	return xxx_messageInfo_SchemaIndex.Size(m)
}
func (m *SchemaIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaIndex.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaIndex proto.InternalMessageInfo

func (m *SchemaIndex) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SchemaIndex) GetType() SchemaIndexType {
	if m != nil {
		return m.Type
	}
	return SchemaIndexType_unspecified
}

type isSchemaIndex_Value interface {
	isSchemaIndex_Value()
}

type SchemaIndex_Computed struct {
	Computed *SchemaComputedIndex `protobuf:"bytes,3,opt,name=computed,proto3,oneof"`
}

type SchemaIndex_Field struct {
	Field string `protobuf:"bytes,4,opt,name=field,proto3,oneof"`
}

func (*SchemaIndex_Computed) isSchemaIndex_Value() {}

func (*SchemaIndex_Field) isSchemaIndex_Value() {}

func (m *SchemaIndex) GetValue() isSchemaIndex_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SchemaIndex) GetComputed() *SchemaComputedIndex {
	if x, ok := m.GetValue().(*SchemaIndex_Computed); ok {
		return x.Computed
	}
	return nil
}

func (m *SchemaIndex) GetField() string {
	if x, ok := m.GetValue().(*SchemaIndex_Field); ok {
		return x.Field
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SchemaIndex) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SchemaIndex_Computed)(nil),
		(*SchemaIndex_Field)(nil),
	}
}

type SchemaComputedIndex struct {
	// Types that are valid to be assigned to Algorithm:
	//	*SchemaComputedIndex_Fnv64A
	//	*SchemaComputedIndex_Fnv64APair
	//	*SchemaComputedIndex_Fnv32A
	//	*SchemaComputedIndex_Fnv32APair
	Algorithm            isSchemaComputedIndex_Algorithm `protobuf_oneof:"algorithm"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SchemaComputedIndex) Reset()         { *m = SchemaComputedIndex{} }
func (m *SchemaComputedIndex) String() string { return proto.CompactTextString(m) }
func (*SchemaComputedIndex) ProtoMessage()    {}
func (*SchemaComputedIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{15}
}

func (m *SchemaComputedIndex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaComputedIndex.Unmarshal(m, b)
}
func (m *SchemaComputedIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaComputedIndex.Marshal(b, m, deterministic)
}
func (m *SchemaComputedIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaComputedIndex.Merge(m, src)
}
func (m *SchemaComputedIndex) XXX_Size() int {
	return xxx_messageInfo_SchemaComputedIndex.Size(m)
}
func (m *SchemaComputedIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaComputedIndex.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaComputedIndex proto.InternalMessageInfo

type isSchemaComputedIndex_Algorithm interface {
	isSchemaComputedIndex_Algorithm()
}

type SchemaComputedIndex_Fnv64A struct {
	Fnv64A *SchemaComputedIndexFnv64A `protobuf:"bytes,1,opt,name=fnv64a,proto3,oneof"`
}

type SchemaComputedIndex_Fnv64APair struct {
	Fnv64APair *SchemaComputedIndexFnv64APair `protobuf:"bytes,2,opt,name=fnv64a_pair,json=fnv64aPair,proto3,oneof"`
}

type SchemaComputedIndex_Fnv32A struct {
	Fnv32A *SchemaComputedIndexFnv32A `protobuf:"bytes,3,opt,name=fnv32a,proto3,oneof"`
}

type SchemaComputedIndex_Fnv32APair struct {
	Fnv32APair *SchemaComputedIndexFnv32APair `protobuf:"bytes,4,opt,name=fnv32a_pair,json=fnv32aPair,proto3,oneof"`
}

func (*SchemaComputedIndex_Fnv64A) isSchemaComputedIndex_Algorithm() {}

func (*SchemaComputedIndex_Fnv64APair) isSchemaComputedIndex_Algorithm() {}

func (*SchemaComputedIndex_Fnv32A) isSchemaComputedIndex_Algorithm() {}

func (*SchemaComputedIndex_Fnv32APair) isSchemaComputedIndex_Algorithm() {}

func (m *SchemaComputedIndex) GetAlgorithm() isSchemaComputedIndex_Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (m *SchemaComputedIndex) GetFnv64A() *SchemaComputedIndexFnv64A {
	if x, ok := m.GetAlgorithm().(*SchemaComputedIndex_Fnv64A); ok {
		return x.Fnv64A
	}
	return nil
}

func (m *SchemaComputedIndex) GetFnv64APair() *SchemaComputedIndexFnv64APair {
	if x, ok := m.GetAlgorithm().(*SchemaComputedIndex_Fnv64APair); ok {
		return x.Fnv64APair
	}
	return nil
}

func (m *SchemaComputedIndex) GetFnv32A() *SchemaComputedIndexFnv32A {
	if x, ok := m.GetAlgorithm().(*SchemaComputedIndex_Fnv32A); ok {
		return x.Fnv32A
	}
	return nil
}

func (m *SchemaComputedIndex) GetFnv32APair() *SchemaComputedIndexFnv32APair {
	if x, ok := m.GetAlgorithm().(*SchemaComputedIndex_Fnv32APair); ok {
		return x.Fnv32APair
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SchemaComputedIndex) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SchemaComputedIndex_Fnv64A)(nil),
		(*SchemaComputedIndex_Fnv64APair)(nil),
		(*SchemaComputedIndex_Fnv32A)(nil),
		(*SchemaComputedIndex_Fnv32APair)(nil),
	}
}

type SchemaComputedIndexFnv64A struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaComputedIndexFnv64A) Reset()         { *m = SchemaComputedIndexFnv64A{} }
func (m *SchemaComputedIndexFnv64A) String() string { return proto.CompactTextString(m) }
func (*SchemaComputedIndexFnv64A) ProtoMessage()    {}
func (*SchemaComputedIndexFnv64A) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{16}
}

func (m *SchemaComputedIndexFnv64A) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaComputedIndexFnv64A.Unmarshal(m, b)
}
func (m *SchemaComputedIndexFnv64A) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaComputedIndexFnv64A.Marshal(b, m, deterministic)
}
func (m *SchemaComputedIndexFnv64A) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaComputedIndexFnv64A.Merge(m, src)
}
func (m *SchemaComputedIndexFnv64A) XXX_Size() int {
	return xxx_messageInfo_SchemaComputedIndexFnv64A.Size(m)
}
func (m *SchemaComputedIndexFnv64A) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaComputedIndexFnv64A.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaComputedIndexFnv64A proto.InternalMessageInfo

func (m *SchemaComputedIndexFnv64A) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type SchemaComputedIndexFnv64APair struct {
	Field1               string   `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2               string   `protobuf:"bytes,2,opt,name=field2,proto3" json:"field2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaComputedIndexFnv64APair) Reset()         { *m = SchemaComputedIndexFnv64APair{} }
func (m *SchemaComputedIndexFnv64APair) String() string { return proto.CompactTextString(m) }
func (*SchemaComputedIndexFnv64APair) ProtoMessage()    {}
func (*SchemaComputedIndexFnv64APair) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{17}
}

func (m *SchemaComputedIndexFnv64APair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaComputedIndexFnv64APair.Unmarshal(m, b)
}
func (m *SchemaComputedIndexFnv64APair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaComputedIndexFnv64APair.Marshal(b, m, deterministic)
}
func (m *SchemaComputedIndexFnv64APair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaComputedIndexFnv64APair.Merge(m, src)
}
func (m *SchemaComputedIndexFnv64APair) XXX_Size() int {
	return xxx_messageInfo_SchemaComputedIndexFnv64APair.Size(m)
}
func (m *SchemaComputedIndexFnv64APair) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaComputedIndexFnv64APair.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaComputedIndexFnv64APair proto.InternalMessageInfo

func (m *SchemaComputedIndexFnv64APair) GetField1() string {
	if m != nil {
		return m.Field1
	}
	return ""
}

func (m *SchemaComputedIndexFnv64APair) GetField2() string {
	if m != nil {
		return m.Field2
	}
	return ""
}

type SchemaComputedIndexFnv32A struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaComputedIndexFnv32A) Reset()         { *m = SchemaComputedIndexFnv32A{} }
func (m *SchemaComputedIndexFnv32A) String() string { return proto.CompactTextString(m) }
func (*SchemaComputedIndexFnv32A) ProtoMessage()    {}
func (*SchemaComputedIndexFnv32A) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{18}
}

func (m *SchemaComputedIndexFnv32A) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaComputedIndexFnv32A.Unmarshal(m, b)
}
func (m *SchemaComputedIndexFnv32A) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaComputedIndexFnv32A.Marshal(b, m, deterministic)
}
func (m *SchemaComputedIndexFnv32A) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaComputedIndexFnv32A.Merge(m, src)
}
func (m *SchemaComputedIndexFnv32A) XXX_Size() int {
	return xxx_messageInfo_SchemaComputedIndexFnv32A.Size(m)
}
func (m *SchemaComputedIndexFnv32A) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaComputedIndexFnv32A.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaComputedIndexFnv32A proto.InternalMessageInfo

func (m *SchemaComputedIndexFnv32A) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type SchemaComputedIndexFnv32APair struct {
	Field1               string   `protobuf:"bytes,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2               string   `protobuf:"bytes,2,opt,name=field2,proto3" json:"field2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SchemaComputedIndexFnv32APair) Reset()         { *m = SchemaComputedIndexFnv32APair{} }
func (m *SchemaComputedIndexFnv32APair) String() string { return proto.CompactTextString(m) }
func (*SchemaComputedIndexFnv32APair) ProtoMessage()    {}
func (*SchemaComputedIndexFnv32APair) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{19}
}

func (m *SchemaComputedIndexFnv32APair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SchemaComputedIndexFnv32APair.Unmarshal(m, b)
}
func (m *SchemaComputedIndexFnv32APair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SchemaComputedIndexFnv32APair.Marshal(b, m, deterministic)
}
func (m *SchemaComputedIndexFnv32APair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchemaComputedIndexFnv32APair.Merge(m, src)
}
func (m *SchemaComputedIndexFnv32APair) XXX_Size() int {
	return xxx_messageInfo_SchemaComputedIndexFnv32APair.Size(m)
}
func (m *SchemaComputedIndexFnv32APair) XXX_DiscardUnknown() {
	xxx_messageInfo_SchemaComputedIndexFnv32APair.DiscardUnknown(m)
}

var xxx_messageInfo_SchemaComputedIndexFnv32APair proto.InternalMessageInfo

func (m *SchemaComputedIndexFnv32APair) GetField1() string {
	if m != nil {
		return m.Field1
	}
	return ""
}

func (m *SchemaComputedIndexFnv32APair) GetField2() string {
	if m != nil {
		return m.Field2
	}
	return ""
}

type Schema struct {
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kinds                map[string]*SchemaKind `protobuf:"bytes,2,rep,name=kinds,proto3" json:"kinds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Schema) Reset()         { *m = Schema{} }
func (m *Schema) String() string { return proto.CompactTextString(m) }
func (*Schema) ProtoMessage()    {}
func (*Schema) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{20}
}

func (m *Schema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Schema.Unmarshal(m, b)
}
func (m *Schema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Schema.Marshal(b, m, deterministic)
}
func (m *Schema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schema.Merge(m, src)
}
func (m *Schema) XXX_Size() int {
	return xxx_messageInfo_Schema.Size(m)
}
func (m *Schema) XXX_DiscardUnknown() {
	xxx_messageInfo_Schema.DiscardUnknown(m)
}

var xxx_messageInfo_Schema proto.InternalMessageInfo

func (m *Schema) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Schema) GetKinds() map[string]*SchemaKind {
	if m != nil {
		return m.Kinds
	}
	return nil
}

type GetSchemaRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSchemaRequest) Reset()         { *m = GetSchemaRequest{} }
func (m *GetSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*GetSchemaRequest) ProtoMessage()    {}
func (*GetSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{21}
}

func (m *GetSchemaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSchemaRequest.Unmarshal(m, b)
}
func (m *GetSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSchemaRequest.Marshal(b, m, deterministic)
}
func (m *GetSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSchemaRequest.Merge(m, src)
}
func (m *GetSchemaRequest) XXX_Size() int {
	return xxx_messageInfo_GetSchemaRequest.Size(m)
}
func (m *GetSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSchemaRequest proto.InternalMessageInfo

type GetSchemaResponse struct {
	Schema               *Schema  `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSchemaResponse) Reset()         { *m = GetSchemaResponse{} }
func (m *GetSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*GetSchemaResponse) ProtoMessage()    {}
func (*GetSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{22}
}

func (m *GetSchemaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSchemaResponse.Unmarshal(m, b)
}
func (m *GetSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSchemaResponse.Marshal(b, m, deterministic)
}
func (m *GetSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSchemaResponse.Merge(m, src)
}
func (m *GetSchemaResponse) XXX_Size() int {
	return xxx_messageInfo_GetSchemaResponse.Size(m)
}
func (m *GetSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSchemaResponse proto.InternalMessageInfo

func (m *GetSchemaResponse) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type MetaListEntitiesRequest struct {
	Start                []byte   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Limit                uint32   `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	KindName             string   `protobuf:"bytes,3,opt,name=kindName,proto3" json:"kindName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaListEntitiesRequest) Reset()         { *m = MetaListEntitiesRequest{} }
func (m *MetaListEntitiesRequest) String() string { return proto.CompactTextString(m) }
func (*MetaListEntitiesRequest) ProtoMessage()    {}
func (*MetaListEntitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{23}
}

func (m *MetaListEntitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaListEntitiesRequest.Unmarshal(m, b)
}
func (m *MetaListEntitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaListEntitiesRequest.Marshal(b, m, deterministic)
}
func (m *MetaListEntitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaListEntitiesRequest.Merge(m, src)
}
func (m *MetaListEntitiesRequest) XXX_Size() int {
	return xxx_messageInfo_MetaListEntitiesRequest.Size(m)
}
func (m *MetaListEntitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaListEntitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetaListEntitiesRequest proto.InternalMessageInfo

func (m *MetaListEntitiesRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *MetaListEntitiesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *MetaListEntitiesRequest) GetKindName() string {
	if m != nil {
		return m.KindName
	}
	return ""
}

type MetaListEntitiesResponse struct {
	Next                 []byte        `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	MoreResults          bool          `protobuf:"varint,2,opt,name=moreResults,proto3" json:"moreResults,omitempty"`
	Entities             []*MetaEntity `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MetaListEntitiesResponse) Reset()         { *m = MetaListEntitiesResponse{} }
func (m *MetaListEntitiesResponse) String() string { return proto.CompactTextString(m) }
func (*MetaListEntitiesResponse) ProtoMessage()    {}
func (*MetaListEntitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{24}
}

func (m *MetaListEntitiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaListEntitiesResponse.Unmarshal(m, b)
}
func (m *MetaListEntitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaListEntitiesResponse.Marshal(b, m, deterministic)
}
func (m *MetaListEntitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaListEntitiesResponse.Merge(m, src)
}
func (m *MetaListEntitiesResponse) XXX_Size() int {
	return xxx_messageInfo_MetaListEntitiesResponse.Size(m)
}
func (m *MetaListEntitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaListEntitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetaListEntitiesResponse proto.InternalMessageInfo

func (m *MetaListEntitiesResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *MetaListEntitiesResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *MetaListEntitiesResponse) GetEntities() []*MetaEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type MetaEntity struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values               []*Value `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaEntity) Reset()         { *m = MetaEntity{} }
func (m *MetaEntity) String() string { return proto.CompactTextString(m) }
func (*MetaEntity) ProtoMessage()    {}
func (*MetaEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{25}
}

func (m *MetaEntity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaEntity.Unmarshal(m, b)
}
func (m *MetaEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaEntity.Marshal(b, m, deterministic)
}
func (m *MetaEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaEntity.Merge(m, src)
}
func (m *MetaEntity) XXX_Size() int {
	return xxx_messageInfo_MetaEntity.Size(m)
}
func (m *MetaEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaEntity.DiscardUnknown(m)
}

var xxx_messageInfo_MetaEntity proto.InternalMessageInfo

func (m *MetaEntity) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MetaEntity) GetValues() []*Value {
	if m != nil {
		return m.Values
	}
	return nil
}

type GetDefaultPartitionIdRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultPartitionIdRequest) Reset()         { *m = GetDefaultPartitionIdRequest{} }
func (m *GetDefaultPartitionIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetDefaultPartitionIdRequest) ProtoMessage()    {}
func (*GetDefaultPartitionIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{26}
}

func (m *GetDefaultPartitionIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDefaultPartitionIdRequest.Unmarshal(m, b)
}
func (m *GetDefaultPartitionIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDefaultPartitionIdRequest.Marshal(b, m, deterministic)
}
func (m *GetDefaultPartitionIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultPartitionIdRequest.Merge(m, src)
}
func (m *GetDefaultPartitionIdRequest) XXX_Size() int {
	return xxx_messageInfo_GetDefaultPartitionIdRequest.Size(m)
}
func (m *GetDefaultPartitionIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultPartitionIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultPartitionIdRequest proto.InternalMessageInfo

type GetDefaultPartitionIdResponse struct {
	Namespace            string   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDefaultPartitionIdResponse) Reset()         { *m = GetDefaultPartitionIdResponse{} }
func (m *GetDefaultPartitionIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetDefaultPartitionIdResponse) ProtoMessage()    {}
func (*GetDefaultPartitionIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{27}
}

func (m *GetDefaultPartitionIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDefaultPartitionIdResponse.Unmarshal(m, b)
}
func (m *GetDefaultPartitionIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDefaultPartitionIdResponse.Marshal(b, m, deterministic)
}
func (m *GetDefaultPartitionIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDefaultPartitionIdResponse.Merge(m, src)
}
func (m *GetDefaultPartitionIdResponse) XXX_Size() int {
	return xxx_messageInfo_GetDefaultPartitionIdResponse.Size(m)
}
func (m *GetDefaultPartitionIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDefaultPartitionIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDefaultPartitionIdResponse proto.InternalMessageInfo

func (m *GetDefaultPartitionIdResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type MetaGetEntityRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KindName             string   `protobuf:"bytes,2,opt,name=kindName,proto3" json:"kindName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaGetEntityRequest) Reset()         { *m = MetaGetEntityRequest{} }
func (m *MetaGetEntityRequest) String() string { return proto.CompactTextString(m) }
func (*MetaGetEntityRequest) ProtoMessage()    {}
func (*MetaGetEntityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{28}
}

func (m *MetaGetEntityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaGetEntityRequest.Unmarshal(m, b)
}
func (m *MetaGetEntityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaGetEntityRequest.Marshal(b, m, deterministic)
}
func (m *MetaGetEntityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaGetEntityRequest.Merge(m, src)
}
func (m *MetaGetEntityRequest) XXX_Size() int {
	return xxx_messageInfo_MetaGetEntityRequest.Size(m)
}
func (m *MetaGetEntityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaGetEntityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetaGetEntityRequest proto.InternalMessageInfo

func (m *MetaGetEntityRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MetaGetEntityRequest) GetKindName() string {
	if m != nil {
		return m.KindName
	}
	return ""
}

type MetaGetEntityResponse struct {
	Entity               *MetaEntity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetaGetEntityResponse) Reset()         { *m = MetaGetEntityResponse{} }
func (m *MetaGetEntityResponse) String() string { return proto.CompactTextString(m) }
func (*MetaGetEntityResponse) ProtoMessage()    {}
func (*MetaGetEntityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{29}
}

func (m *MetaGetEntityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaGetEntityResponse.Unmarshal(m, b)
}
func (m *MetaGetEntityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaGetEntityResponse.Marshal(b, m, deterministic)
}
func (m *MetaGetEntityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaGetEntityResponse.Merge(m, src)
}
func (m *MetaGetEntityResponse) XXX_Size() int {
	return xxx_messageInfo_MetaGetEntityResponse.Size(m)
}
func (m *MetaGetEntityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaGetEntityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetaGetEntityResponse proto.InternalMessageInfo

func (m *MetaGetEntityResponse) GetEntity() *MetaEntity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type MetaUpdateEntityRequest struct {
	Entity               *MetaEntity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetaUpdateEntityRequest) Reset()         { *m = MetaUpdateEntityRequest{} }
func (m *MetaUpdateEntityRequest) String() string { return proto.CompactTextString(m) }
func (*MetaUpdateEntityRequest) ProtoMessage()    {}
func (*MetaUpdateEntityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{30}
}

func (m *MetaUpdateEntityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaUpdateEntityRequest.Unmarshal(m, b)
}
func (m *MetaUpdateEntityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaUpdateEntityRequest.Marshal(b, m, deterministic)
}
func (m *MetaUpdateEntityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaUpdateEntityRequest.Merge(m, src)
}
func (m *MetaUpdateEntityRequest) XXX_Size() int {
	return xxx_messageInfo_MetaUpdateEntityRequest.Size(m)
}
func (m *MetaUpdateEntityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaUpdateEntityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetaUpdateEntityRequest proto.InternalMessageInfo

func (m *MetaUpdateEntityRequest) GetEntity() *MetaEntity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type MetaUpdateEntityResponse struct {
	Entity               *MetaEntity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetaUpdateEntityResponse) Reset()         { *m = MetaUpdateEntityResponse{} }
func (m *MetaUpdateEntityResponse) String() string { return proto.CompactTextString(m) }
func (*MetaUpdateEntityResponse) ProtoMessage()    {}
func (*MetaUpdateEntityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{31}
}

func (m *MetaUpdateEntityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaUpdateEntityResponse.Unmarshal(m, b)
}
func (m *MetaUpdateEntityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaUpdateEntityResponse.Marshal(b, m, deterministic)
}
func (m *MetaUpdateEntityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaUpdateEntityResponse.Merge(m, src)
}
func (m *MetaUpdateEntityResponse) XXX_Size() int {
	return xxx_messageInfo_MetaUpdateEntityResponse.Size(m)
}
func (m *MetaUpdateEntityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaUpdateEntityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetaUpdateEntityResponse proto.InternalMessageInfo

func (m *MetaUpdateEntityResponse) GetEntity() *MetaEntity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type MetaCreateEntityRequest struct {
	Entity               *MetaEntity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	KindName             string      `protobuf:"bytes,2,opt,name=kindName,proto3" json:"kindName,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetaCreateEntityRequest) Reset()         { *m = MetaCreateEntityRequest{} }
func (m *MetaCreateEntityRequest) String() string { return proto.CompactTextString(m) }
func (*MetaCreateEntityRequest) ProtoMessage()    {}
func (*MetaCreateEntityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{32}
}

func (m *MetaCreateEntityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaCreateEntityRequest.Unmarshal(m, b)
}
func (m *MetaCreateEntityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaCreateEntityRequest.Marshal(b, m, deterministic)
}
func (m *MetaCreateEntityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaCreateEntityRequest.Merge(m, src)
}
func (m *MetaCreateEntityRequest) XXX_Size() int {
	return xxx_messageInfo_MetaCreateEntityRequest.Size(m)
}
func (m *MetaCreateEntityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaCreateEntityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetaCreateEntityRequest proto.InternalMessageInfo

func (m *MetaCreateEntityRequest) GetEntity() *MetaEntity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *MetaCreateEntityRequest) GetKindName() string {
	if m != nil {
		return m.KindName
	}
	return ""
}

type MetaCreateEntityResponse struct {
	Entity               *MetaEntity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetaCreateEntityResponse) Reset()         { *m = MetaCreateEntityResponse{} }
func (m *MetaCreateEntityResponse) String() string { return proto.CompactTextString(m) }
func (*MetaCreateEntityResponse) ProtoMessage()    {}
func (*MetaCreateEntityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{33}
}

func (m *MetaCreateEntityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaCreateEntityResponse.Unmarshal(m, b)
}
func (m *MetaCreateEntityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaCreateEntityResponse.Marshal(b, m, deterministic)
}
func (m *MetaCreateEntityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaCreateEntityResponse.Merge(m, src)
}
func (m *MetaCreateEntityResponse) XXX_Size() int {
	return xxx_messageInfo_MetaCreateEntityResponse.Size(m)
}
func (m *MetaCreateEntityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaCreateEntityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetaCreateEntityResponse proto.InternalMessageInfo

func (m *MetaCreateEntityResponse) GetEntity() *MetaEntity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type MetaDeleteEntityRequest struct {
	Key                  *Key     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	KindName             string   `protobuf:"bytes,2,opt,name=kindName,proto3" json:"kindName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaDeleteEntityRequest) Reset()         { *m = MetaDeleteEntityRequest{} }
func (m *MetaDeleteEntityRequest) String() string { return proto.CompactTextString(m) }
func (*MetaDeleteEntityRequest) ProtoMessage()    {}
func (*MetaDeleteEntityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{34}
}

func (m *MetaDeleteEntityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaDeleteEntityRequest.Unmarshal(m, b)
}
func (m *MetaDeleteEntityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaDeleteEntityRequest.Marshal(b, m, deterministic)
}
func (m *MetaDeleteEntityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaDeleteEntityRequest.Merge(m, src)
}
func (m *MetaDeleteEntityRequest) XXX_Size() int {
	return xxx_messageInfo_MetaDeleteEntityRequest.Size(m)
}
func (m *MetaDeleteEntityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaDeleteEntityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetaDeleteEntityRequest proto.InternalMessageInfo

func (m *MetaDeleteEntityRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MetaDeleteEntityRequest) GetKindName() string {
	if m != nil {
		return m.KindName
	}
	return ""
}

type MetaDeleteEntityResponse struct {
	Entity               *MetaEntity `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetaDeleteEntityResponse) Reset()         { *m = MetaDeleteEntityResponse{} }
func (m *MetaDeleteEntityResponse) String() string { return proto.CompactTextString(m) }
func (*MetaDeleteEntityResponse) ProtoMessage()    {}
func (*MetaDeleteEntityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{35}
}

func (m *MetaDeleteEntityResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaDeleteEntityResponse.Unmarshal(m, b)
}
func (m *MetaDeleteEntityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaDeleteEntityResponse.Marshal(b, m, deterministic)
}
func (m *MetaDeleteEntityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaDeleteEntityResponse.Merge(m, src)
}
func (m *MetaDeleteEntityResponse) XXX_Size() int {
	return xxx_messageInfo_MetaDeleteEntityResponse.Size(m)
}
func (m *MetaDeleteEntityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaDeleteEntityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetaDeleteEntityResponse proto.InternalMessageInfo

func (m *MetaDeleteEntityResponse) GetEntity() *MetaEntity {
	if m != nil {
		return m.Entity
	}
	return nil
}

type GetTransactionQueueCountRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTransactionQueueCountRequest) Reset()         { *m = GetTransactionQueueCountRequest{} }
func (m *GetTransactionQueueCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionQueueCountRequest) ProtoMessage()    {}
func (*GetTransactionQueueCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{36}
}

func (m *GetTransactionQueueCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionQueueCountRequest.Unmarshal(m, b)
}
func (m *GetTransactionQueueCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionQueueCountRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionQueueCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionQueueCountRequest.Merge(m, src)
}
func (m *GetTransactionQueueCountRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionQueueCountRequest.Size(m)
}
func (m *GetTransactionQueueCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionQueueCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionQueueCountRequest proto.InternalMessageInfo

type GetTransactionQueueCountResponse struct {
	TransactionQueueCount uint32   `protobuf:"varint,1,opt,name=transactionQueueCount,proto3" json:"transactionQueueCount,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *GetTransactionQueueCountResponse) Reset()         { *m = GetTransactionQueueCountResponse{} }
func (m *GetTransactionQueueCountResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionQueueCountResponse) ProtoMessage()    {}
func (*GetTransactionQueueCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{37}
}

func (m *GetTransactionQueueCountResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionQueueCountResponse.Unmarshal(m, b)
}
func (m *GetTransactionQueueCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionQueueCountResponse.Marshal(b, m, deterministic)
}
func (m *GetTransactionQueueCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionQueueCountResponse.Merge(m, src)
}
func (m *GetTransactionQueueCountResponse) XXX_Size() int {
	return xxx_messageInfo_GetTransactionQueueCountResponse.Size(m)
}
func (m *GetTransactionQueueCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionQueueCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionQueueCountResponse proto.InternalMessageInfo

func (m *GetTransactionQueueCountResponse) GetTransactionQueueCount() uint32 {
	if m != nil {
		return m.TransactionQueueCount
	}
	return 0
}

type MetaTransaction struct {
	Operations           []*MetaOperation `protobuf:"bytes,1,rep,name=operations,proto3" json:"operations,omitempty"`
	Description          string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *MetaTransaction) Reset()         { *m = MetaTransaction{} }
func (m *MetaTransaction) String() string { return proto.CompactTextString(m) }
func (*MetaTransaction) ProtoMessage()    {}
func (*MetaTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{38}
}

func (m *MetaTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaTransaction.Unmarshal(m, b)
}
func (m *MetaTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaTransaction.Marshal(b, m, deterministic)
}
func (m *MetaTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaTransaction.Merge(m, src)
}
func (m *MetaTransaction) XXX_Size() int {
	return xxx_messageInfo_MetaTransaction.Size(m)
}
func (m *MetaTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_MetaTransaction proto.InternalMessageInfo

func (m *MetaTransaction) GetOperations() []*MetaOperation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *MetaTransaction) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type MetaOperation struct {
	// Types that are valid to be assigned to Operation:
	//	*MetaOperation_ListRequest
	//	*MetaOperation_GetRequest
	//	*MetaOperation_UpdateRequest
	//	*MetaOperation_CreateRequest
	//	*MetaOperation_DeleteRequest
	Operation            isMetaOperation_Operation `protobuf_oneof:"operation"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *MetaOperation) Reset()         { *m = MetaOperation{} }
func (m *MetaOperation) String() string { return proto.CompactTextString(m) }
func (*MetaOperation) ProtoMessage()    {}
func (*MetaOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{39}
}

func (m *MetaOperation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaOperation.Unmarshal(m, b)
}
func (m *MetaOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaOperation.Marshal(b, m, deterministic)
}
func (m *MetaOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaOperation.Merge(m, src)
}
func (m *MetaOperation) XXX_Size() int {
	return xxx_messageInfo_MetaOperation.Size(m)
}
func (m *MetaOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaOperation.DiscardUnknown(m)
}

var xxx_messageInfo_MetaOperation proto.InternalMessageInfo

type isMetaOperation_Operation interface {
	isMetaOperation_Operation()
}

type MetaOperation_ListRequest struct {
	ListRequest *MetaListEntitiesRequest `protobuf:"bytes,1,opt,name=listRequest,proto3,oneof"`
}

type MetaOperation_GetRequest struct {
	GetRequest *MetaGetEntityRequest `protobuf:"bytes,2,opt,name=getRequest,proto3,oneof"`
}

type MetaOperation_UpdateRequest struct {
	UpdateRequest *MetaUpdateEntityRequest `protobuf:"bytes,3,opt,name=updateRequest,proto3,oneof"`
}

type MetaOperation_CreateRequest struct {
	CreateRequest *MetaCreateEntityRequest `protobuf:"bytes,4,opt,name=createRequest,proto3,oneof"`
}

type MetaOperation_DeleteRequest struct {
	DeleteRequest *MetaDeleteEntityRequest `protobuf:"bytes,5,opt,name=deleteRequest,proto3,oneof"`
}

func (*MetaOperation_ListRequest) isMetaOperation_Operation() {}

func (*MetaOperation_GetRequest) isMetaOperation_Operation() {}

func (*MetaOperation_UpdateRequest) isMetaOperation_Operation() {}

func (*MetaOperation_CreateRequest) isMetaOperation_Operation() {}

func (*MetaOperation_DeleteRequest) isMetaOperation_Operation() {}

func (m *MetaOperation) GetOperation() isMetaOperation_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *MetaOperation) GetListRequest() *MetaListEntitiesRequest {
	if x, ok := m.GetOperation().(*MetaOperation_ListRequest); ok {
		return x.ListRequest
	}
	return nil
}

func (m *MetaOperation) GetGetRequest() *MetaGetEntityRequest {
	if x, ok := m.GetOperation().(*MetaOperation_GetRequest); ok {
		return x.GetRequest
	}
	return nil
}

func (m *MetaOperation) GetUpdateRequest() *MetaUpdateEntityRequest {
	if x, ok := m.GetOperation().(*MetaOperation_UpdateRequest); ok {
		return x.UpdateRequest
	}
	return nil
}

func (m *MetaOperation) GetCreateRequest() *MetaCreateEntityRequest {
	if x, ok := m.GetOperation().(*MetaOperation_CreateRequest); ok {
		return x.CreateRequest
	}
	return nil
}

func (m *MetaOperation) GetDeleteRequest() *MetaDeleteEntityRequest {
	if x, ok := m.GetOperation().(*MetaOperation_DeleteRequest); ok {
		return x.DeleteRequest
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MetaOperation) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MetaOperation_ListRequest)(nil),
		(*MetaOperation_GetRequest)(nil),
		(*MetaOperation_UpdateRequest)(nil),
		(*MetaOperation_CreateRequest)(nil),
		(*MetaOperation_DeleteRequest)(nil),
	}
}

type MetaTransactionResult struct {
	OperationResults     []*MetaOperationResult `protobuf:"bytes,1,rep,name=operationResults,proto3" json:"operationResults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *MetaTransactionResult) Reset()         { *m = MetaTransactionResult{} }
func (m *MetaTransactionResult) String() string { return proto.CompactTextString(m) }
func (*MetaTransactionResult) ProtoMessage()    {}
func (*MetaTransactionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{40}
}

func (m *MetaTransactionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaTransactionResult.Unmarshal(m, b)
}
func (m *MetaTransactionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaTransactionResult.Marshal(b, m, deterministic)
}
func (m *MetaTransactionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaTransactionResult.Merge(m, src)
}
func (m *MetaTransactionResult) XXX_Size() int {
	return xxx_messageInfo_MetaTransactionResult.Size(m)
}
func (m *MetaTransactionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaTransactionResult.DiscardUnknown(m)
}

var xxx_messageInfo_MetaTransactionResult proto.InternalMessageInfo

func (m *MetaTransactionResult) GetOperationResults() []*MetaOperationResult {
	if m != nil {
		return m.OperationResults
	}
	return nil
}

type MetaOperationResultError struct {
	ErrorMessage         string   `protobuf:"bytes,1,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetaOperationResultError) Reset()         { *m = MetaOperationResultError{} }
func (m *MetaOperationResultError) String() string { return proto.CompactTextString(m) }
func (*MetaOperationResultError) ProtoMessage()    {}
func (*MetaOperationResultError) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{41}
}

func (m *MetaOperationResultError) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaOperationResultError.Unmarshal(m, b)
}
func (m *MetaOperationResultError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaOperationResultError.Marshal(b, m, deterministic)
}
func (m *MetaOperationResultError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaOperationResultError.Merge(m, src)
}
func (m *MetaOperationResultError) XXX_Size() int {
	return xxx_messageInfo_MetaOperationResultError.Size(m)
}
func (m *MetaOperationResultError) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaOperationResultError.DiscardUnknown(m)
}

var xxx_messageInfo_MetaOperationResultError proto.InternalMessageInfo

func (m *MetaOperationResultError) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type MetaOperationResult struct {
	Error *MetaOperationResultError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are valid to be assigned to Operation:
	//	*MetaOperationResult_ListResponse
	//	*MetaOperationResult_GetResponse
	//	*MetaOperationResult_UpdateResponse
	//	*MetaOperationResult_CreateResponse
	//	*MetaOperationResult_DeleteResponse
	Operation            isMetaOperationResult_Operation `protobuf_oneof:"operation"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *MetaOperationResult) Reset()         { *m = MetaOperationResult{} }
func (m *MetaOperationResult) String() string { return proto.CompactTextString(m) }
func (*MetaOperationResult) ProtoMessage()    {}
func (*MetaOperationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{42}
}

func (m *MetaOperationResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaOperationResult.Unmarshal(m, b)
}
func (m *MetaOperationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaOperationResult.Marshal(b, m, deterministic)
}
func (m *MetaOperationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaOperationResult.Merge(m, src)
}
func (m *MetaOperationResult) XXX_Size() int {
	return xxx_messageInfo_MetaOperationResult.Size(m)
}
func (m *MetaOperationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaOperationResult.DiscardUnknown(m)
}

var xxx_messageInfo_MetaOperationResult proto.InternalMessageInfo

func (m *MetaOperationResult) GetError() *MetaOperationResultError {
	if m != nil {
		return m.Error
	}
	return nil
}

type isMetaOperationResult_Operation interface {
	isMetaOperationResult_Operation()
}

type MetaOperationResult_ListResponse struct {
	ListResponse *MetaListEntitiesResponse `protobuf:"bytes,2,opt,name=listResponse,proto3,oneof"`
}

type MetaOperationResult_GetResponse struct {
	GetResponse *MetaGetEntityResponse `protobuf:"bytes,3,opt,name=getResponse,proto3,oneof"`
}

type MetaOperationResult_UpdateResponse struct {
	UpdateResponse *MetaUpdateEntityResponse `protobuf:"bytes,4,opt,name=updateResponse,proto3,oneof"`
}

type MetaOperationResult_CreateResponse struct {
	CreateResponse *MetaCreateEntityResponse `protobuf:"bytes,5,opt,name=createResponse,proto3,oneof"`
}

type MetaOperationResult_DeleteResponse struct {
	DeleteResponse *MetaDeleteEntityResponse `protobuf:"bytes,6,opt,name=deleteResponse,proto3,oneof"`
}

func (*MetaOperationResult_ListResponse) isMetaOperationResult_Operation() {}

func (*MetaOperationResult_GetResponse) isMetaOperationResult_Operation() {}

func (*MetaOperationResult_UpdateResponse) isMetaOperationResult_Operation() {}

func (*MetaOperationResult_CreateResponse) isMetaOperationResult_Operation() {}

func (*MetaOperationResult_DeleteResponse) isMetaOperationResult_Operation() {}

func (m *MetaOperationResult) GetOperation() isMetaOperationResult_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (m *MetaOperationResult) GetListResponse() *MetaListEntitiesResponse {
	if x, ok := m.GetOperation().(*MetaOperationResult_ListResponse); ok {
		return x.ListResponse
	}
	return nil
}

func (m *MetaOperationResult) GetGetResponse() *MetaGetEntityResponse {
	if x, ok := m.GetOperation().(*MetaOperationResult_GetResponse); ok {
		return x.GetResponse
	}
	return nil
}

func (m *MetaOperationResult) GetUpdateResponse() *MetaUpdateEntityResponse {
	if x, ok := m.GetOperation().(*MetaOperationResult_UpdateResponse); ok {
		return x.UpdateResponse
	}
	return nil
}

func (m *MetaOperationResult) GetCreateResponse() *MetaCreateEntityResponse {
	if x, ok := m.GetOperation().(*MetaOperationResult_CreateResponse); ok {
		return x.CreateResponse
	}
	return nil
}

func (m *MetaOperationResult) GetDeleteResponse() *MetaDeleteEntityResponse {
	if x, ok := m.GetOperation().(*MetaOperationResult_DeleteResponse); ok {
		return x.DeleteResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MetaOperationResult) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MetaOperationResult_ListResponse)(nil),
		(*MetaOperationResult_GetResponse)(nil),
		(*MetaOperationResult_UpdateResponse)(nil),
		(*MetaOperationResult_CreateResponse)(nil),
		(*MetaOperationResult_DeleteResponse)(nil),
	}
}

type WatchTransactionsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchTransactionsRequest) Reset()         { *m = WatchTransactionsRequest{} }
func (m *WatchTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchTransactionsRequest) ProtoMessage()    {}
func (*WatchTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{43}
}

func (m *WatchTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchTransactionsRequest.Unmarshal(m, b)
}
func (m *WatchTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchTransactionsRequest.Marshal(b, m, deterministic)
}
func (m *WatchTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchTransactionsRequest.Merge(m, src)
}
func (m *WatchTransactionsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchTransactionsRequest.Size(m)
}
func (m *WatchTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchTransactionsRequest proto.InternalMessageInfo

type WatchTransactionsResponse struct {
	// Types that are valid to be assigned to Response:
	//	*WatchTransactionsResponse_Batch
	//	*WatchTransactionsResponse_InitialState
	Response             isWatchTransactionsResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                             `json:"-"`
	XXX_unrecognized     []byte                               `json:"-"`
	XXX_sizecache        int32                                `json:"-"`
}

func (m *WatchTransactionsResponse) Reset()         { *m = WatchTransactionsResponse{} }
func (m *WatchTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchTransactionsResponse) ProtoMessage()    {}
func (*WatchTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{44}
}

func (m *WatchTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchTransactionsResponse.Unmarshal(m, b)
}
func (m *WatchTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchTransactionsResponse.Marshal(b, m, deterministic)
}
func (m *WatchTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchTransactionsResponse.Merge(m, src)
}
func (m *WatchTransactionsResponse) XXX_Size() int {
	return xxx_messageInfo_WatchTransactionsResponse.Size(m)
}
func (m *WatchTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchTransactionsResponse proto.InternalMessageInfo

type isWatchTransactionsResponse_Response interface {
	isWatchTransactionsResponse_Response()
}

type WatchTransactionsResponse_Batch struct {
	Batch *MetaTransactionBatch `protobuf:"bytes,1,opt,name=batch,proto3,oneof"`
}

type WatchTransactionsResponse_InitialState struct {
	InitialState *MetaTransactionInitialState `protobuf:"bytes,2,opt,name=initialState,proto3,oneof"`
}

func (*WatchTransactionsResponse_Batch) isWatchTransactionsResponse_Response() {}

func (*WatchTransactionsResponse_InitialState) isWatchTransactionsResponse_Response() {}

func (m *WatchTransactionsResponse) GetResponse() isWatchTransactionsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *WatchTransactionsResponse) GetBatch() *MetaTransactionBatch {
	if x, ok := m.GetResponse().(*WatchTransactionsResponse_Batch); ok {
		return x.Batch
	}
	return nil
}

func (m *WatchTransactionsResponse) GetInitialState() *MetaTransactionInitialState {
	if x, ok := m.GetResponse().(*WatchTransactionsResponse_InitialState); ok {
		return x.InitialState
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WatchTransactionsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WatchTransactionsResponse_Batch)(nil),
		(*WatchTransactionsResponse_InitialState)(nil),
	}
}

type MetaTransactionRecord struct {
	MutatedKeys          []*Key               `protobuf:"bytes,1,rep,name=mutatedKeys,proto3" json:"mutatedKeys,omitempty"`
	DeletedKeys          []*Key               `protobuf:"bytes,2,rep,name=deletedKeys,proto3" json:"deletedKeys,omitempty"`
	DateSubmitted        *timestamp.Timestamp `protobuf:"bytes,3,opt,name=dateSubmitted,proto3" json:"dateSubmitted,omitempty"`
	DateCreated          *timestamp.Timestamp `protobuf:"bytes,4,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	Description          string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Id                   string               `protobuf:"bytes,6,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MetaTransactionRecord) Reset()         { *m = MetaTransactionRecord{} }
func (m *MetaTransactionRecord) String() string { return proto.CompactTextString(m) }
func (*MetaTransactionRecord) ProtoMessage()    {}
func (*MetaTransactionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{45}
}

func (m *MetaTransactionRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaTransactionRecord.Unmarshal(m, b)
}
func (m *MetaTransactionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaTransactionRecord.Marshal(b, m, deterministic)
}
func (m *MetaTransactionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaTransactionRecord.Merge(m, src)
}
func (m *MetaTransactionRecord) XXX_Size() int {
	return xxx_messageInfo_MetaTransactionRecord.Size(m)
}
func (m *MetaTransactionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaTransactionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MetaTransactionRecord proto.InternalMessageInfo

func (m *MetaTransactionRecord) GetMutatedKeys() []*Key {
	if m != nil {
		return m.MutatedKeys
	}
	return nil
}

func (m *MetaTransactionRecord) GetDeletedKeys() []*Key {
	if m != nil {
		return m.DeletedKeys
	}
	return nil
}

func (m *MetaTransactionRecord) GetDateSubmitted() *timestamp.Timestamp {
	if m != nil {
		return m.DateSubmitted
	}
	return nil
}

func (m *MetaTransactionRecord) GetDateCreated() *timestamp.Timestamp {
	if m != nil {
		return m.DateCreated
	}
	return nil
}

func (m *MetaTransactionRecord) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetaTransactionRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MetaTransactionBatch struct {
	MutatedEntities      []*MetaEntity `protobuf:"bytes,1,rep,name=mutatedEntities,proto3" json:"mutatedEntities,omitempty"`
	DeletedKeys          []*Key        `protobuf:"bytes,2,rep,name=deletedKeys,proto3" json:"deletedKeys,omitempty"`
	Description          string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Id                   string        `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MetaTransactionBatch) Reset()         { *m = MetaTransactionBatch{} }
func (m *MetaTransactionBatch) String() string { return proto.CompactTextString(m) }
func (*MetaTransactionBatch) ProtoMessage()    {}
func (*MetaTransactionBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{46}
}

func (m *MetaTransactionBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaTransactionBatch.Unmarshal(m, b)
}
func (m *MetaTransactionBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaTransactionBatch.Marshal(b, m, deterministic)
}
func (m *MetaTransactionBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaTransactionBatch.Merge(m, src)
}
func (m *MetaTransactionBatch) XXX_Size() int {
	return xxx_messageInfo_MetaTransactionBatch.Size(m)
}
func (m *MetaTransactionBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaTransactionBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MetaTransactionBatch proto.InternalMessageInfo

func (m *MetaTransactionBatch) GetMutatedEntities() []*MetaEntity {
	if m != nil {
		return m.MutatedEntities
	}
	return nil
}

func (m *MetaTransactionBatch) GetDeletedKeys() []*Key {
	if m != nil {
		return m.DeletedKeys
	}
	return nil
}

func (m *MetaTransactionBatch) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetaTransactionBatch) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MetaTransactionInitialState struct {
	Entities             []*MetaEntity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MetaTransactionInitialState) Reset()         { *m = MetaTransactionInitialState{} }
func (m *MetaTransactionInitialState) String() string { return proto.CompactTextString(m) }
func (*MetaTransactionInitialState) ProtoMessage()    {}
func (*MetaTransactionInitialState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{47}
}

func (m *MetaTransactionInitialState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetaTransactionInitialState.Unmarshal(m, b)
}
func (m *MetaTransactionInitialState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetaTransactionInitialState.Marshal(b, m, deterministic)
}
func (m *MetaTransactionInitialState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetaTransactionInitialState.Merge(m, src)
}
func (m *MetaTransactionInitialState) XXX_Size() int {
	return xxx_messageInfo_MetaTransactionInitialState.Size(m)
}
func (m *MetaTransactionInitialState) XXX_DiscardUnknown() {
	xxx_messageInfo_MetaTransactionInitialState.DiscardUnknown(m)
}

var xxx_messageInfo_MetaTransactionInitialState proto.InternalMessageInfo

func (m *MetaTransactionInitialState) GetEntities() []*MetaEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type ConfigstoreTraceEntry struct {
	Type                           ConfigstoreTraceEntry_ConfigstoreTraceEntryType `protobuf:"varint,1,opt,name=type,proto3,enum=config.ConfigstoreTraceEntry_ConfigstoreTraceEntryType" json:"type,omitempty"`
	Entity                         *MetaEntity                                     `protobuf:"bytes,2,opt,name=entity,proto3" json:"entity,omitempty"`
	Key                            *Key                                            `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	OperatorId                     string                                          `protobuf:"bytes,6,opt,name=operatorId,proto3" json:"operatorId,omitempty"`
	TransactionId                  string                                          `protobuf:"bytes,7,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	RemainingTransactionQueueCount int32                                           `protobuf:"varint,8,opt,name=remainingTransactionQueueCount,proto3" json:"remainingTransactionQueueCount,omitempty"`
	ReconnectionCodeString         string                                          `protobuf:"bytes,9,opt,name=reconnectionCodeString,proto3" json:"reconnectionCodeString,omitempty"`
	ErrorString                    string                                          `protobuf:"bytes,10,opt,name=errorString,proto3" json:"errorString,omitempty"`
	Port                           int32                                           `protobuf:"varint,11,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral           struct{}                                        `json:"-"`
	XXX_unrecognized               []byte                                          `json:"-"`
	XXX_sizecache                  int32                                           `json:"-"`
}

func (m *ConfigstoreTraceEntry) Reset()         { *m = ConfigstoreTraceEntry{} }
func (m *ConfigstoreTraceEntry) String() string { return proto.CompactTextString(m) }
func (*ConfigstoreTraceEntry) ProtoMessage()    {}
func (*ConfigstoreTraceEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{48}
}

func (m *ConfigstoreTraceEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigstoreTraceEntry.Unmarshal(m, b)
}
func (m *ConfigstoreTraceEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigstoreTraceEntry.Marshal(b, m, deterministic)
}
func (m *ConfigstoreTraceEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigstoreTraceEntry.Merge(m, src)
}
func (m *ConfigstoreTraceEntry) XXX_Size() int {
	return xxx_messageInfo_ConfigstoreTraceEntry.Size(m)
}
func (m *ConfigstoreTraceEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigstoreTraceEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigstoreTraceEntry proto.InternalMessageInfo

func (m *ConfigstoreTraceEntry) GetType() ConfigstoreTraceEntry_ConfigstoreTraceEntryType {
	if m != nil {
		return m.Type
	}
	return ConfigstoreTraceEntry_INITIAL_STATE_SEND_BEGIN
}

func (m *ConfigstoreTraceEntry) GetEntity() *MetaEntity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *ConfigstoreTraceEntry) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *ConfigstoreTraceEntry) GetOperatorId() string {
	if m != nil {
		return m.OperatorId
	}
	return ""
}

func (m *ConfigstoreTraceEntry) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *ConfigstoreTraceEntry) GetRemainingTransactionQueueCount() int32 {
	if m != nil {
		return m.RemainingTransactionQueueCount
	}
	return 0
}

func (m *ConfigstoreTraceEntry) GetReconnectionCodeString() string {
	if m != nil {
		return m.ReconnectionCodeString
	}
	return ""
}

func (m *ConfigstoreTraceEntry) GetErrorString() string {
	if m != nil {
		return m.ErrorString
	}
	return ""
}

func (m *ConfigstoreTraceEntry) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type MapRegion struct {
	// The key of the MapRegion
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	//
	Name string `protobuf:"bytes,2,,name=name,proto3" json:"name,omitempty"`
	//
	Scale float64 `protobuf:"fixed64,3,,name=scale,proto3" json:"scale,omitempty"`
	//
	DotScale float64 `protobuf:"fixed64,4,,name=dotScale,proto3" json:"dotScale,omitempty"`
	//
	Latitude float64 `protobuf:"fixed64,5,,name=latitude,proto3" json:"latitude,omitempty"`
	//
	Longitude float64 `protobuf:"fixed64,6,,name=longitude,proto3" json:"longitude,omitempty"`
	// A comma-delimited list of country codes to include for the region. If this is left blank, all sessions are included.
	CountryCodes         string   `protobuf:"bytes,7,,name=countryCodes,proto3" json:"countryCodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapRegion) Reset()         { *m = MapRegion{} }
func (m *MapRegion) String() string { return proto.CompactTextString(m) }
func (*MapRegion) ProtoMessage()    {}
func (*MapRegion) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{49}
}

func (m *MapRegion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapRegion.Unmarshal(m, b)
}
func (m *MapRegion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapRegion.Marshal(b, m, deterministic)
}
func (m *MapRegion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapRegion.Merge(m, src)
}
func (m *MapRegion) XXX_Size() int {
	return xxx_messageInfo_MapRegion.Size(m)
}
func (m *MapRegion) XXX_DiscardUnknown() {
	xxx_messageInfo_MapRegion.DiscardUnknown(m)
}

var xxx_messageInfo_MapRegion proto.InternalMessageInfo

func (m *MapRegion) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *MapRegion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MapRegion) GetScale() float64 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *MapRegion) GetDotScale() float64 {
	if m != nil {
		return m.DotScale
	}
	return 0
}

func (m *MapRegion) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *MapRegion) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *MapRegion) GetCountryCodes() string {
	if m != nil {
		return m.CountryCodes
	}
	return ""
}

type ListMapRegionRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMapRegionRequest) Reset()         { *m = ListMapRegionRequest{} }
func (m *ListMapRegionRequest) String() string { return proto.CompactTextString(m) }
func (*ListMapRegionRequest) ProtoMessage()    {}
func (*ListMapRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{50}
}

func (m *ListMapRegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMapRegionRequest.Unmarshal(m, b)
}
func (m *ListMapRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMapRegionRequest.Marshal(b, m, deterministic)
}
func (m *ListMapRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMapRegionRequest.Merge(m, src)
}
func (m *ListMapRegionRequest) XXX_Size() int {
	return xxx_messageInfo_ListMapRegionRequest.Size(m)
}
func (m *ListMapRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMapRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMapRegionRequest proto.InternalMessageInfo

func (m *ListMapRegionRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListMapRegionRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListMapRegionResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of MapRegions
	Entities             []*MapRegion `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListMapRegionResponse) Reset()         { *m = ListMapRegionResponse{} }
func (m *ListMapRegionResponse) String() string { return proto.CompactTextString(m) }
func (*ListMapRegionResponse) ProtoMessage()    {}
func (*ListMapRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{51}
}

func (m *ListMapRegionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMapRegionResponse.Unmarshal(m, b)
}
func (m *ListMapRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMapRegionResponse.Marshal(b, m, deterministic)
}
func (m *ListMapRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMapRegionResponse.Merge(m, src)
}
func (m *ListMapRegionResponse) XXX_Size() int {
	return xxx_messageInfo_ListMapRegionResponse.Size(m)
}
func (m *ListMapRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMapRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMapRegionResponse proto.InternalMessageInfo

func (m *ListMapRegionResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListMapRegionResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListMapRegionResponse) GetEntities() []*MapRegion {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetMapRegionRequest struct {
	// The ID of the MapRegion to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapRegionRequest) Reset()         { *m = GetMapRegionRequest{} }
func (m *GetMapRegionRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapRegionRequest) ProtoMessage()    {}
func (*GetMapRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{52}
}

func (m *GetMapRegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapRegionRequest.Unmarshal(m, b)
}
func (m *GetMapRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapRegionRequest.Marshal(b, m, deterministic)
}
func (m *GetMapRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapRegionRequest.Merge(m, src)
}
func (m *GetMapRegionRequest) XXX_Size() int {
	return xxx_messageInfo_GetMapRegionRequest.Size(m)
}
func (m *GetMapRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapRegionRequest proto.InternalMessageInfo

func (m *GetMapRegionRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetMapRegionResponse struct {
	// The MapRegion that was fetched, or null if it didn't exist
	Entity               *MapRegion `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetMapRegionResponse) Reset()         { *m = GetMapRegionResponse{} }
func (m *GetMapRegionResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapRegionResponse) ProtoMessage()    {}
func (*GetMapRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{53}
}

func (m *GetMapRegionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapRegionResponse.Unmarshal(m, b)
}
func (m *GetMapRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapRegionResponse.Marshal(b, m, deterministic)
}
func (m *GetMapRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapRegionResponse.Merge(m, src)
}
func (m *GetMapRegionResponse) XXX_Size() int {
	return xxx_messageInfo_GetMapRegionResponse.Size(m)
}
func (m *GetMapRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapRegionResponse proto.InternalMessageInfo

func (m *GetMapRegionResponse) GetEntity() *MapRegion {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchMapRegionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchMapRegionRequest) Reset()         { *m = WatchMapRegionRequest{} }
func (m *WatchMapRegionRequest) String() string { return proto.CompactTextString(m) }
func (*WatchMapRegionRequest) ProtoMessage()    {}
func (*WatchMapRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{54}
}

func (m *WatchMapRegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchMapRegionRequest.Unmarshal(m, b)
}
func (m *WatchMapRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchMapRegionRequest.Marshal(b, m, deterministic)
}
func (m *WatchMapRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchMapRegionRequest.Merge(m, src)
}
func (m *WatchMapRegionRequest) XXX_Size() int {
	return xxx_messageInfo_WatchMapRegionRequest.Size(m)
}
func (m *WatchMapRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchMapRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchMapRegionRequest proto.InternalMessageInfo

type WatchMapRegionEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The MapRegion that was created, modified or deleted
	Entity *MapRegion `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchMapRegionEvent) Reset()         { *m = WatchMapRegionEvent{} }
func (m *WatchMapRegionEvent) String() string { return proto.CompactTextString(m) }
func (*WatchMapRegionEvent) ProtoMessage()    {}
func (*WatchMapRegionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{55}
}

func (m *WatchMapRegionEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchMapRegionEvent.Unmarshal(m, b)
}
func (m *WatchMapRegionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchMapRegionEvent.Marshal(b, m, deterministic)
}
func (m *WatchMapRegionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchMapRegionEvent.Merge(m, src)
}
func (m *WatchMapRegionEvent) XXX_Size() int {
	return xxx_messageInfo_WatchMapRegionEvent.Size(m)
}
func (m *WatchMapRegionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchMapRegionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchMapRegionEvent proto.InternalMessageInfo

func (m *WatchMapRegionEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchMapRegionEvent) GetEntity() *MapRegion {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchMapRegionEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchMapRegionEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateMapRegionRequest struct {
	// The MapRegion entity to update
	Entity               *MapRegion `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateMapRegionRequest) Reset()         { *m = UpdateMapRegionRequest{} }
func (m *UpdateMapRegionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMapRegionRequest) ProtoMessage()    {}
func (*UpdateMapRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{56}
}

func (m *UpdateMapRegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMapRegionRequest.Unmarshal(m, b)
}
func (m *UpdateMapRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMapRegionRequest.Marshal(b, m, deterministic)
}
func (m *UpdateMapRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapRegionRequest.Merge(m, src)
}
func (m *UpdateMapRegionRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMapRegionRequest.Size(m)
}
func (m *UpdateMapRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapRegionRequest proto.InternalMessageInfo

func (m *UpdateMapRegionRequest) GetEntity() *MapRegion {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateMapRegionResponse struct {
	// The stored version of the MapRegion entity
	Entity               *MapRegion `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateMapRegionResponse) Reset()         { *m = UpdateMapRegionResponse{} }
func (m *UpdateMapRegionResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMapRegionResponse) ProtoMessage()    {}
func (*UpdateMapRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{57}
}

func (m *UpdateMapRegionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMapRegionResponse.Unmarshal(m, b)
}
func (m *UpdateMapRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMapRegionResponse.Marshal(b, m, deterministic)
}
func (m *UpdateMapRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapRegionResponse.Merge(m, src)
}
func (m *UpdateMapRegionResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateMapRegionResponse.Size(m)
}
func (m *UpdateMapRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapRegionResponse proto.InternalMessageInfo

func (m *UpdateMapRegionResponse) GetEntity() *MapRegion {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateMapRegionRequest struct {
	// The MapRegion entity to create; if MapRegion uses auto-generated IDs, the ID field is ignored
	Entity               *MapRegion `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateMapRegionRequest) Reset()         { *m = CreateMapRegionRequest{} }
func (m *CreateMapRegionRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMapRegionRequest) ProtoMessage()    {}
func (*CreateMapRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{58}
}

func (m *CreateMapRegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMapRegionRequest.Unmarshal(m, b)
}
func (m *CreateMapRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMapRegionRequest.Marshal(b, m, deterministic)
}
func (m *CreateMapRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMapRegionRequest.Merge(m, src)
}
func (m *CreateMapRegionRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMapRegionRequest.Size(m)
}
func (m *CreateMapRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMapRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMapRegionRequest proto.InternalMessageInfo

func (m *CreateMapRegionRequest) GetEntity() *MapRegion {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateMapRegionResponse struct {
	// The stored version of the MapRegion entity
	Entity               *MapRegion `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateMapRegionResponse) Reset()         { *m = CreateMapRegionResponse{} }
func (m *CreateMapRegionResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMapRegionResponse) ProtoMessage()    {}
func (*CreateMapRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{59}
}

func (m *CreateMapRegionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMapRegionResponse.Unmarshal(m, b)
}
func (m *CreateMapRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMapRegionResponse.Marshal(b, m, deterministic)
}
func (m *CreateMapRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMapRegionResponse.Merge(m, src)
}
func (m *CreateMapRegionResponse) XXX_Size() int {
	return xxx_messageInfo_CreateMapRegionResponse.Size(m)
}
func (m *CreateMapRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMapRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMapRegionResponse proto.InternalMessageInfo

func (m *CreateMapRegionResponse) GetEntity() *MapRegion {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteMapRegionRequest struct {
	// The ID of the MapRegion to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMapRegionRequest) Reset()         { *m = DeleteMapRegionRequest{} }
func (m *DeleteMapRegionRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMapRegionRequest) ProtoMessage()    {}
func (*DeleteMapRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{60}
}

func (m *DeleteMapRegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMapRegionRequest.Unmarshal(m, b)
}
func (m *DeleteMapRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMapRegionRequest.Marshal(b, m, deterministic)
}
func (m *DeleteMapRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMapRegionRequest.Merge(m, src)
}
func (m *DeleteMapRegionRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMapRegionRequest.Size(m)
}
func (m *DeleteMapRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMapRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMapRegionRequest proto.InternalMessageInfo

func (m *DeleteMapRegionRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteMapRegionResponse struct {
	// The version of the MapRegion entity that was deleted
	Entity               *MapRegion `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DeleteMapRegionResponse) Reset()         { *m = DeleteMapRegionResponse{} }
func (m *DeleteMapRegionResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMapRegionResponse) ProtoMessage()    {}
func (*DeleteMapRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{61}
}

func (m *DeleteMapRegionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMapRegionResponse.Unmarshal(m, b)
}
func (m *DeleteMapRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMapRegionResponse.Marshal(b, m, deterministic)
}
func (m *DeleteMapRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMapRegionResponse.Merge(m, src)
}
func (m *DeleteMapRegionResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteMapRegionResponse.Size(m)
}
func (m *DeleteMapRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMapRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMapRegionResponse proto.InternalMessageInfo

func (m *DeleteMapRegionResponse) GetEntity() *MapRegion {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Seller struct {
	// The key of the Seller
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	//
	Name string `protobuf:"bytes,2,,name=name,proto3" json:"name,omitempty"`
	//
	PricePublicIngressNibblins int64 `protobuf:"varint,4,,name=pricePublicIngressNibblins,proto3" json:"pricePublicIngressNibblins,omitempty"`
	//
	PricePublicEgressNibblins int64    `protobuf:"varint,5,,name=pricePublicEgressNibblins,proto3" json:"pricePublicEgressNibblins,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *Seller) Reset()         { *m = Seller{} }
func (m *Seller) String() string { return proto.CompactTextString(m) }
func (*Seller) ProtoMessage()    {}
func (*Seller) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{62}
}

func (m *Seller) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Seller.Unmarshal(m, b)
}
func (m *Seller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Seller.Marshal(b, m, deterministic)
}
func (m *Seller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Seller.Merge(m, src)
}
func (m *Seller) XXX_Size() int {
	return xxx_messageInfo_Seller.Size(m)
}
func (m *Seller) XXX_DiscardUnknown() {
	xxx_messageInfo_Seller.DiscardUnknown(m)
}

var xxx_messageInfo_Seller proto.InternalMessageInfo

func (m *Seller) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Seller) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Seller) GetPricePublicIngressNibblins() int64 {
	if m != nil {
		return m.PricePublicIngressNibblins
	}
	return 0
}

func (m *Seller) GetPricePublicEgressNibblins() int64 {
	if m != nil {
		return m.PricePublicEgressNibblins
	}
	return 0
}

type ListSellerRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSellerRequest) Reset()         { *m = ListSellerRequest{} }
func (m *ListSellerRequest) String() string { return proto.CompactTextString(m) }
func (*ListSellerRequest) ProtoMessage()    {}
func (*ListSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{63}
}

func (m *ListSellerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSellerRequest.Unmarshal(m, b)
}
func (m *ListSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSellerRequest.Marshal(b, m, deterministic)
}
func (m *ListSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSellerRequest.Merge(m, src)
}
func (m *ListSellerRequest) XXX_Size() int {
	return xxx_messageInfo_ListSellerRequest.Size(m)
}
func (m *ListSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSellerRequest proto.InternalMessageInfo

func (m *ListSellerRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListSellerRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListSellerResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of Sellers
	Entities             []*Seller `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListSellerResponse) Reset()         { *m = ListSellerResponse{} }
func (m *ListSellerResponse) String() string { return proto.CompactTextString(m) }
func (*ListSellerResponse) ProtoMessage()    {}
func (*ListSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{64}
}

func (m *ListSellerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListSellerResponse.Unmarshal(m, b)
}
func (m *ListSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListSellerResponse.Marshal(b, m, deterministic)
}
func (m *ListSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSellerResponse.Merge(m, src)
}
func (m *ListSellerResponse) XXX_Size() int {
	return xxx_messageInfo_ListSellerResponse.Size(m)
}
func (m *ListSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSellerResponse proto.InternalMessageInfo

func (m *ListSellerResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListSellerResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListSellerResponse) GetEntities() []*Seller {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetSellerRequest struct {
	// The ID of the Seller to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSellerRequest) Reset()         { *m = GetSellerRequest{} }
func (m *GetSellerRequest) String() string { return proto.CompactTextString(m) }
func (*GetSellerRequest) ProtoMessage()    {}
func (*GetSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{65}
}

func (m *GetSellerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSellerRequest.Unmarshal(m, b)
}
func (m *GetSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSellerRequest.Marshal(b, m, deterministic)
}
func (m *GetSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSellerRequest.Merge(m, src)
}
func (m *GetSellerRequest) XXX_Size() int {
	return xxx_messageInfo_GetSellerRequest.Size(m)
}
func (m *GetSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSellerRequest proto.InternalMessageInfo

func (m *GetSellerRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetSellerResponse struct {
	// The Seller that was fetched, or null if it didn't exist
	Entity               *Seller  `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSellerResponse) Reset()         { *m = GetSellerResponse{} }
func (m *GetSellerResponse) String() string { return proto.CompactTextString(m) }
func (*GetSellerResponse) ProtoMessage()    {}
func (*GetSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{66}
}

func (m *GetSellerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSellerResponse.Unmarshal(m, b)
}
func (m *GetSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSellerResponse.Marshal(b, m, deterministic)
}
func (m *GetSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSellerResponse.Merge(m, src)
}
func (m *GetSellerResponse) XXX_Size() int {
	return xxx_messageInfo_GetSellerResponse.Size(m)
}
func (m *GetSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSellerResponse proto.InternalMessageInfo

func (m *GetSellerResponse) GetEntity() *Seller {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchSellerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchSellerRequest) Reset()         { *m = WatchSellerRequest{} }
func (m *WatchSellerRequest) String() string { return proto.CompactTextString(m) }
func (*WatchSellerRequest) ProtoMessage()    {}
func (*WatchSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{67}
}

func (m *WatchSellerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchSellerRequest.Unmarshal(m, b)
}
func (m *WatchSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchSellerRequest.Marshal(b, m, deterministic)
}
func (m *WatchSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSellerRequest.Merge(m, src)
}
func (m *WatchSellerRequest) XXX_Size() int {
	return xxx_messageInfo_WatchSellerRequest.Size(m)
}
func (m *WatchSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSellerRequest proto.InternalMessageInfo

type WatchSellerEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The Seller that was created, modified or deleted
	Entity *Seller `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchSellerEvent) Reset()         { *m = WatchSellerEvent{} }
func (m *WatchSellerEvent) String() string { return proto.CompactTextString(m) }
func (*WatchSellerEvent) ProtoMessage()    {}
func (*WatchSellerEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{68}
}

func (m *WatchSellerEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchSellerEvent.Unmarshal(m, b)
}
func (m *WatchSellerEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchSellerEvent.Marshal(b, m, deterministic)
}
func (m *WatchSellerEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchSellerEvent.Merge(m, src)
}
func (m *WatchSellerEvent) XXX_Size() int {
	return xxx_messageInfo_WatchSellerEvent.Size(m)
}
func (m *WatchSellerEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchSellerEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchSellerEvent proto.InternalMessageInfo

func (m *WatchSellerEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchSellerEvent) GetEntity() *Seller {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchSellerEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchSellerEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateSellerRequest struct {
	// The Seller entity to update
	Entity               *Seller  `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSellerRequest) Reset()         { *m = UpdateSellerRequest{} }
func (m *UpdateSellerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSellerRequest) ProtoMessage()    {}
func (*UpdateSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{69}
}

func (m *UpdateSellerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSellerRequest.Unmarshal(m, b)
}
func (m *UpdateSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSellerRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSellerRequest.Merge(m, src)
}
func (m *UpdateSellerRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSellerRequest.Size(m)
}
func (m *UpdateSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSellerRequest proto.InternalMessageInfo

func (m *UpdateSellerRequest) GetEntity() *Seller {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateSellerResponse struct {
	// The stored version of the Seller entity
	Entity               *Seller  `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSellerResponse) Reset()         { *m = UpdateSellerResponse{} }
func (m *UpdateSellerResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSellerResponse) ProtoMessage()    {}
func (*UpdateSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{70}
}

func (m *UpdateSellerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSellerResponse.Unmarshal(m, b)
}
func (m *UpdateSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSellerResponse.Marshal(b, m, deterministic)
}
func (m *UpdateSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSellerResponse.Merge(m, src)
}
func (m *UpdateSellerResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateSellerResponse.Size(m)
}
func (m *UpdateSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSellerResponse proto.InternalMessageInfo

func (m *UpdateSellerResponse) GetEntity() *Seller {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateSellerRequest struct {
	// The Seller entity to create; if Seller uses auto-generated IDs, the ID field is ignored
	Entity               *Seller  `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSellerRequest) Reset()         { *m = CreateSellerRequest{} }
func (m *CreateSellerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSellerRequest) ProtoMessage()    {}
func (*CreateSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{71}
}

func (m *CreateSellerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSellerRequest.Unmarshal(m, b)
}
func (m *CreateSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSellerRequest.Marshal(b, m, deterministic)
}
func (m *CreateSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSellerRequest.Merge(m, src)
}
func (m *CreateSellerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateSellerRequest.Size(m)
}
func (m *CreateSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSellerRequest proto.InternalMessageInfo

func (m *CreateSellerRequest) GetEntity() *Seller {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateSellerResponse struct {
	// The stored version of the Seller entity
	Entity               *Seller  `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSellerResponse) Reset()         { *m = CreateSellerResponse{} }
func (m *CreateSellerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateSellerResponse) ProtoMessage()    {}
func (*CreateSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{72}
}

func (m *CreateSellerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSellerResponse.Unmarshal(m, b)
}
func (m *CreateSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSellerResponse.Marshal(b, m, deterministic)
}
func (m *CreateSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSellerResponse.Merge(m, src)
}
func (m *CreateSellerResponse) XXX_Size() int {
	return xxx_messageInfo_CreateSellerResponse.Size(m)
}
func (m *CreateSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSellerResponse proto.InternalMessageInfo

func (m *CreateSellerResponse) GetEntity() *Seller {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteSellerRequest struct {
	// The ID of the Seller to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSellerRequest) Reset()         { *m = DeleteSellerRequest{} }
func (m *DeleteSellerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSellerRequest) ProtoMessage()    {}
func (*DeleteSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{73}
}

func (m *DeleteSellerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSellerRequest.Unmarshal(m, b)
}
func (m *DeleteSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSellerRequest.Marshal(b, m, deterministic)
}
func (m *DeleteSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSellerRequest.Merge(m, src)
}
func (m *DeleteSellerRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteSellerRequest.Size(m)
}
func (m *DeleteSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSellerRequest proto.InternalMessageInfo

func (m *DeleteSellerRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteSellerResponse struct {
	// The version of the Seller entity that was deleted
	Entity               *Seller  `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSellerResponse) Reset()         { *m = DeleteSellerResponse{} }
func (m *DeleteSellerResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteSellerResponse) ProtoMessage()    {}
func (*DeleteSellerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{74}
}

func (m *DeleteSellerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteSellerResponse.Unmarshal(m, b)
}
func (m *DeleteSellerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteSellerResponse.Marshal(b, m, deterministic)
}
func (m *DeleteSellerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSellerResponse.Merge(m, src)
}
func (m *DeleteSellerResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteSellerResponse.Size(m)
}
func (m *DeleteSellerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSellerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSellerResponse proto.InternalMessageInfo

func (m *DeleteSellerResponse) GetEntity() *Seller {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Release struct {
	// The key of the Release
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	// The version number, without 'v' prefix. e.g. '3.1.0'.
	Name string `protobuf:"bytes,2,,name=name,proto3" json:"name,omitempty"`
	// The release channel, one of 'stable', 'beta' or 'experimental'.
	Channel string `protobuf:"bytes,6,,name=channel,proto3" json:"channel,omitempty"`
	// The time that the SDK was released.
	ReleaseDateUtc *timestamp.Timestamp `protobuf:"bytes,7,,name=releaseDateUtc,proto3" json:"releaseDateUtc,omitempty"`
	// The release notes (e.g. changelog).
	ReleaseNotes string `protobuf:"bytes,8,,name=releaseNotes,proto3" json:"releaseNotes,omitempty"`
	// For experimental builds, the URL to the PR that created it.
	ExperimentalBuildUrl string   `protobuf:"bytes,9,,name=experimentalBuildUrl,proto3" json:"experimentalBuildUrl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Release) Reset()         { *m = Release{} }
func (m *Release) String() string { return proto.CompactTextString(m) }
func (*Release) ProtoMessage()    {}
func (*Release) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{75}
}

func (m *Release) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Release.Unmarshal(m, b)
}
func (m *Release) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Release.Marshal(b, m, deterministic)
}
func (m *Release) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Release.Merge(m, src)
}
func (m *Release) XXX_Size() int {
	return xxx_messageInfo_Release.Size(m)
}
func (m *Release) XXX_DiscardUnknown() {
	xxx_messageInfo_Release.DiscardUnknown(m)
}

var xxx_messageInfo_Release proto.InternalMessageInfo

func (m *Release) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Release) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Release) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Release) GetReleaseDateUtc() *timestamp.Timestamp {
	if m != nil {
		return m.ReleaseDateUtc
	}
	return nil
}

func (m *Release) GetReleaseNotes() string {
	if m != nil {
		return m.ReleaseNotes
	}
	return ""
}

func (m *Release) GetExperimentalBuildUrl() string {
	if m != nil {
		return m.ExperimentalBuildUrl
	}
	return ""
}

type ListReleaseRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReleaseRequest) Reset()         { *m = ListReleaseRequest{} }
func (m *ListReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*ListReleaseRequest) ProtoMessage()    {}
func (*ListReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{76}
}

func (m *ListReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReleaseRequest.Unmarshal(m, b)
}
func (m *ListReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReleaseRequest.Marshal(b, m, deterministic)
}
func (m *ListReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReleaseRequest.Merge(m, src)
}
func (m *ListReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_ListReleaseRequest.Size(m)
}
func (m *ListReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListReleaseRequest proto.InternalMessageInfo

func (m *ListReleaseRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListReleaseRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListReleaseResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of Releases
	Entities             []*Release `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListReleaseResponse) Reset()         { *m = ListReleaseResponse{} }
func (m *ListReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*ListReleaseResponse) ProtoMessage()    {}
func (*ListReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{77}
}

func (m *ListReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReleaseResponse.Unmarshal(m, b)
}
func (m *ListReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReleaseResponse.Marshal(b, m, deterministic)
}
func (m *ListReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReleaseResponse.Merge(m, src)
}
func (m *ListReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_ListReleaseResponse.Size(m)
}
func (m *ListReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListReleaseResponse proto.InternalMessageInfo

func (m *ListReleaseResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListReleaseResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListReleaseResponse) GetEntities() []*Release {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetReleaseRequest struct {
	// The ID of the Release to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReleaseRequest) Reset()         { *m = GetReleaseRequest{} }
func (m *GetReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*GetReleaseRequest) ProtoMessage()    {}
func (*GetReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{78}
}

func (m *GetReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReleaseRequest.Unmarshal(m, b)
}
func (m *GetReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReleaseRequest.Marshal(b, m, deterministic)
}
func (m *GetReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReleaseRequest.Merge(m, src)
}
func (m *GetReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_GetReleaseRequest.Size(m)
}
func (m *GetReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReleaseRequest proto.InternalMessageInfo

func (m *GetReleaseRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetReleaseResponse struct {
	// The Release that was fetched, or null if it didn't exist
	Entity               *Release `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReleaseResponse) Reset()         { *m = GetReleaseResponse{} }
func (m *GetReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*GetReleaseResponse) ProtoMessage()    {}
func (*GetReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{79}
}

func (m *GetReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReleaseResponse.Unmarshal(m, b)
}
func (m *GetReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReleaseResponse.Marshal(b, m, deterministic)
}
func (m *GetReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReleaseResponse.Merge(m, src)
}
func (m *GetReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_GetReleaseResponse.Size(m)
}
func (m *GetReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetReleaseResponse proto.InternalMessageInfo

func (m *GetReleaseResponse) GetEntity() *Release {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchReleaseRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchReleaseRequest) Reset()         { *m = WatchReleaseRequest{} }
func (m *WatchReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*WatchReleaseRequest) ProtoMessage()    {}
func (*WatchReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{80}
}

func (m *WatchReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchReleaseRequest.Unmarshal(m, b)
}
func (m *WatchReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchReleaseRequest.Marshal(b, m, deterministic)
}
func (m *WatchReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchReleaseRequest.Merge(m, src)
}
func (m *WatchReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_WatchReleaseRequest.Size(m)
}
func (m *WatchReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchReleaseRequest proto.InternalMessageInfo

type WatchReleaseEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The Release that was created, modified or deleted
	Entity *Release `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchReleaseEvent) Reset()         { *m = WatchReleaseEvent{} }
func (m *WatchReleaseEvent) String() string { return proto.CompactTextString(m) }
func (*WatchReleaseEvent) ProtoMessage()    {}
func (*WatchReleaseEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{81}
}

func (m *WatchReleaseEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchReleaseEvent.Unmarshal(m, b)
}
func (m *WatchReleaseEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchReleaseEvent.Marshal(b, m, deterministic)
}
func (m *WatchReleaseEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchReleaseEvent.Merge(m, src)
}
func (m *WatchReleaseEvent) XXX_Size() int {
	return xxx_messageInfo_WatchReleaseEvent.Size(m)
}
func (m *WatchReleaseEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchReleaseEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchReleaseEvent proto.InternalMessageInfo

func (m *WatchReleaseEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchReleaseEvent) GetEntity() *Release {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchReleaseEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchReleaseEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateReleaseRequest struct {
	// The Release entity to update
	Entity               *Release `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateReleaseRequest) Reset()         { *m = UpdateReleaseRequest{} }
func (m *UpdateReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateReleaseRequest) ProtoMessage()    {}
func (*UpdateReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{82}
}

func (m *UpdateReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReleaseRequest.Unmarshal(m, b)
}
func (m *UpdateReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReleaseRequest.Marshal(b, m, deterministic)
}
func (m *UpdateReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReleaseRequest.Merge(m, src)
}
func (m *UpdateReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateReleaseRequest.Size(m)
}
func (m *UpdateReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReleaseRequest proto.InternalMessageInfo

func (m *UpdateReleaseRequest) GetEntity() *Release {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateReleaseResponse struct {
	// The stored version of the Release entity
	Entity               *Release `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateReleaseResponse) Reset()         { *m = UpdateReleaseResponse{} }
func (m *UpdateReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateReleaseResponse) ProtoMessage()    {}
func (*UpdateReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{83}
}

func (m *UpdateReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateReleaseResponse.Unmarshal(m, b)
}
func (m *UpdateReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateReleaseResponse.Marshal(b, m, deterministic)
}
func (m *UpdateReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateReleaseResponse.Merge(m, src)
}
func (m *UpdateReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateReleaseResponse.Size(m)
}
func (m *UpdateReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateReleaseResponse proto.InternalMessageInfo

func (m *UpdateReleaseResponse) GetEntity() *Release {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateReleaseRequest struct {
	// The Release entity to create; if Release uses auto-generated IDs, the ID field is ignored
	Entity               *Release `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReleaseRequest) Reset()         { *m = CreateReleaseRequest{} }
func (m *CreateReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*CreateReleaseRequest) ProtoMessage()    {}
func (*CreateReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{84}
}

func (m *CreateReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateReleaseRequest.Unmarshal(m, b)
}
func (m *CreateReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateReleaseRequest.Marshal(b, m, deterministic)
}
func (m *CreateReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReleaseRequest.Merge(m, src)
}
func (m *CreateReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_CreateReleaseRequest.Size(m)
}
func (m *CreateReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReleaseRequest proto.InternalMessageInfo

func (m *CreateReleaseRequest) GetEntity() *Release {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateReleaseResponse struct {
	// The stored version of the Release entity
	Entity               *Release `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateReleaseResponse) Reset()         { *m = CreateReleaseResponse{} }
func (m *CreateReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*CreateReleaseResponse) ProtoMessage()    {}
func (*CreateReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{85}
}

func (m *CreateReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateReleaseResponse.Unmarshal(m, b)
}
func (m *CreateReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateReleaseResponse.Marshal(b, m, deterministic)
}
func (m *CreateReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateReleaseResponse.Merge(m, src)
}
func (m *CreateReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_CreateReleaseResponse.Size(m)
}
func (m *CreateReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateReleaseResponse proto.InternalMessageInfo

func (m *CreateReleaseResponse) GetEntity() *Release {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteReleaseRequest struct {
	// The ID of the Release to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReleaseRequest) Reset()         { *m = DeleteReleaseRequest{} }
func (m *DeleteReleaseRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteReleaseRequest) ProtoMessage()    {}
func (*DeleteReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{86}
}

func (m *DeleteReleaseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReleaseRequest.Unmarshal(m, b)
}
func (m *DeleteReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReleaseRequest.Marshal(b, m, deterministic)
}
func (m *DeleteReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReleaseRequest.Merge(m, src)
}
func (m *DeleteReleaseRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteReleaseRequest.Size(m)
}
func (m *DeleteReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReleaseRequest proto.InternalMessageInfo

func (m *DeleteReleaseRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteReleaseResponse struct {
	// The version of the Release entity that was deleted
	Entity               *Release `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReleaseResponse) Reset()         { *m = DeleteReleaseResponse{} }
func (m *DeleteReleaseResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteReleaseResponse) ProtoMessage()    {}
func (*DeleteReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{87}
}

func (m *DeleteReleaseResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReleaseResponse.Unmarshal(m, b)
}
func (m *DeleteReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReleaseResponse.Marshal(b, m, deterministic)
}
func (m *DeleteReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReleaseResponse.Merge(m, src)
}
func (m *DeleteReleaseResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteReleaseResponse.Size(m)
}
func (m *DeleteReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReleaseResponse proto.InternalMessageInfo

func (m *DeleteReleaseResponse) GetEntity() *Release {
	if m != nil {
		return m.Entity
	}
	return nil
}

type RouteShader struct {
	// The key of the RouteShader
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	// The display name of the route shader, as it appears in the platform UI. This value is not using in any routing logic.
	DisplayName string `protobuf:"bytes,2,,name=displayName,proto3" json:"displayName,omitempty"`
	// The envelope KBPS up.
	EnvelopeKbpsUp int64 `protobuf:"varint,3,,name=envelopeKbpsUp,proto3" json:"envelopeKbpsUp,omitempty"`
	// The envelope KBPS down.
	EnvelopeKbpsDown int64 `protobuf:"varint,4,,name=envelopeKbpsDown,proto3" json:"envelopeKbpsDown,omitempty"`
	// The router mode. 0 = auto, 1 = force direct, 2 = force next, 3 = force route
	Mode int64 `protobuf:"varint,5,,name=mode,proto3" json:"mode,omitempty"`
	// The maximum bid price per GB.
	MaxPricePerGBNibblins int64 `protobuf:"varint,6,,name=maxPricePerGBNibblins,proto3" json:"maxPricePerGBNibblins,omitempty"`
	// The acceptable latency for the game.
	AcceptableLatency float64 `protobuf:"fixed64,8,,name=acceptableLatency,proto3" json:"acceptableLatency,omitempty"`
	//
	RttThreshold float64 `protobuf:"fixed64,9,,name=rttThreshold,proto3" json:"rttThreshold,omitempty"`
	//
	RttHysteresis float64 `protobuf:"fixed64,10,,name=rttHysteresis,proto3" json:"rttHysteresis,omitempty"`
	//
	RttVeto float64 `protobuf:"fixed64,11,,name=rttVeto,proto3" json:"rttVeto,omitempty"`
	//
	RttRouteSwitch float64 `protobuf:"fixed64,12,,name=rttRouteSwitch,proto3" json:"rttRouteSwitch,omitempty"`
	//
	YouOnlyLiveOnce bool `protobuf:"varint,13,,name=youOnlyLiveOnce,proto3" json:"youOnlyLiveOnce,omitempty"`
	//
	PacketLossSafety bool `protobuf:"varint,14,,name=packetLossSafety,proto3" json:"packetLossSafety,omitempty"`
	//
	PacketLossMultipath bool `protobuf:"varint,15,,name=packetLossMultipath,proto3" json:"packetLossMultipath,omitempty"`
	//
	JitterMultipath bool `protobuf:"varint,16,,name=jitterMultipath,proto3" json:"jitterMultipath,omitempty"`
	//
	RttMultipath         bool     `protobuf:"varint,17,,name=rttMultipath,proto3" json:"rttMultipath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteShader) Reset()         { *m = RouteShader{} }
func (m *RouteShader) String() string { return proto.CompactTextString(m) }
func (*RouteShader) ProtoMessage()    {}
func (*RouteShader) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{88}
}

func (m *RouteShader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteShader.Unmarshal(m, b)
}
func (m *RouteShader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteShader.Marshal(b, m, deterministic)
}
func (m *RouteShader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteShader.Merge(m, src)
}
func (m *RouteShader) XXX_Size() int {
	return xxx_messageInfo_RouteShader.Size(m)
}
func (m *RouteShader) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteShader.DiscardUnknown(m)
}

var xxx_messageInfo_RouteShader proto.InternalMessageInfo

func (m *RouteShader) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RouteShader) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *RouteShader) GetEnvelopeKbpsUp() int64 {
	if m != nil {
		return m.EnvelopeKbpsUp
	}
	return 0
}

func (m *RouteShader) GetEnvelopeKbpsDown() int64 {
	if m != nil {
		return m.EnvelopeKbpsDown
	}
	return 0
}

func (m *RouteShader) GetMode() int64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *RouteShader) GetMaxPricePerGBNibblins() int64 {
	if m != nil {
		return m.MaxPricePerGBNibblins
	}
	return 0
}

func (m *RouteShader) GetAcceptableLatency() float64 {
	if m != nil {
		return m.AcceptableLatency
	}
	return 0
}

func (m *RouteShader) GetRttThreshold() float64 {
	if m != nil {
		return m.RttThreshold
	}
	return 0
}

func (m *RouteShader) GetRttHysteresis() float64 {
	if m != nil {
		return m.RttHysteresis
	}
	return 0
}

func (m *RouteShader) GetRttVeto() float64 {
	if m != nil {
		return m.RttVeto
	}
	return 0
}

func (m *RouteShader) GetRttRouteSwitch() float64 {
	if m != nil {
		return m.RttRouteSwitch
	}
	return 0
}

func (m *RouteShader) GetYouOnlyLiveOnce() bool {
	if m != nil {
		return m.YouOnlyLiveOnce
	}
	return false
}

func (m *RouteShader) GetPacketLossSafety() bool {
	if m != nil {
		return m.PacketLossSafety
	}
	return false
}

func (m *RouteShader) GetPacketLossMultipath() bool {
	if m != nil {
		return m.PacketLossMultipath
	}
	return false
}

func (m *RouteShader) GetJitterMultipath() bool {
	if m != nil {
		return m.JitterMultipath
	}
	return false
}

func (m *RouteShader) GetRttMultipath() bool {
	if m != nil {
		return m.RttMultipath
	}
	return false
}

type ListRouteShaderRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRouteShaderRequest) Reset()         { *m = ListRouteShaderRequest{} }
func (m *ListRouteShaderRequest) String() string { return proto.CompactTextString(m) }
func (*ListRouteShaderRequest) ProtoMessage()    {}
func (*ListRouteShaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{89}
}

func (m *ListRouteShaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRouteShaderRequest.Unmarshal(m, b)
}
func (m *ListRouteShaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRouteShaderRequest.Marshal(b, m, deterministic)
}
func (m *ListRouteShaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRouteShaderRequest.Merge(m, src)
}
func (m *ListRouteShaderRequest) XXX_Size() int {
	return xxx_messageInfo_ListRouteShaderRequest.Size(m)
}
func (m *ListRouteShaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRouteShaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRouteShaderRequest proto.InternalMessageInfo

func (m *ListRouteShaderRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListRouteShaderRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListRouteShaderResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of RouteShaders
	Entities             []*RouteShader `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListRouteShaderResponse) Reset()         { *m = ListRouteShaderResponse{} }
func (m *ListRouteShaderResponse) String() string { return proto.CompactTextString(m) }
func (*ListRouteShaderResponse) ProtoMessage()    {}
func (*ListRouteShaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{90}
}

func (m *ListRouteShaderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRouteShaderResponse.Unmarshal(m, b)
}
func (m *ListRouteShaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRouteShaderResponse.Marshal(b, m, deterministic)
}
func (m *ListRouteShaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRouteShaderResponse.Merge(m, src)
}
func (m *ListRouteShaderResponse) XXX_Size() int {
	return xxx_messageInfo_ListRouteShaderResponse.Size(m)
}
func (m *ListRouteShaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRouteShaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRouteShaderResponse proto.InternalMessageInfo

func (m *ListRouteShaderResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListRouteShaderResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListRouteShaderResponse) GetEntities() []*RouteShader {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetRouteShaderRequest struct {
	// The ID of the RouteShader to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRouteShaderRequest) Reset()         { *m = GetRouteShaderRequest{} }
func (m *GetRouteShaderRequest) String() string { return proto.CompactTextString(m) }
func (*GetRouteShaderRequest) ProtoMessage()    {}
func (*GetRouteShaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{91}
}

func (m *GetRouteShaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRouteShaderRequest.Unmarshal(m, b)
}
func (m *GetRouteShaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRouteShaderRequest.Marshal(b, m, deterministic)
}
func (m *GetRouteShaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRouteShaderRequest.Merge(m, src)
}
func (m *GetRouteShaderRequest) XXX_Size() int {
	return xxx_messageInfo_GetRouteShaderRequest.Size(m)
}
func (m *GetRouteShaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRouteShaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRouteShaderRequest proto.InternalMessageInfo

func (m *GetRouteShaderRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetRouteShaderResponse struct {
	// The RouteShader that was fetched, or null if it didn't exist
	Entity               *RouteShader `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetRouteShaderResponse) Reset()         { *m = GetRouteShaderResponse{} }
func (m *GetRouteShaderResponse) String() string { return proto.CompactTextString(m) }
func (*GetRouteShaderResponse) ProtoMessage()    {}
func (*GetRouteShaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{92}
}

func (m *GetRouteShaderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRouteShaderResponse.Unmarshal(m, b)
}
func (m *GetRouteShaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRouteShaderResponse.Marshal(b, m, deterministic)
}
func (m *GetRouteShaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRouteShaderResponse.Merge(m, src)
}
func (m *GetRouteShaderResponse) XXX_Size() int {
	return xxx_messageInfo_GetRouteShaderResponse.Size(m)
}
func (m *GetRouteShaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRouteShaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRouteShaderResponse proto.InternalMessageInfo

func (m *GetRouteShaderResponse) GetEntity() *RouteShader {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchRouteShaderRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRouteShaderRequest) Reset()         { *m = WatchRouteShaderRequest{} }
func (m *WatchRouteShaderRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRouteShaderRequest) ProtoMessage()    {}
func (*WatchRouteShaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{93}
}

func (m *WatchRouteShaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRouteShaderRequest.Unmarshal(m, b)
}
func (m *WatchRouteShaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRouteShaderRequest.Marshal(b, m, deterministic)
}
func (m *WatchRouteShaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRouteShaderRequest.Merge(m, src)
}
func (m *WatchRouteShaderRequest) XXX_Size() int {
	return xxx_messageInfo_WatchRouteShaderRequest.Size(m)
}
func (m *WatchRouteShaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRouteShaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRouteShaderRequest proto.InternalMessageInfo

type WatchRouteShaderEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The RouteShader that was created, modified or deleted
	Entity *RouteShader `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRouteShaderEvent) Reset()         { *m = WatchRouteShaderEvent{} }
func (m *WatchRouteShaderEvent) String() string { return proto.CompactTextString(m) }
func (*WatchRouteShaderEvent) ProtoMessage()    {}
func (*WatchRouteShaderEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{94}
}

func (m *WatchRouteShaderEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRouteShaderEvent.Unmarshal(m, b)
}
func (m *WatchRouteShaderEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRouteShaderEvent.Marshal(b, m, deterministic)
}
func (m *WatchRouteShaderEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRouteShaderEvent.Merge(m, src)
}
func (m *WatchRouteShaderEvent) XXX_Size() int {
	return xxx_messageInfo_WatchRouteShaderEvent.Size(m)
}
func (m *WatchRouteShaderEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRouteShaderEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRouteShaderEvent proto.InternalMessageInfo

func (m *WatchRouteShaderEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchRouteShaderEvent) GetEntity() *RouteShader {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchRouteShaderEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchRouteShaderEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateRouteShaderRequest struct {
	// The RouteShader entity to update
	Entity               *RouteShader `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateRouteShaderRequest) Reset()         { *m = UpdateRouteShaderRequest{} }
func (m *UpdateRouteShaderRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRouteShaderRequest) ProtoMessage()    {}
func (*UpdateRouteShaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{95}
}

func (m *UpdateRouteShaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRouteShaderRequest.Unmarshal(m, b)
}
func (m *UpdateRouteShaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRouteShaderRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRouteShaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRouteShaderRequest.Merge(m, src)
}
func (m *UpdateRouteShaderRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRouteShaderRequest.Size(m)
}
func (m *UpdateRouteShaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRouteShaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRouteShaderRequest proto.InternalMessageInfo

func (m *UpdateRouteShaderRequest) GetEntity() *RouteShader {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateRouteShaderResponse struct {
	// The stored version of the RouteShader entity
	Entity               *RouteShader `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UpdateRouteShaderResponse) Reset()         { *m = UpdateRouteShaderResponse{} }
func (m *UpdateRouteShaderResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRouteShaderResponse) ProtoMessage()    {}
func (*UpdateRouteShaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{96}
}

func (m *UpdateRouteShaderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRouteShaderResponse.Unmarshal(m, b)
}
func (m *UpdateRouteShaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRouteShaderResponse.Marshal(b, m, deterministic)
}
func (m *UpdateRouteShaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRouteShaderResponse.Merge(m, src)
}
func (m *UpdateRouteShaderResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateRouteShaderResponse.Size(m)
}
func (m *UpdateRouteShaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRouteShaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRouteShaderResponse proto.InternalMessageInfo

func (m *UpdateRouteShaderResponse) GetEntity() *RouteShader {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateRouteShaderRequest struct {
	// The RouteShader entity to create; if RouteShader uses auto-generated IDs, the ID field is ignored
	Entity               *RouteShader `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateRouteShaderRequest) Reset()         { *m = CreateRouteShaderRequest{} }
func (m *CreateRouteShaderRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRouteShaderRequest) ProtoMessage()    {}
func (*CreateRouteShaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{97}
}

func (m *CreateRouteShaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRouteShaderRequest.Unmarshal(m, b)
}
func (m *CreateRouteShaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRouteShaderRequest.Marshal(b, m, deterministic)
}
func (m *CreateRouteShaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRouteShaderRequest.Merge(m, src)
}
func (m *CreateRouteShaderRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRouteShaderRequest.Size(m)
}
func (m *CreateRouteShaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRouteShaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRouteShaderRequest proto.InternalMessageInfo

func (m *CreateRouteShaderRequest) GetEntity() *RouteShader {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateRouteShaderResponse struct {
	// The stored version of the RouteShader entity
	Entity               *RouteShader `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CreateRouteShaderResponse) Reset()         { *m = CreateRouteShaderResponse{} }
func (m *CreateRouteShaderResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRouteShaderResponse) ProtoMessage()    {}
func (*CreateRouteShaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{98}
}

func (m *CreateRouteShaderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRouteShaderResponse.Unmarshal(m, b)
}
func (m *CreateRouteShaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRouteShaderResponse.Marshal(b, m, deterministic)
}
func (m *CreateRouteShaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRouteShaderResponse.Merge(m, src)
}
func (m *CreateRouteShaderResponse) XXX_Size() int {
	return xxx_messageInfo_CreateRouteShaderResponse.Size(m)
}
func (m *CreateRouteShaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRouteShaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRouteShaderResponse proto.InternalMessageInfo

func (m *CreateRouteShaderResponse) GetEntity() *RouteShader {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteRouteShaderRequest struct {
	// The ID of the RouteShader to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRouteShaderRequest) Reset()         { *m = DeleteRouteShaderRequest{} }
func (m *DeleteRouteShaderRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRouteShaderRequest) ProtoMessage()    {}
func (*DeleteRouteShaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{99}
}

func (m *DeleteRouteShaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRouteShaderRequest.Unmarshal(m, b)
}
func (m *DeleteRouteShaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRouteShaderRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRouteShaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRouteShaderRequest.Merge(m, src)
}
func (m *DeleteRouteShaderRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRouteShaderRequest.Size(m)
}
func (m *DeleteRouteShaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRouteShaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRouteShaderRequest proto.InternalMessageInfo

func (m *DeleteRouteShaderRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteRouteShaderResponse struct {
	// The version of the RouteShader entity that was deleted
	Entity               *RouteShader `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *DeleteRouteShaderResponse) Reset()         { *m = DeleteRouteShaderResponse{} }
func (m *DeleteRouteShaderResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRouteShaderResponse) ProtoMessage()    {}
func (*DeleteRouteShaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{100}
}

func (m *DeleteRouteShaderResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRouteShaderResponse.Unmarshal(m, b)
}
func (m *DeleteRouteShaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRouteShaderResponse.Marshal(b, m, deterministic)
}
func (m *DeleteRouteShaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRouteShaderResponse.Merge(m, src)
}
func (m *DeleteRouteShaderResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteRouteShaderResponse.Size(m)
}
func (m *DeleteRouteShaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRouteShaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRouteShaderResponse proto.InternalMessageInfo

func (m *DeleteRouteShaderResponse) GetEntity() *RouteShader {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Datacenter struct {
	// The key of the Datacenter
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	//
	Name string `protobuf:"bytes,2,,name=name,proto3" json:"name,omitempty"`
	//
	Latitude float64 `protobuf:"fixed64,3,,name=latitude,proto3" json:"latitude,omitempty"`
	//
	Longitude float64 `protobuf:"fixed64,4,,name=longitude,proto3" json:"longitude,omitempty"`
	// The physical street address of the datacenter, or the closest location known (e.g. just city + country if we don't know the street address).
	StreetAddress string `protobuf:"bytes,5,,name=streetAddress,proto3" json:"streetAddress,omitempty"`
	// Another name for this datacenter such as a reseller's name.
	NameAlias string `protobuf:"bytes,7,,name=name_alias,json=nameAlias,proto3" json:"name_alias,omitempty"`
	// If not enabled, this datacenter will be ignored by server-ingress.
	Enabled              bool     `protobuf:"varint,8,,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Datacenter) Reset()         { *m = Datacenter{} }
func (m *Datacenter) String() string { return proto.CompactTextString(m) }
func (*Datacenter) ProtoMessage()    {}
func (*Datacenter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{101}
}

func (m *Datacenter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Datacenter.Unmarshal(m, b)
}
func (m *Datacenter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Datacenter.Marshal(b, m, deterministic)
}
func (m *Datacenter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Datacenter.Merge(m, src)
}
func (m *Datacenter) XXX_Size() int {
	return xxx_messageInfo_Datacenter.Size(m)
}
func (m *Datacenter) XXX_DiscardUnknown() {
	xxx_messageInfo_Datacenter.DiscardUnknown(m)
}

var xxx_messageInfo_Datacenter proto.InternalMessageInfo

func (m *Datacenter) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Datacenter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Datacenter) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Datacenter) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Datacenter) GetStreetAddress() string {
	if m != nil {
		return m.StreetAddress
	}
	return ""
}

func (m *Datacenter) GetNameAlias() string {
	if m != nil {
		return m.NameAlias
	}
	return ""
}

func (m *Datacenter) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type ListDatacenterRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDatacenterRequest) Reset()         { *m = ListDatacenterRequest{} }
func (m *ListDatacenterRequest) String() string { return proto.CompactTextString(m) }
func (*ListDatacenterRequest) ProtoMessage()    {}
func (*ListDatacenterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{102}
}

func (m *ListDatacenterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDatacenterRequest.Unmarshal(m, b)
}
func (m *ListDatacenterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDatacenterRequest.Marshal(b, m, deterministic)
}
func (m *ListDatacenterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDatacenterRequest.Merge(m, src)
}
func (m *ListDatacenterRequest) XXX_Size() int {
	return xxx_messageInfo_ListDatacenterRequest.Size(m)
}
func (m *ListDatacenterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDatacenterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDatacenterRequest proto.InternalMessageInfo

func (m *ListDatacenterRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListDatacenterRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListDatacenterResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of Datacenters
	Entities             []*Datacenter `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ListDatacenterResponse) Reset()         { *m = ListDatacenterResponse{} }
func (m *ListDatacenterResponse) String() string { return proto.CompactTextString(m) }
func (*ListDatacenterResponse) ProtoMessage()    {}
func (*ListDatacenterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{103}
}

func (m *ListDatacenterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDatacenterResponse.Unmarshal(m, b)
}
func (m *ListDatacenterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDatacenterResponse.Marshal(b, m, deterministic)
}
func (m *ListDatacenterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDatacenterResponse.Merge(m, src)
}
func (m *ListDatacenterResponse) XXX_Size() int {
	return xxx_messageInfo_ListDatacenterResponse.Size(m)
}
func (m *ListDatacenterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDatacenterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDatacenterResponse proto.InternalMessageInfo

func (m *ListDatacenterResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListDatacenterResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListDatacenterResponse) GetEntities() []*Datacenter {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetDatacenterRequest struct {
	// The ID of the Datacenter to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDatacenterRequest) Reset()         { *m = GetDatacenterRequest{} }
func (m *GetDatacenterRequest) String() string { return proto.CompactTextString(m) }
func (*GetDatacenterRequest) ProtoMessage()    {}
func (*GetDatacenterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{104}
}

func (m *GetDatacenterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDatacenterRequest.Unmarshal(m, b)
}
func (m *GetDatacenterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDatacenterRequest.Marshal(b, m, deterministic)
}
func (m *GetDatacenterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDatacenterRequest.Merge(m, src)
}
func (m *GetDatacenterRequest) XXX_Size() int {
	return xxx_messageInfo_GetDatacenterRequest.Size(m)
}
func (m *GetDatacenterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDatacenterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetDatacenterRequest proto.InternalMessageInfo

func (m *GetDatacenterRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetDatacenterResponse struct {
	// The Datacenter that was fetched, or null if it didn't exist
	Entity               *Datacenter `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetDatacenterResponse) Reset()         { *m = GetDatacenterResponse{} }
func (m *GetDatacenterResponse) String() string { return proto.CompactTextString(m) }
func (*GetDatacenterResponse) ProtoMessage()    {}
func (*GetDatacenterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{105}
}

func (m *GetDatacenterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetDatacenterResponse.Unmarshal(m, b)
}
func (m *GetDatacenterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetDatacenterResponse.Marshal(b, m, deterministic)
}
func (m *GetDatacenterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDatacenterResponse.Merge(m, src)
}
func (m *GetDatacenterResponse) XXX_Size() int {
	return xxx_messageInfo_GetDatacenterResponse.Size(m)
}
func (m *GetDatacenterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDatacenterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDatacenterResponse proto.InternalMessageInfo

func (m *GetDatacenterResponse) GetEntity() *Datacenter {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchDatacenterRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchDatacenterRequest) Reset()         { *m = WatchDatacenterRequest{} }
func (m *WatchDatacenterRequest) String() string { return proto.CompactTextString(m) }
func (*WatchDatacenterRequest) ProtoMessage()    {}
func (*WatchDatacenterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{106}
}

func (m *WatchDatacenterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchDatacenterRequest.Unmarshal(m, b)
}
func (m *WatchDatacenterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchDatacenterRequest.Marshal(b, m, deterministic)
}
func (m *WatchDatacenterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchDatacenterRequest.Merge(m, src)
}
func (m *WatchDatacenterRequest) XXX_Size() int {
	return xxx_messageInfo_WatchDatacenterRequest.Size(m)
}
func (m *WatchDatacenterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchDatacenterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchDatacenterRequest proto.InternalMessageInfo

type WatchDatacenterEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The Datacenter that was created, modified or deleted
	Entity *Datacenter `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchDatacenterEvent) Reset()         { *m = WatchDatacenterEvent{} }
func (m *WatchDatacenterEvent) String() string { return proto.CompactTextString(m) }
func (*WatchDatacenterEvent) ProtoMessage()    {}
func (*WatchDatacenterEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{107}
}

func (m *WatchDatacenterEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchDatacenterEvent.Unmarshal(m, b)
}
func (m *WatchDatacenterEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchDatacenterEvent.Marshal(b, m, deterministic)
}
func (m *WatchDatacenterEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchDatacenterEvent.Merge(m, src)
}
func (m *WatchDatacenterEvent) XXX_Size() int {
	return xxx_messageInfo_WatchDatacenterEvent.Size(m)
}
func (m *WatchDatacenterEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchDatacenterEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchDatacenterEvent proto.InternalMessageInfo

func (m *WatchDatacenterEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchDatacenterEvent) GetEntity() *Datacenter {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchDatacenterEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchDatacenterEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateDatacenterRequest struct {
	// The Datacenter entity to update
	Entity               *Datacenter `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateDatacenterRequest) Reset()         { *m = UpdateDatacenterRequest{} }
func (m *UpdateDatacenterRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateDatacenterRequest) ProtoMessage()    {}
func (*UpdateDatacenterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{108}
}

func (m *UpdateDatacenterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDatacenterRequest.Unmarshal(m, b)
}
func (m *UpdateDatacenterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDatacenterRequest.Marshal(b, m, deterministic)
}
func (m *UpdateDatacenterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDatacenterRequest.Merge(m, src)
}
func (m *UpdateDatacenterRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateDatacenterRequest.Size(m)
}
func (m *UpdateDatacenterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDatacenterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDatacenterRequest proto.InternalMessageInfo

func (m *UpdateDatacenterRequest) GetEntity() *Datacenter {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateDatacenterResponse struct {
	// The stored version of the Datacenter entity
	Entity               *Datacenter `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateDatacenterResponse) Reset()         { *m = UpdateDatacenterResponse{} }
func (m *UpdateDatacenterResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateDatacenterResponse) ProtoMessage()    {}
func (*UpdateDatacenterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{109}
}

func (m *UpdateDatacenterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateDatacenterResponse.Unmarshal(m, b)
}
func (m *UpdateDatacenterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateDatacenterResponse.Marshal(b, m, deterministic)
}
func (m *UpdateDatacenterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateDatacenterResponse.Merge(m, src)
}
func (m *UpdateDatacenterResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateDatacenterResponse.Size(m)
}
func (m *UpdateDatacenterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateDatacenterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateDatacenterResponse proto.InternalMessageInfo

func (m *UpdateDatacenterResponse) GetEntity() *Datacenter {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateDatacenterRequest struct {
	// The Datacenter entity to create; if Datacenter uses auto-generated IDs, the ID field is ignored
	Entity               *Datacenter `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateDatacenterRequest) Reset()         { *m = CreateDatacenterRequest{} }
func (m *CreateDatacenterRequest) String() string { return proto.CompactTextString(m) }
func (*CreateDatacenterRequest) ProtoMessage()    {}
func (*CreateDatacenterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{110}
}

func (m *CreateDatacenterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDatacenterRequest.Unmarshal(m, b)
}
func (m *CreateDatacenterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDatacenterRequest.Marshal(b, m, deterministic)
}
func (m *CreateDatacenterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatacenterRequest.Merge(m, src)
}
func (m *CreateDatacenterRequest) XXX_Size() int {
	return xxx_messageInfo_CreateDatacenterRequest.Size(m)
}
func (m *CreateDatacenterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatacenterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatacenterRequest proto.InternalMessageInfo

func (m *CreateDatacenterRequest) GetEntity() *Datacenter {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateDatacenterResponse struct {
	// The stored version of the Datacenter entity
	Entity               *Datacenter `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateDatacenterResponse) Reset()         { *m = CreateDatacenterResponse{} }
func (m *CreateDatacenterResponse) String() string { return proto.CompactTextString(m) }
func (*CreateDatacenterResponse) ProtoMessage()    {}
func (*CreateDatacenterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{111}
}

func (m *CreateDatacenterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateDatacenterResponse.Unmarshal(m, b)
}
func (m *CreateDatacenterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateDatacenterResponse.Marshal(b, m, deterministic)
}
func (m *CreateDatacenterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDatacenterResponse.Merge(m, src)
}
func (m *CreateDatacenterResponse) XXX_Size() int {
	return xxx_messageInfo_CreateDatacenterResponse.Size(m)
}
func (m *CreateDatacenterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDatacenterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDatacenterResponse proto.InternalMessageInfo

func (m *CreateDatacenterResponse) GetEntity() *Datacenter {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteDatacenterRequest struct {
	// The ID of the Datacenter to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteDatacenterRequest) Reset()         { *m = DeleteDatacenterRequest{} }
func (m *DeleteDatacenterRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteDatacenterRequest) ProtoMessage()    {}
func (*DeleteDatacenterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{112}
}

func (m *DeleteDatacenterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDatacenterRequest.Unmarshal(m, b)
}
func (m *DeleteDatacenterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDatacenterRequest.Marshal(b, m, deterministic)
}
func (m *DeleteDatacenterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDatacenterRequest.Merge(m, src)
}
func (m *DeleteDatacenterRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteDatacenterRequest.Size(m)
}
func (m *DeleteDatacenterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDatacenterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDatacenterRequest proto.InternalMessageInfo

func (m *DeleteDatacenterRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteDatacenterResponse struct {
	// The version of the Datacenter entity that was deleted
	Entity               *Datacenter `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeleteDatacenterResponse) Reset()         { *m = DeleteDatacenterResponse{} }
func (m *DeleteDatacenterResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteDatacenterResponse) ProtoMessage()    {}
func (*DeleteDatacenterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{113}
}

func (m *DeleteDatacenterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteDatacenterResponse.Unmarshal(m, b)
}
func (m *DeleteDatacenterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteDatacenterResponse.Marshal(b, m, deterministic)
}
func (m *DeleteDatacenterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteDatacenterResponse.Merge(m, src)
}
func (m *DeleteDatacenterResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteDatacenterResponse.Size(m)
}
func (m *DeleteDatacenterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteDatacenterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteDatacenterResponse proto.InternalMessageInfo

func (m *DeleteDatacenterResponse) GetEntity() *Datacenter {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Buyer struct {
	// The key of the Buyer
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	//
	Name string `protobuf:"bytes,3,,name=name,proto3" json:"name,omitempty"`
	//
	Active bool `protobuf:"varint,4,,name=active,proto3" json:"active,omitempty"`
	//
	HasPlatformPS4Access bool `protobuf:"varint,10,,name=hasPlatformPS4Access,proto3" json:"hasPlatformPS4Access,omitempty"`
	//
	HasPlatformXBoxOneAccess bool `protobuf:"varint,11,,name=hasPlatformXBoxOneAccess,proto3" json:"hasPlatformXBoxOneAccess,omitempty"`
	//
	HasPlatformSwitchAccess bool `protobuf:"varint,12,,name=hasPlatformSwitchAccess,proto3" json:"hasPlatformSwitchAccess,omitempty"`
	//
	MaxMonthlySpendNibblins int64 `protobuf:"varint,15,,name=maxMonthlySpendNibblins,proto3" json:"maxMonthlySpendNibblins,omitempty"`
	// If true, this buyer will appear under the "Customers" tab of the platform.
	ShowInBuyerList bool `protobuf:"varint,16,,name=showInBuyerList,proto3" json:"showInBuyerList,omitempty"`
	// Is this customer live and running sessions over Network Next? (drives whether they see anonimized sessions as preview, or just their own sessions)
	IsLiveCustomer bool `protobuf:"varint,17,,name=isLiveCustomer,proto3" json:"isLiveCustomer,omitempty"`
	// The public key ID for SDK v3. To change this value, impersonate the customer in the platform and use the UI.
	SdkVersion3PublicKeyId uint64 `protobuf:"varint,20,,name=sdkVersion3PublicKeyId,proto3" json:"sdkVersion3PublicKeyId,omitempty"`
	// The actual content of the public key for SDK v3. To change this value, impersonate the customer in the platform and use the UI.
	SdkVersion3PublicKeyData []byte   `protobuf:"bytes,21,,name=sdkVersion3PublicKeyData,proto3" json:"sdkVersion3PublicKeyData,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *Buyer) Reset()         { *m = Buyer{} }
func (m *Buyer) String() string { return proto.CompactTextString(m) }
func (*Buyer) ProtoMessage()    {}
func (*Buyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{114}
}

func (m *Buyer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Buyer.Unmarshal(m, b)
}
func (m *Buyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Buyer.Marshal(b, m, deterministic)
}
func (m *Buyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Buyer.Merge(m, src)
}
func (m *Buyer) XXX_Size() int {
	return xxx_messageInfo_Buyer.Size(m)
}
func (m *Buyer) XXX_DiscardUnknown() {
	xxx_messageInfo_Buyer.DiscardUnknown(m)
}

var xxx_messageInfo_Buyer proto.InternalMessageInfo

func (m *Buyer) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Buyer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Buyer) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Buyer) GetHasPlatformPS4Access() bool {
	if m != nil {
		return m.HasPlatformPS4Access
	}
	return false
}

func (m *Buyer) GetHasPlatformXBoxOneAccess() bool {
	if m != nil {
		return m.HasPlatformXBoxOneAccess
	}
	return false
}

func (m *Buyer) GetHasPlatformSwitchAccess() bool {
	if m != nil {
		return m.HasPlatformSwitchAccess
	}
	return false
}

func (m *Buyer) GetMaxMonthlySpendNibblins() int64 {
	if m != nil {
		return m.MaxMonthlySpendNibblins
	}
	return 0
}

func (m *Buyer) GetShowInBuyerList() bool {
	if m != nil {
		return m.ShowInBuyerList
	}
	return false
}

func (m *Buyer) GetIsLiveCustomer() bool {
	if m != nil {
		return m.IsLiveCustomer
	}
	return false
}

func (m *Buyer) GetSdkVersion3PublicKeyId() uint64 {
	if m != nil {
		return m.SdkVersion3PublicKeyId
	}
	return 0
}

func (m *Buyer) GetSdkVersion3PublicKeyData() []byte {
	if m != nil {
		return m.SdkVersion3PublicKeyData
	}
	return nil
}

type ListBuyerRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBuyerRequest) Reset()         { *m = ListBuyerRequest{} }
func (m *ListBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*ListBuyerRequest) ProtoMessage()    {}
func (*ListBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{115}
}

func (m *ListBuyerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBuyerRequest.Unmarshal(m, b)
}
func (m *ListBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBuyerRequest.Marshal(b, m, deterministic)
}
func (m *ListBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBuyerRequest.Merge(m, src)
}
func (m *ListBuyerRequest) XXX_Size() int {
	return xxx_messageInfo_ListBuyerRequest.Size(m)
}
func (m *ListBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListBuyerRequest proto.InternalMessageInfo

func (m *ListBuyerRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListBuyerRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListBuyerResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of Buyers
	Entities             []*Buyer `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBuyerResponse) Reset()         { *m = ListBuyerResponse{} }
func (m *ListBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*ListBuyerResponse) ProtoMessage()    {}
func (*ListBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{116}
}

func (m *ListBuyerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBuyerResponse.Unmarshal(m, b)
}
func (m *ListBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBuyerResponse.Marshal(b, m, deterministic)
}
func (m *ListBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBuyerResponse.Merge(m, src)
}
func (m *ListBuyerResponse) XXX_Size() int {
	return xxx_messageInfo_ListBuyerResponse.Size(m)
}
func (m *ListBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListBuyerResponse proto.InternalMessageInfo

func (m *ListBuyerResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListBuyerResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListBuyerResponse) GetEntities() []*Buyer {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetBuyerRequest struct {
	// The ID of the Buyer to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBuyerRequest) Reset()         { *m = GetBuyerRequest{} }
func (m *GetBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*GetBuyerRequest) ProtoMessage()    {}
func (*GetBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{117}
}

func (m *GetBuyerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBuyerRequest.Unmarshal(m, b)
}
func (m *GetBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBuyerRequest.Marshal(b, m, deterministic)
}
func (m *GetBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuyerRequest.Merge(m, src)
}
func (m *GetBuyerRequest) XXX_Size() int {
	return xxx_messageInfo_GetBuyerRequest.Size(m)
}
func (m *GetBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuyerRequest proto.InternalMessageInfo

func (m *GetBuyerRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetBuyerResponse struct {
	// The Buyer that was fetched, or null if it didn't exist
	Entity               *Buyer   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBuyerResponse) Reset()         { *m = GetBuyerResponse{} }
func (m *GetBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*GetBuyerResponse) ProtoMessage()    {}
func (*GetBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{118}
}

func (m *GetBuyerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBuyerResponse.Unmarshal(m, b)
}
func (m *GetBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBuyerResponse.Marshal(b, m, deterministic)
}
func (m *GetBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBuyerResponse.Merge(m, src)
}
func (m *GetBuyerResponse) XXX_Size() int {
	return xxx_messageInfo_GetBuyerResponse.Size(m)
}
func (m *GetBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBuyerResponse proto.InternalMessageInfo

func (m *GetBuyerResponse) GetEntity() *Buyer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchBuyerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBuyerRequest) Reset()         { *m = WatchBuyerRequest{} }
func (m *WatchBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*WatchBuyerRequest) ProtoMessage()    {}
func (*WatchBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{119}
}

func (m *WatchBuyerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBuyerRequest.Unmarshal(m, b)
}
func (m *WatchBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBuyerRequest.Marshal(b, m, deterministic)
}
func (m *WatchBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBuyerRequest.Merge(m, src)
}
func (m *WatchBuyerRequest) XXX_Size() int {
	return xxx_messageInfo_WatchBuyerRequest.Size(m)
}
func (m *WatchBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBuyerRequest proto.InternalMessageInfo

type WatchBuyerEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The Buyer that was created, modified or deleted
	Entity *Buyer `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBuyerEvent) Reset()         { *m = WatchBuyerEvent{} }
func (m *WatchBuyerEvent) String() string { return proto.CompactTextString(m) }
func (*WatchBuyerEvent) ProtoMessage()    {}
func (*WatchBuyerEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{120}
}

func (m *WatchBuyerEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBuyerEvent.Unmarshal(m, b)
}
func (m *WatchBuyerEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBuyerEvent.Marshal(b, m, deterministic)
}
func (m *WatchBuyerEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBuyerEvent.Merge(m, src)
}
func (m *WatchBuyerEvent) XXX_Size() int {
	return xxx_messageInfo_WatchBuyerEvent.Size(m)
}
func (m *WatchBuyerEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBuyerEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBuyerEvent proto.InternalMessageInfo

func (m *WatchBuyerEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchBuyerEvent) GetEntity() *Buyer {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchBuyerEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchBuyerEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateBuyerRequest struct {
	// The Buyer entity to update
	Entity               *Buyer   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBuyerRequest) Reset()         { *m = UpdateBuyerRequest{} }
func (m *UpdateBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateBuyerRequest) ProtoMessage()    {}
func (*UpdateBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{121}
}

func (m *UpdateBuyerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuyerRequest.Unmarshal(m, b)
}
func (m *UpdateBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuyerRequest.Marshal(b, m, deterministic)
}
func (m *UpdateBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuyerRequest.Merge(m, src)
}
func (m *UpdateBuyerRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateBuyerRequest.Size(m)
}
func (m *UpdateBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuyerRequest proto.InternalMessageInfo

func (m *UpdateBuyerRequest) GetEntity() *Buyer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateBuyerResponse struct {
	// The stored version of the Buyer entity
	Entity               *Buyer   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateBuyerResponse) Reset()         { *m = UpdateBuyerResponse{} }
func (m *UpdateBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateBuyerResponse) ProtoMessage()    {}
func (*UpdateBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{122}
}

func (m *UpdateBuyerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateBuyerResponse.Unmarshal(m, b)
}
func (m *UpdateBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateBuyerResponse.Marshal(b, m, deterministic)
}
func (m *UpdateBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateBuyerResponse.Merge(m, src)
}
func (m *UpdateBuyerResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateBuyerResponse.Size(m)
}
func (m *UpdateBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateBuyerResponse proto.InternalMessageInfo

func (m *UpdateBuyerResponse) GetEntity() *Buyer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateBuyerRequest struct {
	// The Buyer entity to create; if Buyer uses auto-generated IDs, the ID field is ignored
	Entity               *Buyer   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBuyerRequest) Reset()         { *m = CreateBuyerRequest{} }
func (m *CreateBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBuyerRequest) ProtoMessage()    {}
func (*CreateBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{123}
}

func (m *CreateBuyerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBuyerRequest.Unmarshal(m, b)
}
func (m *CreateBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBuyerRequest.Marshal(b, m, deterministic)
}
func (m *CreateBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBuyerRequest.Merge(m, src)
}
func (m *CreateBuyerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBuyerRequest.Size(m)
}
func (m *CreateBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBuyerRequest proto.InternalMessageInfo

func (m *CreateBuyerRequest) GetEntity() *Buyer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateBuyerResponse struct {
	// The stored version of the Buyer entity
	Entity               *Buyer   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBuyerResponse) Reset()         { *m = CreateBuyerResponse{} }
func (m *CreateBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateBuyerResponse) ProtoMessage()    {}
func (*CreateBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{124}
}

func (m *CreateBuyerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBuyerResponse.Unmarshal(m, b)
}
func (m *CreateBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBuyerResponse.Marshal(b, m, deterministic)
}
func (m *CreateBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBuyerResponse.Merge(m, src)
}
func (m *CreateBuyerResponse) XXX_Size() int {
	return xxx_messageInfo_CreateBuyerResponse.Size(m)
}
func (m *CreateBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBuyerResponse proto.InternalMessageInfo

func (m *CreateBuyerResponse) GetEntity() *Buyer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteBuyerRequest struct {
	// The ID of the Buyer to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBuyerRequest) Reset()         { *m = DeleteBuyerRequest{} }
func (m *DeleteBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteBuyerRequest) ProtoMessage()    {}
func (*DeleteBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{125}
}

func (m *DeleteBuyerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBuyerRequest.Unmarshal(m, b)
}
func (m *DeleteBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBuyerRequest.Marshal(b, m, deterministic)
}
func (m *DeleteBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBuyerRequest.Merge(m, src)
}
func (m *DeleteBuyerRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteBuyerRequest.Size(m)
}
func (m *DeleteBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBuyerRequest proto.InternalMessageInfo

func (m *DeleteBuyerRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteBuyerResponse struct {
	// The version of the Buyer entity that was deleted
	Entity               *Buyer   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteBuyerResponse) Reset()         { *m = DeleteBuyerResponse{} }
func (m *DeleteBuyerResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteBuyerResponse) ProtoMessage()    {}
func (*DeleteBuyerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{126}
}

func (m *DeleteBuyerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteBuyerResponse.Unmarshal(m, b)
}
func (m *DeleteBuyerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteBuyerResponse.Marshal(b, m, deterministic)
}
func (m *DeleteBuyerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteBuyerResponse.Merge(m, src)
}
func (m *DeleteBuyerResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteBuyerResponse.Size(m)
}
func (m *DeleteBuyerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteBuyerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteBuyerResponse proto.InternalMessageInfo

func (m *DeleteBuyerResponse) GetEntity() *Buyer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Migration struct {
	// The key of the Migration
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Migration) Reset()         { *m = Migration{} }
func (m *Migration) String() string { return proto.CompactTextString(m) }
func (*Migration) ProtoMessage()    {}
func (*Migration) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{127}
}

func (m *Migration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Migration.Unmarshal(m, b)
}
func (m *Migration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Migration.Marshal(b, m, deterministic)
}
func (m *Migration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Migration.Merge(m, src)
}
func (m *Migration) XXX_Size() int {
	return xxx_messageInfo_Migration.Size(m)
}
func (m *Migration) XXX_DiscardUnknown() {
	xxx_messageInfo_Migration.DiscardUnknown(m)
}

var xxx_messageInfo_Migration proto.InternalMessageInfo

func (m *Migration) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type ListMigrationRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMigrationRequest) Reset()         { *m = ListMigrationRequest{} }
func (m *ListMigrationRequest) String() string { return proto.CompactTextString(m) }
func (*ListMigrationRequest) ProtoMessage()    {}
func (*ListMigrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{128}
}

func (m *ListMigrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMigrationRequest.Unmarshal(m, b)
}
func (m *ListMigrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMigrationRequest.Marshal(b, m, deterministic)
}
func (m *ListMigrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMigrationRequest.Merge(m, src)
}
func (m *ListMigrationRequest) XXX_Size() int {
	return xxx_messageInfo_ListMigrationRequest.Size(m)
}
func (m *ListMigrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMigrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMigrationRequest proto.InternalMessageInfo

func (m *ListMigrationRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListMigrationRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListMigrationResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of Migrations
	Entities             []*Migration `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ListMigrationResponse) Reset()         { *m = ListMigrationResponse{} }
func (m *ListMigrationResponse) String() string { return proto.CompactTextString(m) }
func (*ListMigrationResponse) ProtoMessage()    {}
func (*ListMigrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{129}
}

func (m *ListMigrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMigrationResponse.Unmarshal(m, b)
}
func (m *ListMigrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMigrationResponse.Marshal(b, m, deterministic)
}
func (m *ListMigrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMigrationResponse.Merge(m, src)
}
func (m *ListMigrationResponse) XXX_Size() int {
	return xxx_messageInfo_ListMigrationResponse.Size(m)
}
func (m *ListMigrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMigrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMigrationResponse proto.InternalMessageInfo

func (m *ListMigrationResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListMigrationResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListMigrationResponse) GetEntities() []*Migration {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetMigrationRequest struct {
	// The ID of the Migration to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMigrationRequest) Reset()         { *m = GetMigrationRequest{} }
func (m *GetMigrationRequest) String() string { return proto.CompactTextString(m) }
func (*GetMigrationRequest) ProtoMessage()    {}
func (*GetMigrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{130}
}

func (m *GetMigrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMigrationRequest.Unmarshal(m, b)
}
func (m *GetMigrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMigrationRequest.Marshal(b, m, deterministic)
}
func (m *GetMigrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMigrationRequest.Merge(m, src)
}
func (m *GetMigrationRequest) XXX_Size() int {
	return xxx_messageInfo_GetMigrationRequest.Size(m)
}
func (m *GetMigrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMigrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMigrationRequest proto.InternalMessageInfo

func (m *GetMigrationRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetMigrationResponse struct {
	// The Migration that was fetched, or null if it didn't exist
	Entity               *Migration `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetMigrationResponse) Reset()         { *m = GetMigrationResponse{} }
func (m *GetMigrationResponse) String() string { return proto.CompactTextString(m) }
func (*GetMigrationResponse) ProtoMessage()    {}
func (*GetMigrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{131}
}

func (m *GetMigrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMigrationResponse.Unmarshal(m, b)
}
func (m *GetMigrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMigrationResponse.Marshal(b, m, deterministic)
}
func (m *GetMigrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMigrationResponse.Merge(m, src)
}
func (m *GetMigrationResponse) XXX_Size() int {
	return xxx_messageInfo_GetMigrationResponse.Size(m)
}
func (m *GetMigrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMigrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMigrationResponse proto.InternalMessageInfo

func (m *GetMigrationResponse) GetEntity() *Migration {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchMigrationRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchMigrationRequest) Reset()         { *m = WatchMigrationRequest{} }
func (m *WatchMigrationRequest) String() string { return proto.CompactTextString(m) }
func (*WatchMigrationRequest) ProtoMessage()    {}
func (*WatchMigrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{132}
}

func (m *WatchMigrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchMigrationRequest.Unmarshal(m, b)
}
func (m *WatchMigrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchMigrationRequest.Marshal(b, m, deterministic)
}
func (m *WatchMigrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchMigrationRequest.Merge(m, src)
}
func (m *WatchMigrationRequest) XXX_Size() int {
	return xxx_messageInfo_WatchMigrationRequest.Size(m)
}
func (m *WatchMigrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchMigrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchMigrationRequest proto.InternalMessageInfo

type WatchMigrationEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The Migration that was created, modified or deleted
	Entity *Migration `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchMigrationEvent) Reset()         { *m = WatchMigrationEvent{} }
func (m *WatchMigrationEvent) String() string { return proto.CompactTextString(m) }
func (*WatchMigrationEvent) ProtoMessage()    {}
func (*WatchMigrationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{133}
}

func (m *WatchMigrationEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchMigrationEvent.Unmarshal(m, b)
}
func (m *WatchMigrationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchMigrationEvent.Marshal(b, m, deterministic)
}
func (m *WatchMigrationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchMigrationEvent.Merge(m, src)
}
func (m *WatchMigrationEvent) XXX_Size() int {
	return xxx_messageInfo_WatchMigrationEvent.Size(m)
}
func (m *WatchMigrationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchMigrationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchMigrationEvent proto.InternalMessageInfo

func (m *WatchMigrationEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchMigrationEvent) GetEntity() *Migration {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchMigrationEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchMigrationEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateMigrationRequest struct {
	// The Migration entity to update
	Entity               *Migration `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateMigrationRequest) Reset()         { *m = UpdateMigrationRequest{} }
func (m *UpdateMigrationRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMigrationRequest) ProtoMessage()    {}
func (*UpdateMigrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{134}
}

func (m *UpdateMigrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMigrationRequest.Unmarshal(m, b)
}
func (m *UpdateMigrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMigrationRequest.Marshal(b, m, deterministic)
}
func (m *UpdateMigrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMigrationRequest.Merge(m, src)
}
func (m *UpdateMigrationRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMigrationRequest.Size(m)
}
func (m *UpdateMigrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMigrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMigrationRequest proto.InternalMessageInfo

func (m *UpdateMigrationRequest) GetEntity() *Migration {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateMigrationResponse struct {
	// The stored version of the Migration entity
	Entity               *Migration `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateMigrationResponse) Reset()         { *m = UpdateMigrationResponse{} }
func (m *UpdateMigrationResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMigrationResponse) ProtoMessage()    {}
func (*UpdateMigrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{135}
}

func (m *UpdateMigrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMigrationResponse.Unmarshal(m, b)
}
func (m *UpdateMigrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMigrationResponse.Marshal(b, m, deterministic)
}
func (m *UpdateMigrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMigrationResponse.Merge(m, src)
}
func (m *UpdateMigrationResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateMigrationResponse.Size(m)
}
func (m *UpdateMigrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMigrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMigrationResponse proto.InternalMessageInfo

func (m *UpdateMigrationResponse) GetEntity() *Migration {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateMigrationRequest struct {
	// The Migration entity to create; if Migration uses auto-generated IDs, the ID field is ignored
	Entity               *Migration `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateMigrationRequest) Reset()         { *m = CreateMigrationRequest{} }
func (m *CreateMigrationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMigrationRequest) ProtoMessage()    {}
func (*CreateMigrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{136}
}

func (m *CreateMigrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMigrationRequest.Unmarshal(m, b)
}
func (m *CreateMigrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMigrationRequest.Marshal(b, m, deterministic)
}
func (m *CreateMigrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMigrationRequest.Merge(m, src)
}
func (m *CreateMigrationRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMigrationRequest.Size(m)
}
func (m *CreateMigrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMigrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMigrationRequest proto.InternalMessageInfo

func (m *CreateMigrationRequest) GetEntity() *Migration {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateMigrationResponse struct {
	// The stored version of the Migration entity
	Entity               *Migration `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateMigrationResponse) Reset()         { *m = CreateMigrationResponse{} }
func (m *CreateMigrationResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMigrationResponse) ProtoMessage()    {}
func (*CreateMigrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{137}
}

func (m *CreateMigrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMigrationResponse.Unmarshal(m, b)
}
func (m *CreateMigrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMigrationResponse.Marshal(b, m, deterministic)
}
func (m *CreateMigrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMigrationResponse.Merge(m, src)
}
func (m *CreateMigrationResponse) XXX_Size() int {
	return xxx_messageInfo_CreateMigrationResponse.Size(m)
}
func (m *CreateMigrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMigrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMigrationResponse proto.InternalMessageInfo

func (m *CreateMigrationResponse) GetEntity() *Migration {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteMigrationRequest struct {
	// The ID of the Migration to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMigrationRequest) Reset()         { *m = DeleteMigrationRequest{} }
func (m *DeleteMigrationRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMigrationRequest) ProtoMessage()    {}
func (*DeleteMigrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{138}
}

func (m *DeleteMigrationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMigrationRequest.Unmarshal(m, b)
}
func (m *DeleteMigrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMigrationRequest.Marshal(b, m, deterministic)
}
func (m *DeleteMigrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMigrationRequest.Merge(m, src)
}
func (m *DeleteMigrationRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMigrationRequest.Size(m)
}
func (m *DeleteMigrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMigrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMigrationRequest proto.InternalMessageInfo

func (m *DeleteMigrationRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteMigrationResponse struct {
	// The version of the Migration entity that was deleted
	Entity               *Migration `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DeleteMigrationResponse) Reset()         { *m = DeleteMigrationResponse{} }
func (m *DeleteMigrationResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMigrationResponse) ProtoMessage()    {}
func (*DeleteMigrationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{139}
}

func (m *DeleteMigrationResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMigrationResponse.Unmarshal(m, b)
}
func (m *DeleteMigrationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMigrationResponse.Marshal(b, m, deterministic)
}
func (m *DeleteMigrationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMigrationResponse.Merge(m, src)
}
func (m *DeleteMigrationResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteMigrationResponse.Size(m)
}
func (m *DeleteMigrationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMigrationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMigrationResponse proto.InternalMessageInfo

func (m *DeleteMigrationResponse) GetEntity() *Migration {
	if m != nil {
		return m.Entity
	}
	return nil
}

type FeatureFlagBool struct {
	// The key of the FeatureFlagBool
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	// True if the feature is enabled
	Enabled bool `protobuf:"varint,21,,name=enabled,proto3" json:"enabled,omitempty"`
	//
	Description          string   `protobuf:"bytes,22,,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureFlagBool) Reset()         { *m = FeatureFlagBool{} }
func (m *FeatureFlagBool) String() string { return proto.CompactTextString(m) }
func (*FeatureFlagBool) ProtoMessage()    {}
func (*FeatureFlagBool) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{140}
}

func (m *FeatureFlagBool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureFlagBool.Unmarshal(m, b)
}
func (m *FeatureFlagBool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureFlagBool.Marshal(b, m, deterministic)
}
func (m *FeatureFlagBool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureFlagBool.Merge(m, src)
}
func (m *FeatureFlagBool) XXX_Size() int {
	return xxx_messageInfo_FeatureFlagBool.Size(m)
}
func (m *FeatureFlagBool) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureFlagBool.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureFlagBool proto.InternalMessageInfo

func (m *FeatureFlagBool) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *FeatureFlagBool) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *FeatureFlagBool) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ListFeatureFlagBoolRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListFeatureFlagBoolRequest) Reset()         { *m = ListFeatureFlagBoolRequest{} }
func (m *ListFeatureFlagBoolRequest) String() string { return proto.CompactTextString(m) }
func (*ListFeatureFlagBoolRequest) ProtoMessage()    {}
func (*ListFeatureFlagBoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{141}
}

func (m *ListFeatureFlagBoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFeatureFlagBoolRequest.Unmarshal(m, b)
}
func (m *ListFeatureFlagBoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFeatureFlagBoolRequest.Marshal(b, m, deterministic)
}
func (m *ListFeatureFlagBoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFeatureFlagBoolRequest.Merge(m, src)
}
func (m *ListFeatureFlagBoolRequest) XXX_Size() int {
	return xxx_messageInfo_ListFeatureFlagBoolRequest.Size(m)
}
func (m *ListFeatureFlagBoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFeatureFlagBoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListFeatureFlagBoolRequest proto.InternalMessageInfo

func (m *ListFeatureFlagBoolRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListFeatureFlagBoolRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListFeatureFlagBoolResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of FeatureFlagBools
	Entities             []*FeatureFlagBool `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ListFeatureFlagBoolResponse) Reset()         { *m = ListFeatureFlagBoolResponse{} }
func (m *ListFeatureFlagBoolResponse) String() string { return proto.CompactTextString(m) }
func (*ListFeatureFlagBoolResponse) ProtoMessage()    {}
func (*ListFeatureFlagBoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{142}
}

func (m *ListFeatureFlagBoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListFeatureFlagBoolResponse.Unmarshal(m, b)
}
func (m *ListFeatureFlagBoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListFeatureFlagBoolResponse.Marshal(b, m, deterministic)
}
func (m *ListFeatureFlagBoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListFeatureFlagBoolResponse.Merge(m, src)
}
func (m *ListFeatureFlagBoolResponse) XXX_Size() int {
	return xxx_messageInfo_ListFeatureFlagBoolResponse.Size(m)
}
func (m *ListFeatureFlagBoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListFeatureFlagBoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListFeatureFlagBoolResponse proto.InternalMessageInfo

func (m *ListFeatureFlagBoolResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListFeatureFlagBoolResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListFeatureFlagBoolResponse) GetEntities() []*FeatureFlagBool {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetFeatureFlagBoolRequest struct {
	// The ID of the FeatureFlagBool to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetFeatureFlagBoolRequest) Reset()         { *m = GetFeatureFlagBoolRequest{} }
func (m *GetFeatureFlagBoolRequest) String() string { return proto.CompactTextString(m) }
func (*GetFeatureFlagBoolRequest) ProtoMessage()    {}
func (*GetFeatureFlagBoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{143}
}

func (m *GetFeatureFlagBoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFeatureFlagBoolRequest.Unmarshal(m, b)
}
func (m *GetFeatureFlagBoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFeatureFlagBoolRequest.Marshal(b, m, deterministic)
}
func (m *GetFeatureFlagBoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeatureFlagBoolRequest.Merge(m, src)
}
func (m *GetFeatureFlagBoolRequest) XXX_Size() int {
	return xxx_messageInfo_GetFeatureFlagBoolRequest.Size(m)
}
func (m *GetFeatureFlagBoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeatureFlagBoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeatureFlagBoolRequest proto.InternalMessageInfo

func (m *GetFeatureFlagBoolRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetFeatureFlagBoolResponse struct {
	// The FeatureFlagBool that was fetched, or null if it didn't exist
	Entity               *FeatureFlagBool `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetFeatureFlagBoolResponse) Reset()         { *m = GetFeatureFlagBoolResponse{} }
func (m *GetFeatureFlagBoolResponse) String() string { return proto.CompactTextString(m) }
func (*GetFeatureFlagBoolResponse) ProtoMessage()    {}
func (*GetFeatureFlagBoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{144}
}

func (m *GetFeatureFlagBoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFeatureFlagBoolResponse.Unmarshal(m, b)
}
func (m *GetFeatureFlagBoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFeatureFlagBoolResponse.Marshal(b, m, deterministic)
}
func (m *GetFeatureFlagBoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFeatureFlagBoolResponse.Merge(m, src)
}
func (m *GetFeatureFlagBoolResponse) XXX_Size() int {
	return xxx_messageInfo_GetFeatureFlagBoolResponse.Size(m)
}
func (m *GetFeatureFlagBoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFeatureFlagBoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFeatureFlagBoolResponse proto.InternalMessageInfo

func (m *GetFeatureFlagBoolResponse) GetEntity() *FeatureFlagBool {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchFeatureFlagBoolRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchFeatureFlagBoolRequest) Reset()         { *m = WatchFeatureFlagBoolRequest{} }
func (m *WatchFeatureFlagBoolRequest) String() string { return proto.CompactTextString(m) }
func (*WatchFeatureFlagBoolRequest) ProtoMessage()    {}
func (*WatchFeatureFlagBoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{145}
}

func (m *WatchFeatureFlagBoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchFeatureFlagBoolRequest.Unmarshal(m, b)
}
func (m *WatchFeatureFlagBoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchFeatureFlagBoolRequest.Marshal(b, m, deterministic)
}
func (m *WatchFeatureFlagBoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchFeatureFlagBoolRequest.Merge(m, src)
}
func (m *WatchFeatureFlagBoolRequest) XXX_Size() int {
	return xxx_messageInfo_WatchFeatureFlagBoolRequest.Size(m)
}
func (m *WatchFeatureFlagBoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchFeatureFlagBoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchFeatureFlagBoolRequest proto.InternalMessageInfo

type WatchFeatureFlagBoolEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The FeatureFlagBool that was created, modified or deleted
	Entity *FeatureFlagBool `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchFeatureFlagBoolEvent) Reset()         { *m = WatchFeatureFlagBoolEvent{} }
func (m *WatchFeatureFlagBoolEvent) String() string { return proto.CompactTextString(m) }
func (*WatchFeatureFlagBoolEvent) ProtoMessage()    {}
func (*WatchFeatureFlagBoolEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{146}
}

func (m *WatchFeatureFlagBoolEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchFeatureFlagBoolEvent.Unmarshal(m, b)
}
func (m *WatchFeatureFlagBoolEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchFeatureFlagBoolEvent.Marshal(b, m, deterministic)
}
func (m *WatchFeatureFlagBoolEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchFeatureFlagBoolEvent.Merge(m, src)
}
func (m *WatchFeatureFlagBoolEvent) XXX_Size() int {
	return xxx_messageInfo_WatchFeatureFlagBoolEvent.Size(m)
}
func (m *WatchFeatureFlagBoolEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchFeatureFlagBoolEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchFeatureFlagBoolEvent proto.InternalMessageInfo

func (m *WatchFeatureFlagBoolEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchFeatureFlagBoolEvent) GetEntity() *FeatureFlagBool {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchFeatureFlagBoolEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchFeatureFlagBoolEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateFeatureFlagBoolRequest struct {
	// The FeatureFlagBool entity to update
	Entity               *FeatureFlagBool `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateFeatureFlagBoolRequest) Reset()         { *m = UpdateFeatureFlagBoolRequest{} }
func (m *UpdateFeatureFlagBoolRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateFeatureFlagBoolRequest) ProtoMessage()    {}
func (*UpdateFeatureFlagBoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{147}
}

func (m *UpdateFeatureFlagBoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateFeatureFlagBoolRequest.Unmarshal(m, b)
}
func (m *UpdateFeatureFlagBoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateFeatureFlagBoolRequest.Marshal(b, m, deterministic)
}
func (m *UpdateFeatureFlagBoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFeatureFlagBoolRequest.Merge(m, src)
}
func (m *UpdateFeatureFlagBoolRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateFeatureFlagBoolRequest.Size(m)
}
func (m *UpdateFeatureFlagBoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFeatureFlagBoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFeatureFlagBoolRequest proto.InternalMessageInfo

func (m *UpdateFeatureFlagBoolRequest) GetEntity() *FeatureFlagBool {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateFeatureFlagBoolResponse struct {
	// The stored version of the FeatureFlagBool entity
	Entity               *FeatureFlagBool `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateFeatureFlagBoolResponse) Reset()         { *m = UpdateFeatureFlagBoolResponse{} }
func (m *UpdateFeatureFlagBoolResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateFeatureFlagBoolResponse) ProtoMessage()    {}
func (*UpdateFeatureFlagBoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{148}
}

func (m *UpdateFeatureFlagBoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateFeatureFlagBoolResponse.Unmarshal(m, b)
}
func (m *UpdateFeatureFlagBoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateFeatureFlagBoolResponse.Marshal(b, m, deterministic)
}
func (m *UpdateFeatureFlagBoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateFeatureFlagBoolResponse.Merge(m, src)
}
func (m *UpdateFeatureFlagBoolResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateFeatureFlagBoolResponse.Size(m)
}
func (m *UpdateFeatureFlagBoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateFeatureFlagBoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateFeatureFlagBoolResponse proto.InternalMessageInfo

func (m *UpdateFeatureFlagBoolResponse) GetEntity() *FeatureFlagBool {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateFeatureFlagBoolRequest struct {
	// The FeatureFlagBool entity to create; if FeatureFlagBool uses auto-generated IDs, the ID field is ignored
	Entity               *FeatureFlagBool `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateFeatureFlagBoolRequest) Reset()         { *m = CreateFeatureFlagBoolRequest{} }
func (m *CreateFeatureFlagBoolRequest) String() string { return proto.CompactTextString(m) }
func (*CreateFeatureFlagBoolRequest) ProtoMessage()    {}
func (*CreateFeatureFlagBoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{149}
}

func (m *CreateFeatureFlagBoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFeatureFlagBoolRequest.Unmarshal(m, b)
}
func (m *CreateFeatureFlagBoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFeatureFlagBoolRequest.Marshal(b, m, deterministic)
}
func (m *CreateFeatureFlagBoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFeatureFlagBoolRequest.Merge(m, src)
}
func (m *CreateFeatureFlagBoolRequest) XXX_Size() int {
	return xxx_messageInfo_CreateFeatureFlagBoolRequest.Size(m)
}
func (m *CreateFeatureFlagBoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFeatureFlagBoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFeatureFlagBoolRequest proto.InternalMessageInfo

func (m *CreateFeatureFlagBoolRequest) GetEntity() *FeatureFlagBool {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateFeatureFlagBoolResponse struct {
	// The stored version of the FeatureFlagBool entity
	Entity               *FeatureFlagBool `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CreateFeatureFlagBoolResponse) Reset()         { *m = CreateFeatureFlagBoolResponse{} }
func (m *CreateFeatureFlagBoolResponse) String() string { return proto.CompactTextString(m) }
func (*CreateFeatureFlagBoolResponse) ProtoMessage()    {}
func (*CreateFeatureFlagBoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{150}
}

func (m *CreateFeatureFlagBoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateFeatureFlagBoolResponse.Unmarshal(m, b)
}
func (m *CreateFeatureFlagBoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateFeatureFlagBoolResponse.Marshal(b, m, deterministic)
}
func (m *CreateFeatureFlagBoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateFeatureFlagBoolResponse.Merge(m, src)
}
func (m *CreateFeatureFlagBoolResponse) XXX_Size() int {
	return xxx_messageInfo_CreateFeatureFlagBoolResponse.Size(m)
}
func (m *CreateFeatureFlagBoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateFeatureFlagBoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateFeatureFlagBoolResponse proto.InternalMessageInfo

func (m *CreateFeatureFlagBoolResponse) GetEntity() *FeatureFlagBool {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteFeatureFlagBoolRequest struct {
	// The ID of the FeatureFlagBool to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteFeatureFlagBoolRequest) Reset()         { *m = DeleteFeatureFlagBoolRequest{} }
func (m *DeleteFeatureFlagBoolRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteFeatureFlagBoolRequest) ProtoMessage()    {}
func (*DeleteFeatureFlagBoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{151}
}

func (m *DeleteFeatureFlagBoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteFeatureFlagBoolRequest.Unmarshal(m, b)
}
func (m *DeleteFeatureFlagBoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteFeatureFlagBoolRequest.Marshal(b, m, deterministic)
}
func (m *DeleteFeatureFlagBoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFeatureFlagBoolRequest.Merge(m, src)
}
func (m *DeleteFeatureFlagBoolRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteFeatureFlagBoolRequest.Size(m)
}
func (m *DeleteFeatureFlagBoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFeatureFlagBoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFeatureFlagBoolRequest proto.InternalMessageInfo

func (m *DeleteFeatureFlagBoolRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteFeatureFlagBoolResponse struct {
	// The version of the FeatureFlagBool entity that was deleted
	Entity               *FeatureFlagBool `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeleteFeatureFlagBoolResponse) Reset()         { *m = DeleteFeatureFlagBoolResponse{} }
func (m *DeleteFeatureFlagBoolResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteFeatureFlagBoolResponse) ProtoMessage()    {}
func (*DeleteFeatureFlagBoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{152}
}

func (m *DeleteFeatureFlagBoolResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteFeatureFlagBoolResponse.Unmarshal(m, b)
}
func (m *DeleteFeatureFlagBoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteFeatureFlagBoolResponse.Marshal(b, m, deterministic)
}
func (m *DeleteFeatureFlagBoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteFeatureFlagBoolResponse.Merge(m, src)
}
func (m *DeleteFeatureFlagBoolResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteFeatureFlagBoolResponse.Size(m)
}
func (m *DeleteFeatureFlagBoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteFeatureFlagBoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteFeatureFlagBoolResponse proto.InternalMessageInfo

func (m *DeleteFeatureFlagBoolResponse) GetEntity() *FeatureFlagBool {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Relay struct {
	// The key of the Relay
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	//
	DisplayName string `protobuf:"bytes,31,,name=displayName,proto3" json:"displayName,omitempty"`
	//
	PublicAddress string `protobuf:"bytes,3,,name=publicAddress,proto3" json:"publicAddress,omitempty"`
	//
	ManagementAddress string `protobuf:"bytes,5,,name=managementAddress,proto3" json:"managementAddress,omitempty"`
	// The node signing public key; used for actual traffic passing through the relay.
	UpdateKey []byte `protobuf:"bytes,9,,name=updateKey,proto3" json:"updateKey,omitempty"`
	//
	SshUser string `protobuf:"bytes,10,,name=sshUser,proto3" json:"sshUser,omitempty"`
	//
	SshPort int64 `protobuf:"varint,11,,name=sshPort,proto3" json:"sshPort,omitempty"`
	//
	Seller *Key `protobuf:"bytes,13,,name=seller,proto3" json:"seller,omitempty"`
	//
	Datacenter *Key `protobuf:"bytes,32,,name=datacenter,proto3" json:"datacenter,omitempty"`
	//
	State int64 `protobuf:"varint,18,,name=state,proto3" json:"state,omitempty"`
	// The speed of the relays network card
	NicSpeedMbps uint64 `protobuf:"varint,33,,name=nicSpeedMbps,proto3" json:"nicSpeedMbps,omitempty"`
	// The monthly cost of the relay
	MonthlyRecurringChargeNibblins int64 `protobuf:"varint,34,,name=monthlyRecurringChargeNibblins,proto3" json:"monthlyRecurringChargeNibblins,omitempty"`
	// Price for egress traffic $/GB on this relay, as the supplier charges us
	PriceSupplierChargedEgressNibblins int64 `protobuf:"varint,35,,name=priceSupplierChargedEgressNibblins,proto3" json:"priceSupplierChargedEgressNibblins,omitempty"`
	// The included (free) bandwidth of the relay in GB. 1000 GB = 1 TB
	IncludedBandwidthGB int64 `protobuf:"varint,36,,name=includedBandwidthGB,proto3" json:"includedBandwidthGB,omitempty"`
	// The type of machine the relay is running on; should be either 'vm' or 'bare-metal'
	MachineType          string   `protobuf:"bytes,37,,name=machineType,proto3" json:"machineType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Relay) Reset()         { *m = Relay{} }
func (m *Relay) String() string { return proto.CompactTextString(m) }
func (*Relay) ProtoMessage()    {}
func (*Relay) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{153}
}

func (m *Relay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Relay.Unmarshal(m, b)
}
func (m *Relay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Relay.Marshal(b, m, deterministic)
}
func (m *Relay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Relay.Merge(m, src)
}
func (m *Relay) XXX_Size() int {
	return xxx_messageInfo_Relay.Size(m)
}
func (m *Relay) XXX_DiscardUnknown() {
	xxx_messageInfo_Relay.DiscardUnknown(m)
}

var xxx_messageInfo_Relay proto.InternalMessageInfo

func (m *Relay) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Relay) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Relay) GetPublicAddress() string {
	if m != nil {
		return m.PublicAddress
	}
	return ""
}

func (m *Relay) GetManagementAddress() string {
	if m != nil {
		return m.ManagementAddress
	}
	return ""
}

func (m *Relay) GetUpdateKey() []byte {
	if m != nil {
		return m.UpdateKey
	}
	return nil
}

func (m *Relay) GetSshUser() string {
	if m != nil {
		return m.SshUser
	}
	return ""
}

func (m *Relay) GetSshPort() int64 {
	if m != nil {
		return m.SshPort
	}
	return 0
}

func (m *Relay) GetSeller() *Key {
	if m != nil {
		return m.Seller
	}
	return nil
}

func (m *Relay) GetDatacenter() *Key {
	if m != nil {
		return m.Datacenter
	}
	return nil
}

func (m *Relay) GetState() int64 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Relay) GetNicSpeedMbps() uint64 {
	if m != nil {
		return m.NicSpeedMbps
	}
	return 0
}

func (m *Relay) GetMonthlyRecurringChargeNibblins() int64 {
	if m != nil {
		return m.MonthlyRecurringChargeNibblins
	}
	return 0
}

func (m *Relay) GetPriceSupplierChargedEgressNibblins() int64 {
	if m != nil {
		return m.PriceSupplierChargedEgressNibblins
	}
	return 0
}

func (m *Relay) GetIncludedBandwidthGB() int64 {
	if m != nil {
		return m.IncludedBandwidthGB
	}
	return 0
}

func (m *Relay) GetMachineType() string {
	if m != nil {
		return m.MachineType
	}
	return ""
}

type ListRelayRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRelayRequest) Reset()         { *m = ListRelayRequest{} }
func (m *ListRelayRequest) String() string { return proto.CompactTextString(m) }
func (*ListRelayRequest) ProtoMessage()    {}
func (*ListRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{154}
}

func (m *ListRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRelayRequest.Unmarshal(m, b)
}
func (m *ListRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRelayRequest.Marshal(b, m, deterministic)
}
func (m *ListRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelayRequest.Merge(m, src)
}
func (m *ListRelayRequest) XXX_Size() int {
	return xxx_messageInfo_ListRelayRequest.Size(m)
}
func (m *ListRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelayRequest proto.InternalMessageInfo

func (m *ListRelayRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListRelayRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListRelayResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of Relays
	Entities             []*Relay `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRelayResponse) Reset()         { *m = ListRelayResponse{} }
func (m *ListRelayResponse) String() string { return proto.CompactTextString(m) }
func (*ListRelayResponse) ProtoMessage()    {}
func (*ListRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{155}
}

func (m *ListRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListRelayResponse.Unmarshal(m, b)
}
func (m *ListRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListRelayResponse.Marshal(b, m, deterministic)
}
func (m *ListRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelayResponse.Merge(m, src)
}
func (m *ListRelayResponse) XXX_Size() int {
	return xxx_messageInfo_ListRelayResponse.Size(m)
}
func (m *ListRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelayResponse proto.InternalMessageInfo

func (m *ListRelayResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListRelayResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListRelayResponse) GetEntities() []*Relay {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetRelayRequest struct {
	// The ID of the Relay to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRelayRequest) Reset()         { *m = GetRelayRequest{} }
func (m *GetRelayRequest) String() string { return proto.CompactTextString(m) }
func (*GetRelayRequest) ProtoMessage()    {}
func (*GetRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{156}
}

func (m *GetRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRelayRequest.Unmarshal(m, b)
}
func (m *GetRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRelayRequest.Marshal(b, m, deterministic)
}
func (m *GetRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRelayRequest.Merge(m, src)
}
func (m *GetRelayRequest) XXX_Size() int {
	return xxx_messageInfo_GetRelayRequest.Size(m)
}
func (m *GetRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRelayRequest proto.InternalMessageInfo

func (m *GetRelayRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetRelayResponse struct {
	// The Relay that was fetched, or null if it didn't exist
	Entity               *Relay   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRelayResponse) Reset()         { *m = GetRelayResponse{} }
func (m *GetRelayResponse) String() string { return proto.CompactTextString(m) }
func (*GetRelayResponse) ProtoMessage()    {}
func (*GetRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{157}
}

func (m *GetRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRelayResponse.Unmarshal(m, b)
}
func (m *GetRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRelayResponse.Marshal(b, m, deterministic)
}
func (m *GetRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRelayResponse.Merge(m, src)
}
func (m *GetRelayResponse) XXX_Size() int {
	return xxx_messageInfo_GetRelayResponse.Size(m)
}
func (m *GetRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRelayResponse proto.InternalMessageInfo

func (m *GetRelayResponse) GetEntity() *Relay {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchRelayRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRelayRequest) Reset()         { *m = WatchRelayRequest{} }
func (m *WatchRelayRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRelayRequest) ProtoMessage()    {}
func (*WatchRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{158}
}

func (m *WatchRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRelayRequest.Unmarshal(m, b)
}
func (m *WatchRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRelayRequest.Marshal(b, m, deterministic)
}
func (m *WatchRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRelayRequest.Merge(m, src)
}
func (m *WatchRelayRequest) XXX_Size() int {
	return xxx_messageInfo_WatchRelayRequest.Size(m)
}
func (m *WatchRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRelayRequest proto.InternalMessageInfo

type WatchRelayEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The Relay that was created, modified or deleted
	Entity *Relay `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchRelayEvent) Reset()         { *m = WatchRelayEvent{} }
func (m *WatchRelayEvent) String() string { return proto.CompactTextString(m) }
func (*WatchRelayEvent) ProtoMessage()    {}
func (*WatchRelayEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{159}
}

func (m *WatchRelayEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchRelayEvent.Unmarshal(m, b)
}
func (m *WatchRelayEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchRelayEvent.Marshal(b, m, deterministic)
}
func (m *WatchRelayEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRelayEvent.Merge(m, src)
}
func (m *WatchRelayEvent) XXX_Size() int {
	return xxx_messageInfo_WatchRelayEvent.Size(m)
}
func (m *WatchRelayEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRelayEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRelayEvent proto.InternalMessageInfo

func (m *WatchRelayEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchRelayEvent) GetEntity() *Relay {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchRelayEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchRelayEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateRelayRequest struct {
	// The Relay entity to update
	Entity               *Relay   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRelayRequest) Reset()         { *m = UpdateRelayRequest{} }
func (m *UpdateRelayRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRelayRequest) ProtoMessage()    {}
func (*UpdateRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{160}
}

func (m *UpdateRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRelayRequest.Unmarshal(m, b)
}
func (m *UpdateRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRelayRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRelayRequest.Merge(m, src)
}
func (m *UpdateRelayRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRelayRequest.Size(m)
}
func (m *UpdateRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRelayRequest proto.InternalMessageInfo

func (m *UpdateRelayRequest) GetEntity() *Relay {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateRelayResponse struct {
	// The stored version of the Relay entity
	Entity               *Relay   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRelayResponse) Reset()         { *m = UpdateRelayResponse{} }
func (m *UpdateRelayResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRelayResponse) ProtoMessage()    {}
func (*UpdateRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{161}
}

func (m *UpdateRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRelayResponse.Unmarshal(m, b)
}
func (m *UpdateRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRelayResponse.Marshal(b, m, deterministic)
}
func (m *UpdateRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRelayResponse.Merge(m, src)
}
func (m *UpdateRelayResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateRelayResponse.Size(m)
}
func (m *UpdateRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRelayResponse proto.InternalMessageInfo

func (m *UpdateRelayResponse) GetEntity() *Relay {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateRelayRequest struct {
	// The Relay entity to create; if Relay uses auto-generated IDs, the ID field is ignored
	Entity               *Relay   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRelayRequest) Reset()         { *m = CreateRelayRequest{} }
func (m *CreateRelayRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRelayRequest) ProtoMessage()    {}
func (*CreateRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{162}
}

func (m *CreateRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRelayRequest.Unmarshal(m, b)
}
func (m *CreateRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRelayRequest.Marshal(b, m, deterministic)
}
func (m *CreateRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRelayRequest.Merge(m, src)
}
func (m *CreateRelayRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRelayRequest.Size(m)
}
func (m *CreateRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRelayRequest proto.InternalMessageInfo

func (m *CreateRelayRequest) GetEntity() *Relay {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateRelayResponse struct {
	// The stored version of the Relay entity
	Entity               *Relay   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRelayResponse) Reset()         { *m = CreateRelayResponse{} }
func (m *CreateRelayResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRelayResponse) ProtoMessage()    {}
func (*CreateRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{163}
}

func (m *CreateRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRelayResponse.Unmarshal(m, b)
}
func (m *CreateRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRelayResponse.Marshal(b, m, deterministic)
}
func (m *CreateRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRelayResponse.Merge(m, src)
}
func (m *CreateRelayResponse) XXX_Size() int {
	return xxx_messageInfo_CreateRelayResponse.Size(m)
}
func (m *CreateRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRelayResponse proto.InternalMessageInfo

func (m *CreateRelayResponse) GetEntity() *Relay {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteRelayRequest struct {
	// The ID of the Relay to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRelayRequest) Reset()         { *m = DeleteRelayRequest{} }
func (m *DeleteRelayRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRelayRequest) ProtoMessage()    {}
func (*DeleteRelayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{164}
}

func (m *DeleteRelayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRelayRequest.Unmarshal(m, b)
}
func (m *DeleteRelayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRelayRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRelayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelayRequest.Merge(m, src)
}
func (m *DeleteRelayRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRelayRequest.Size(m)
}
func (m *DeleteRelayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelayRequest proto.InternalMessageInfo

func (m *DeleteRelayRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteRelayResponse struct {
	// The version of the Relay entity that was deleted
	Entity               *Relay   `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRelayResponse) Reset()         { *m = DeleteRelayResponse{} }
func (m *DeleteRelayResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRelayResponse) ProtoMessage()    {}
func (*DeleteRelayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{165}
}

func (m *DeleteRelayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRelayResponse.Unmarshal(m, b)
}
func (m *DeleteRelayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRelayResponse.Marshal(b, m, deterministic)
}
func (m *DeleteRelayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRelayResponse.Merge(m, src)
}
func (m *DeleteRelayResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteRelayResponse.Size(m)
}
func (m *DeleteRelayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRelayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRelayResponse proto.InternalMessageInfo

func (m *DeleteRelayResponse) GetEntity() *Relay {
	if m != nil {
		return m.Entity
	}
	return nil
}

type Customer struct {
	// The key of the Customer
	Key *Key `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	//
	Name string `protobuf:"bytes,2,,name=name,proto3" json:"name,omitempty"`
	//
	Buyer *Key `protobuf:"bytes,4,,name=buyer,proto3" json:"buyer,omitempty"`
	//
	Seller *Key `protobuf:"bytes,5,,name=seller,proto3" json:"seller,omitempty"`
	//
	IsAdmin bool `protobuf:"varint,6,,name=isAdmin,proto3" json:"isAdmin,omitempty"`
	// The domain name for which users should be automatically onboarded into this customer.
	AutomaticSigninDomain string `protobuf:"bytes,9,,name=automaticSigninDomain,proto3" json:"automaticSigninDomain,omitempty"`
	// Comma-delimited list of role IDs to assign users when they are onboarded through the automatic sign-in process (actual role ids can be seen in url when clicking on roles at https://manage.auth0.com/dashboard/us/networknext/roles)
	AutomaticSigninRoles string   `protobuf:"bytes,10,,name=automaticSigninRoles,proto3" json:"automaticSigninRoles,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Customer) Reset()         { *m = Customer{} }
func (m *Customer) String() string { return proto.CompactTextString(m) }
func (*Customer) ProtoMessage()    {}
func (*Customer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{166}
}

func (m *Customer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Customer.Unmarshal(m, b)
}
func (m *Customer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Customer.Marshal(b, m, deterministic)
}
func (m *Customer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Customer.Merge(m, src)
}
func (m *Customer) XXX_Size() int {
	return xxx_messageInfo_Customer.Size(m)
}
func (m *Customer) XXX_DiscardUnknown() {
	xxx_messageInfo_Customer.DiscardUnknown(m)
}

var xxx_messageInfo_Customer proto.InternalMessageInfo

func (m *Customer) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Customer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Customer) GetBuyer() *Key {
	if m != nil {
		return m.Buyer
	}
	return nil
}

func (m *Customer) GetSeller() *Key {
	if m != nil {
		return m.Seller
	}
	return nil
}

func (m *Customer) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *Customer) GetAutomaticSigninDomain() string {
	if m != nil {
		return m.AutomaticSigninDomain
	}
	return ""
}

func (m *Customer) GetAutomaticSigninRoles() string {
	if m != nil {
		return m.AutomaticSigninRoles
	}
	return ""
}

type ListCustomerRequest struct {
	// The start cursor from a previous List call, or null
	Start []byte `protobuf:"bytes,1,,name=start,proto3" json:"start,omitempty"`
	// The maximum number of results to return, or null for no limit
	Limit                uint32   `protobuf:"varint,2,,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCustomerRequest) Reset()         { *m = ListCustomerRequest{} }
func (m *ListCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*ListCustomerRequest) ProtoMessage()    {}
func (*ListCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{167}
}

func (m *ListCustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCustomerRequest.Unmarshal(m, b)
}
func (m *ListCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCustomerRequest.Marshal(b, m, deterministic)
}
func (m *ListCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCustomerRequest.Merge(m, src)
}
func (m *ListCustomerRequest) XXX_Size() int {
	return xxx_messageInfo_ListCustomerRequest.Size(m)
}
func (m *ListCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCustomerRequest proto.InternalMessageInfo

func (m *ListCustomerRequest) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *ListCustomerRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ListCustomerResponse struct {
	// The cursor to pass to the start field of the next List call
	Next []byte `protobuf:"bytes,1,,name=next,proto3" json:"next,omitempty"`
	// True if there are more results available in a future List call
	MoreResults bool `protobuf:"varint,2,,name=moreResults,proto3" json:"moreResults,omitempty"`
	// The paginated list of Customers
	Entities             []*Customer `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListCustomerResponse) Reset()         { *m = ListCustomerResponse{} }
func (m *ListCustomerResponse) String() string { return proto.CompactTextString(m) }
func (*ListCustomerResponse) ProtoMessage()    {}
func (*ListCustomerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{168}
}

func (m *ListCustomerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCustomerResponse.Unmarshal(m, b)
}
func (m *ListCustomerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCustomerResponse.Marshal(b, m, deterministic)
}
func (m *ListCustomerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCustomerResponse.Merge(m, src)
}
func (m *ListCustomerResponse) XXX_Size() int {
	return xxx_messageInfo_ListCustomerResponse.Size(m)
}
func (m *ListCustomerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCustomerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCustomerResponse proto.InternalMessageInfo

func (m *ListCustomerResponse) GetNext() []byte {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *ListCustomerResponse) GetMoreResults() bool {
	if m != nil {
		return m.MoreResults
	}
	return false
}

func (m *ListCustomerResponse) GetEntities() []*Customer {
	if m != nil {
		return m.Entities
	}
	return nil
}

type GetCustomerRequest struct {
	// The ID of the Customer to load
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCustomerRequest) Reset()         { *m = GetCustomerRequest{} }
func (m *GetCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*GetCustomerRequest) ProtoMessage()    {}
func (*GetCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{169}
}

func (m *GetCustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCustomerRequest.Unmarshal(m, b)
}
func (m *GetCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCustomerRequest.Marshal(b, m, deterministic)
}
func (m *GetCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerRequest.Merge(m, src)
}
func (m *GetCustomerRequest) XXX_Size() int {
	return xxx_messageInfo_GetCustomerRequest.Size(m)
}
func (m *GetCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerRequest proto.InternalMessageInfo

func (m *GetCustomerRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type GetCustomerResponse struct {
	// The Customer that was fetched, or null if it didn't exist
	Entity               *Customer `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetCustomerResponse) Reset()         { *m = GetCustomerResponse{} }
func (m *GetCustomerResponse) String() string { return proto.CompactTextString(m) }
func (*GetCustomerResponse) ProtoMessage()    {}
func (*GetCustomerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{170}
}

func (m *GetCustomerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCustomerResponse.Unmarshal(m, b)
}
func (m *GetCustomerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCustomerResponse.Marshal(b, m, deterministic)
}
func (m *GetCustomerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCustomerResponse.Merge(m, src)
}
func (m *GetCustomerResponse) XXX_Size() int {
	return xxx_messageInfo_GetCustomerResponse.Size(m)
}
func (m *GetCustomerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCustomerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCustomerResponse proto.InternalMessageInfo

func (m *GetCustomerResponse) GetEntity() *Customer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type WatchCustomerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchCustomerRequest) Reset()         { *m = WatchCustomerRequest{} }
func (m *WatchCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*WatchCustomerRequest) ProtoMessage()    {}
func (*WatchCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{171}
}

func (m *WatchCustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchCustomerRequest.Unmarshal(m, b)
}
func (m *WatchCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchCustomerRequest.Marshal(b, m, deterministic)
}
func (m *WatchCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchCustomerRequest.Merge(m, src)
}
func (m *WatchCustomerRequest) XXX_Size() int {
	return xxx_messageInfo_WatchCustomerRequest.Size(m)
}
func (m *WatchCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchCustomerRequest proto.InternalMessageInfo

type WatchCustomerEvent struct {
	// The type of modification
	Type WatchEventType `protobuf:"varint,1,,name=type,proto3,enum=config.WatchEventType" json:"type,omitempty"`
	// The Customer that was created, modified or deleted
	Entity *Customer `protobuf:"bytes,2,,name=entity,proto3" json:"entity,omitempty"`
	// The old index of the entity in the collection, or -1 if it wasn't present
	OldIndex int64 `protobuf:"varint,3,,name=oldIndex,proto3" json:"oldIndex,omitempty"`
	// The new index of the entity in the collection, or -1 if it is no longer present
	NewIndex             int64    `protobuf:"varint,4,,name=newIndex,proto3" json:"newIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchCustomerEvent) Reset()         { *m = WatchCustomerEvent{} }
func (m *WatchCustomerEvent) String() string { return proto.CompactTextString(m) }
func (*WatchCustomerEvent) ProtoMessage()    {}
func (*WatchCustomerEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{172}
}

func (m *WatchCustomerEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchCustomerEvent.Unmarshal(m, b)
}
func (m *WatchCustomerEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchCustomerEvent.Marshal(b, m, deterministic)
}
func (m *WatchCustomerEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchCustomerEvent.Merge(m, src)
}
func (m *WatchCustomerEvent) XXX_Size() int {
	return xxx_messageInfo_WatchCustomerEvent.Size(m)
}
func (m *WatchCustomerEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchCustomerEvent.DiscardUnknown(m)
}

var xxx_messageInfo_WatchCustomerEvent proto.InternalMessageInfo

func (m *WatchCustomerEvent) GetType() WatchEventType {
	if m != nil {
		return m.Type
	}
	return WatchEventType_Created
}

func (m *WatchCustomerEvent) GetEntity() *Customer {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *WatchCustomerEvent) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *WatchCustomerEvent) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

type UpdateCustomerRequest struct {
	// The Customer entity to update
	Entity               *Customer `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateCustomerRequest) Reset()         { *m = UpdateCustomerRequest{} }
func (m *UpdateCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCustomerRequest) ProtoMessage()    {}
func (*UpdateCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{173}
}

func (m *UpdateCustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCustomerRequest.Unmarshal(m, b)
}
func (m *UpdateCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCustomerRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCustomerRequest.Merge(m, src)
}
func (m *UpdateCustomerRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCustomerRequest.Size(m)
}
func (m *UpdateCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCustomerRequest proto.InternalMessageInfo

func (m *UpdateCustomerRequest) GetEntity() *Customer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type UpdateCustomerResponse struct {
	// The stored version of the Customer entity
	Entity               *Customer `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateCustomerResponse) Reset()         { *m = UpdateCustomerResponse{} }
func (m *UpdateCustomerResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateCustomerResponse) ProtoMessage()    {}
func (*UpdateCustomerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{174}
}

func (m *UpdateCustomerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCustomerResponse.Unmarshal(m, b)
}
func (m *UpdateCustomerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCustomerResponse.Marshal(b, m, deterministic)
}
func (m *UpdateCustomerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCustomerResponse.Merge(m, src)
}
func (m *UpdateCustomerResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateCustomerResponse.Size(m)
}
func (m *UpdateCustomerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCustomerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCustomerResponse proto.InternalMessageInfo

func (m *UpdateCustomerResponse) GetEntity() *Customer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateCustomerRequest struct {
	// The Customer entity to create; if Customer uses auto-generated IDs, the ID field is ignored
	Entity               *Customer `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateCustomerRequest) Reset()         { *m = CreateCustomerRequest{} }
func (m *CreateCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCustomerRequest) ProtoMessage()    {}
func (*CreateCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{175}
}

func (m *CreateCustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCustomerRequest.Unmarshal(m, b)
}
func (m *CreateCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCustomerRequest.Marshal(b, m, deterministic)
}
func (m *CreateCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCustomerRequest.Merge(m, src)
}
func (m *CreateCustomerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCustomerRequest.Size(m)
}
func (m *CreateCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCustomerRequest proto.InternalMessageInfo

func (m *CreateCustomerRequest) GetEntity() *Customer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type CreateCustomerResponse struct {
	// The stored version of the Customer entity
	Entity               *Customer `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateCustomerResponse) Reset()         { *m = CreateCustomerResponse{} }
func (m *CreateCustomerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateCustomerResponse) ProtoMessage()    {}
func (*CreateCustomerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{176}
}

func (m *CreateCustomerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCustomerResponse.Unmarshal(m, b)
}
func (m *CreateCustomerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCustomerResponse.Marshal(b, m, deterministic)
}
func (m *CreateCustomerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCustomerResponse.Merge(m, src)
}
func (m *CreateCustomerResponse) XXX_Size() int {
	return xxx_messageInfo_CreateCustomerResponse.Size(m)
}
func (m *CreateCustomerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCustomerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCustomerResponse proto.InternalMessageInfo

func (m *CreateCustomerResponse) GetEntity() *Customer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type DeleteCustomerRequest struct {
	// The ID of the Customer to delete
	Key                  *Key     `protobuf:"bytes,1,,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCustomerRequest) Reset()         { *m = DeleteCustomerRequest{} }
func (m *DeleteCustomerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCustomerRequest) ProtoMessage()    {}
func (*DeleteCustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{177}
}

func (m *DeleteCustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCustomerRequest.Unmarshal(m, b)
}
func (m *DeleteCustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCustomerRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCustomerRequest.Merge(m, src)
}
func (m *DeleteCustomerRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCustomerRequest.Size(m)
}
func (m *DeleteCustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCustomerRequest proto.InternalMessageInfo

func (m *DeleteCustomerRequest) GetKey() *Key {
	if m != nil {
		return m.Key
	}
	return nil
}

type DeleteCustomerResponse struct {
	// The version of the Customer entity that was deleted
	Entity               *Customer `protobuf:"bytes,1,,name=entity,proto3" json:"entity,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DeleteCustomerResponse) Reset()         { *m = DeleteCustomerResponse{} }
func (m *DeleteCustomerResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteCustomerResponse) ProtoMessage()    {}
func (*DeleteCustomerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{178}
}

func (m *DeleteCustomerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCustomerResponse.Unmarshal(m, b)
}
func (m *DeleteCustomerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCustomerResponse.Marshal(b, m, deterministic)
}
func (m *DeleteCustomerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCustomerResponse.Merge(m, src)
}
func (m *DeleteCustomerResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteCustomerResponse.Size(m)
}
func (m *DeleteCustomerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCustomerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCustomerResponse proto.InternalMessageInfo

func (m *DeleteCustomerResponse) GetEntity() *Customer {
	if m != nil {
		return m.Entity
	}
	return nil
}

type TypedTransactionEntity struct {
	// Types that are valid to be assigned to Entity:
	//	*TypedTransactionEntity_Buyer
	//	*TypedTransactionEntity_Migration
	//	*TypedTransactionEntity_FeatureFlagBool
	//	*TypedTransactionEntity_Relay
	//	*TypedTransactionEntity_Customer
	//	*TypedTransactionEntity_Datacenter
	//	*TypedTransactionEntity_Seller
	//	*TypedTransactionEntity_Release
	//	*TypedTransactionEntity_RouteShader
	//	*TypedTransactionEntity_MapRegion
	Entity               isTypedTransactionEntity_Entity `protobuf_oneof:"entity"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *TypedTransactionEntity) Reset()         { *m = TypedTransactionEntity{} }
func (m *TypedTransactionEntity) String() string { return proto.CompactTextString(m) }
func (*TypedTransactionEntity) ProtoMessage()    {}
func (*TypedTransactionEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{179}
}

func (m *TypedTransactionEntity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypedTransactionEntity.Unmarshal(m, b)
}
func (m *TypedTransactionEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypedTransactionEntity.Marshal(b, m, deterministic)
}
func (m *TypedTransactionEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedTransactionEntity.Merge(m, src)
}
func (m *TypedTransactionEntity) XXX_Size() int {
	return xxx_messageInfo_TypedTransactionEntity.Size(m)
}
func (m *TypedTransactionEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedTransactionEntity.DiscardUnknown(m)
}

var xxx_messageInfo_TypedTransactionEntity proto.InternalMessageInfo

type isTypedTransactionEntity_Entity interface {
	isTypedTransactionEntity_Entity()
}

type TypedTransactionEntity_Buyer struct {
	Buyer *Buyer `protobuf:"bytes,6,,name=Buyer,proto3,oneof"`
}

type TypedTransactionEntity_Migration struct {
	Migration *Migration `protobuf:"bytes,13,,name=Migration,proto3,oneof"`
}

type TypedTransactionEntity_FeatureFlagBool struct {
	FeatureFlagBool *FeatureFlagBool `protobuf:"bytes,16,,name=FeatureFlagBool,proto3,oneof"`
}

type TypedTransactionEntity_Relay struct {
	Relay *Relay `protobuf:"bytes,1,,name=Relay,proto3,oneof"`
}

type TypedTransactionEntity_Customer struct {
	Customer *Customer `protobuf:"bytes,11,,name=Customer,proto3,oneof"`
}

type TypedTransactionEntity_Datacenter struct {
	Datacenter *Datacenter `protobuf:"bytes,4,,name=Datacenter,proto3,oneof"`
}

type TypedTransactionEntity_Seller struct {
	Seller *Seller `protobuf:"bytes,5,,name=Seller,proto3,oneof"`
}

type TypedTransactionEntity_Release struct {
	Release *Release `protobuf:"bytes,12,,name=Release,proto3,oneof"`
}

type TypedTransactionEntity_RouteShader struct {
	RouteShader *RouteShader `protobuf:"bytes,17,,name=RouteShader,proto3,oneof"`
}

type TypedTransactionEntity_MapRegion struct {
	MapRegion *MapRegion `protobuf:"bytes,15,,name=MapRegion,proto3,oneof"`
}

func (*TypedTransactionEntity_Buyer) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_Migration) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_FeatureFlagBool) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_Relay) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_Customer) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_Datacenter) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_Seller) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_Release) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_RouteShader) isTypedTransactionEntity_Entity() {}

func (*TypedTransactionEntity_MapRegion) isTypedTransactionEntity_Entity() {}

func (m *TypedTransactionEntity) GetEntity() isTypedTransactionEntity_Entity {
	if m != nil {
		return m.Entity
	}
	return nil
}

func (m *TypedTransactionEntity) GetBuyer() *Buyer {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_Buyer); ok {
		return x.Buyer
	}
	return nil
}

func (m *TypedTransactionEntity) GetMigration() *Migration {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_Migration); ok {
		return x.Migration
	}
	return nil
}

func (m *TypedTransactionEntity) GetFeatureFlagBool() *FeatureFlagBool {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_FeatureFlagBool); ok {
		return x.FeatureFlagBool
	}
	return nil
}

func (m *TypedTransactionEntity) GetRelay() *Relay {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_Relay); ok {
		return x.Relay
	}
	return nil
}

func (m *TypedTransactionEntity) GetCustomer() *Customer {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_Customer); ok {
		return x.Customer
	}
	return nil
}

func (m *TypedTransactionEntity) GetDatacenter() *Datacenter {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_Datacenter); ok {
		return x.Datacenter
	}
	return nil
}

func (m *TypedTransactionEntity) GetSeller() *Seller {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_Seller); ok {
		return x.Seller
	}
	return nil
}

func (m *TypedTransactionEntity) GetRelease() *Release {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_Release); ok {
		return x.Release
	}
	return nil
}

func (m *TypedTransactionEntity) GetRouteShader() *RouteShader {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_RouteShader); ok {
		return x.RouteShader
	}
	return nil
}

func (m *TypedTransactionEntity) GetMapRegion() *MapRegion {
	if x, ok := m.GetEntity().(*TypedTransactionEntity_MapRegion); ok {
		return x.MapRegion
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TypedTransactionEntity) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TypedTransactionEntity_Buyer)(nil),
		(*TypedTransactionEntity_Migration)(nil),
		(*TypedTransactionEntity_FeatureFlagBool)(nil),
		(*TypedTransactionEntity_Relay)(nil),
		(*TypedTransactionEntity_Customer)(nil),
		(*TypedTransactionEntity_Datacenter)(nil),
		(*TypedTransactionEntity_Seller)(nil),
		(*TypedTransactionEntity_Release)(nil),
		(*TypedTransactionEntity_RouteShader)(nil),
		(*TypedTransactionEntity_MapRegion)(nil),
	}
}

type TypedTransactionBatch struct {
	MutatedEntities      []*TypedTransactionEntity `protobuf:"bytes,1,rep,name=mutatedEntities,proto3" json:"mutatedEntities,omitempty"`
	DeletedKeys          []*Key                    `protobuf:"bytes,2,rep,name=deletedKeys,proto3" json:"deletedKeys,omitempty"`
	Description          string                    `protobuf:"bytes,3,,name=description,proto3" json:"description,omitempty"`
	Id                   string                    `protobuf:"bytes,4,,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TypedTransactionBatch) Reset()         { *m = TypedTransactionBatch{} }
func (m *TypedTransactionBatch) String() string { return proto.CompactTextString(m) }
func (*TypedTransactionBatch) ProtoMessage()    {}
func (*TypedTransactionBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{180}
}

func (m *TypedTransactionBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypedTransactionBatch.Unmarshal(m, b)
}
func (m *TypedTransactionBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypedTransactionBatch.Marshal(b, m, deterministic)
}
func (m *TypedTransactionBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedTransactionBatch.Merge(m, src)
}
func (m *TypedTransactionBatch) XXX_Size() int {
	return xxx_messageInfo_TypedTransactionBatch.Size(m)
}
func (m *TypedTransactionBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedTransactionBatch.DiscardUnknown(m)
}

var xxx_messageInfo_TypedTransactionBatch proto.InternalMessageInfo

func (m *TypedTransactionBatch) GetMutatedEntities() []*TypedTransactionEntity {
	if m != nil {
		return m.MutatedEntities
	}
	return nil
}

func (m *TypedTransactionBatch) GetDeletedKeys() []*Key {
	if m != nil {
		return m.DeletedKeys
	}
	return nil
}

func (m *TypedTransactionBatch) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TypedTransactionBatch) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type TypedTransactionInitialState struct {
	Entities             []*TypedTransactionEntity `protobuf:"bytes,1,rep,name=entities,proto3" json:"entities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *TypedTransactionInitialState) Reset()         { *m = TypedTransactionInitialState{} }
func (m *TypedTransactionInitialState) String() string { return proto.CompactTextString(m) }
func (*TypedTransactionInitialState) ProtoMessage()    {}
func (*TypedTransactionInitialState) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{181}
}

func (m *TypedTransactionInitialState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypedTransactionInitialState.Unmarshal(m, b)
}
func (m *TypedTransactionInitialState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypedTransactionInitialState.Marshal(b, m, deterministic)
}
func (m *TypedTransactionInitialState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedTransactionInitialState.Merge(m, src)
}
func (m *TypedTransactionInitialState) XXX_Size() int {
	return xxx_messageInfo_TypedTransactionInitialState.Size(m)
}
func (m *TypedTransactionInitialState) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedTransactionInitialState.DiscardUnknown(m)
}

var xxx_messageInfo_TypedTransactionInitialState proto.InternalMessageInfo

func (m *TypedTransactionInitialState) GetEntities() []*TypedTransactionEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

type TypedWatchTransactionsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TypedWatchTransactionsRequest) Reset()         { *m = TypedWatchTransactionsRequest{} }
func (m *TypedWatchTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*TypedWatchTransactionsRequest) ProtoMessage()    {}
func (*TypedWatchTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{182}
}

func (m *TypedWatchTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypedWatchTransactionsRequest.Unmarshal(m, b)
}
func (m *TypedWatchTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypedWatchTransactionsRequest.Marshal(b, m, deterministic)
}
func (m *TypedWatchTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedWatchTransactionsRequest.Merge(m, src)
}
func (m *TypedWatchTransactionsRequest) XXX_Size() int {
	return xxx_messageInfo_TypedWatchTransactionsRequest.Size(m)
}
func (m *TypedWatchTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedWatchTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TypedWatchTransactionsRequest proto.InternalMessageInfo

type TypedWatchTransactionsResponse struct {
	// Types that are valid to be assigned to Response:
	//	*TypedWatchTransactionsResponse_Batch
	//	*TypedWatchTransactionsResponse_InitialState
	Response             isTypedWatchTransactionsResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *TypedWatchTransactionsResponse) Reset()         { *m = TypedWatchTransactionsResponse{} }
func (m *TypedWatchTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*TypedWatchTransactionsResponse) ProtoMessage()    {}
func (*TypedWatchTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3eaf2c85e69e9ea4, []int{183}
}

func (m *TypedWatchTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TypedWatchTransactionsResponse.Unmarshal(m, b)
}
func (m *TypedWatchTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TypedWatchTransactionsResponse.Marshal(b, m, deterministic)
}
func (m *TypedWatchTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TypedWatchTransactionsResponse.Merge(m, src)
}
func (m *TypedWatchTransactionsResponse) XXX_Size() int {
	return xxx_messageInfo_TypedWatchTransactionsResponse.Size(m)
}
func (m *TypedWatchTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TypedWatchTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TypedWatchTransactionsResponse proto.InternalMessageInfo

type isTypedWatchTransactionsResponse_Response interface {
	isTypedWatchTransactionsResponse_Response()
}

type TypedWatchTransactionsResponse_Batch struct {
	Batch *TypedTransactionBatch `protobuf:"bytes,1,,name=batch,proto3,oneof"`
}

type TypedWatchTransactionsResponse_InitialState struct {
	InitialState *TypedTransactionInitialState `protobuf:"bytes,2,,name=initialState,proto3,oneof"`
}

func (*TypedWatchTransactionsResponse_Batch) isTypedWatchTransactionsResponse_Response() {}

func (*TypedWatchTransactionsResponse_InitialState) isTypedWatchTransactionsResponse_Response() {}

func (m *TypedWatchTransactionsResponse) GetResponse() isTypedWatchTransactionsResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TypedWatchTransactionsResponse) GetBatch() *TypedTransactionBatch {
	if x, ok := m.GetResponse().(*TypedWatchTransactionsResponse_Batch); ok {
		return x.Batch
	}
	return nil
}

func (m *TypedWatchTransactionsResponse) GetInitialState() *TypedTransactionInitialState {
	if x, ok := m.GetResponse().(*TypedWatchTransactionsResponse_InitialState); ok {
		return x.InitialState
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TypedWatchTransactionsResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TypedWatchTransactionsResponse_Batch)(nil),
		(*TypedWatchTransactionsResponse_InitialState)(nil),
	}
}

func init() {
	proto.RegisterEnum("config.ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("config.SchemaFieldEditorInfoType", SchemaFieldEditorInfoType_name, SchemaFieldEditorInfoType_value)
	proto.RegisterEnum("config.SchemaIndexType", SchemaIndexType_name, SchemaIndexType_value)
	proto.RegisterEnum("config.WatchEventType", WatchEventType_name, WatchEventType_value)
	proto.RegisterEnum("config.ConfigstoreTraceEntry_ConfigstoreTraceEntryType", ConfigstoreTraceEntry_ConfigstoreTraceEntryType_name, ConfigstoreTraceEntry_ConfigstoreTraceEntryType_value)
	proto.RegisterType((*PartitionId)(nil), "config.PartitionId")
	proto.RegisterType((*PathElement)(nil), "config.PathElement")
	proto.RegisterType((*Key)(nil), "config.Key")
	proto.RegisterType((*Value)(nil), "config.Value")
	proto.RegisterType((*SchemaField)(nil), "config.SchemaField")
	proto.RegisterType((*SchemaFieldEditorInfo)(nil), "config.SchemaFieldEditorInfo")
	proto.RegisterType((*SchemaFieldEditorValidator)(nil), "config.SchemaFieldEditorValidator")
	proto.RegisterType((*SchemaFieldEditorValidatorRequired)(nil), "config.SchemaFieldEditorValidatorRequired")
	proto.RegisterType((*SchemaFieldEditorValidatorFixedLength)(nil), "config.SchemaFieldEditorValidatorFixedLength")
	proto.RegisterType((*SchemaFieldEditorValidatorDefault)(nil), "config.SchemaFieldEditorValidatorDefault")
	proto.RegisterType((*SchemaFieldEditorValidatorFormatIPAddress)(nil), "config.SchemaFieldEditorValidatorFormatIPAddress")
	proto.RegisterType((*SchemaFieldEditorValidatorFormatIPAddressPort)(nil), "config.SchemaFieldEditorValidatorFormatIPAddressPort")
	proto.RegisterType((*SchemaKindEditor)(nil), "config.SchemaKindEditor")
	proto.RegisterType((*SchemaKind)(nil), "config.SchemaKind")
	proto.RegisterType((*SchemaIndex)(nil), "config.SchemaIndex")
	proto.RegisterType((*SchemaComputedIndex)(nil), "config.SchemaComputedIndex")
	proto.RegisterType((*SchemaComputedIndexFnv64A)(nil), "config.SchemaComputedIndexFnv64a")
	proto.RegisterType((*SchemaComputedIndexFnv64APair)(nil), "config.SchemaComputedIndexFnv64aPair")
	proto.RegisterType((*SchemaComputedIndexFnv32A)(nil), "config.SchemaComputedIndexFnv32a")
	proto.RegisterType((*SchemaComputedIndexFnv32APair)(nil), "config.SchemaComputedIndexFnv32aPair")
	proto.RegisterType((*Schema)(nil), "config.Schema")
	proto.RegisterMapType((map[string]*SchemaKind)(nil), "config.Schema.KindsEntry")
	proto.RegisterType((*GetSchemaRequest)(nil), "config.GetSchemaRequest")
	proto.RegisterType((*GetSchemaResponse)(nil), "config.GetSchemaResponse")
	proto.RegisterType((*MetaListEntitiesRequest)(nil), "config.MetaListEntitiesRequest")
	proto.RegisterType((*MetaListEntitiesResponse)(nil), "config.MetaListEntitiesResponse")
	proto.RegisterType((*MetaEntity)(nil), "config.MetaEntity")
	proto.RegisterType((*GetDefaultPartitionIdRequest)(nil), "config.GetDefaultPartitionIdRequest")
	proto.RegisterType((*GetDefaultPartitionIdResponse)(nil), "config.GetDefaultPartitionIdResponse")
	proto.RegisterType((*MetaGetEntityRequest)(nil), "config.MetaGetEntityRequest")
	proto.RegisterType((*MetaGetEntityResponse)(nil), "config.MetaGetEntityResponse")
	proto.RegisterType((*MetaUpdateEntityRequest)(nil), "config.MetaUpdateEntityRequest")
	proto.RegisterType((*MetaUpdateEntityResponse)(nil), "config.MetaUpdateEntityResponse")
	proto.RegisterType((*MetaCreateEntityRequest)(nil), "config.MetaCreateEntityRequest")
	proto.RegisterType((*MetaCreateEntityResponse)(nil), "config.MetaCreateEntityResponse")
	proto.RegisterType((*MetaDeleteEntityRequest)(nil), "config.MetaDeleteEntityRequest")
	proto.RegisterType((*MetaDeleteEntityResponse)(nil), "config.MetaDeleteEntityResponse")
	proto.RegisterType((*GetTransactionQueueCountRequest)(nil), "config.GetTransactionQueueCountRequest")
	proto.RegisterType((*GetTransactionQueueCountResponse)(nil), "config.GetTransactionQueueCountResponse")
	proto.RegisterType((*MetaTransaction)(nil), "config.MetaTransaction")
	proto.RegisterType((*MetaOperation)(nil), "config.MetaOperation")
	proto.RegisterType((*MetaTransactionResult)(nil), "config.MetaTransactionResult")
	proto.RegisterType((*MetaOperationResultError)(nil), "config.MetaOperationResultError")
	proto.RegisterType((*MetaOperationResult)(nil), "config.MetaOperationResult")
	proto.RegisterType((*WatchTransactionsRequest)(nil), "config.WatchTransactionsRequest")
	proto.RegisterType((*WatchTransactionsResponse)(nil), "config.WatchTransactionsResponse")
	proto.RegisterType((*MetaTransactionRecord)(nil), "config.MetaTransactionRecord")
	proto.RegisterType((*MetaTransactionBatch)(nil), "config.MetaTransactionBatch")
	proto.RegisterType((*MetaTransactionInitialState)(nil), "config.MetaTransactionInitialState")
	proto.RegisterType((*ConfigstoreTraceEntry)(nil), "config.ConfigstoreTraceEntry")
	proto.RegisterType((*MapRegion)(nil), "config.MapRegion")
	proto.RegisterType((*ListMapRegionRequest)(nil), "config.ListMapRegionRequest")
	proto.RegisterType((*ListMapRegionResponse)(nil), "config.ListMapRegionResponse")
	proto.RegisterType((*GetMapRegionRequest)(nil), "config.GetMapRegionRequest")
	proto.RegisterType((*GetMapRegionResponse)(nil), "config.GetMapRegionResponse")
	proto.RegisterType((*WatchMapRegionRequest)(nil), "config.WatchMapRegionRequest")
	proto.RegisterType((*WatchMapRegionEvent)(nil), "config.WatchMapRegionEvent")
	proto.RegisterType((*UpdateMapRegionRequest)(nil), "config.UpdateMapRegionRequest")
	proto.RegisterType((*UpdateMapRegionResponse)(nil), "config.UpdateMapRegionResponse")
	proto.RegisterType((*CreateMapRegionRequest)(nil), "config.CreateMapRegionRequest")
	proto.RegisterType((*CreateMapRegionResponse)(nil), "config.CreateMapRegionResponse")
	proto.RegisterType((*DeleteMapRegionRequest)(nil), "config.DeleteMapRegionRequest")
	proto.RegisterType((*DeleteMapRegionResponse)(nil), "config.DeleteMapRegionResponse")
	proto.RegisterType((*Seller)(nil), "config.Seller")
	proto.RegisterType((*ListSellerRequest)(nil), "config.ListSellerRequest")
	proto.RegisterType((*ListSellerResponse)(nil), "config.ListSellerResponse")
	proto.RegisterType((*GetSellerRequest)(nil), "config.GetSellerRequest")
	proto.RegisterType((*GetSellerResponse)(nil), "config.GetSellerResponse")
	proto.RegisterType((*WatchSellerRequest)(nil), "config.WatchSellerRequest")
	proto.RegisterType((*WatchSellerEvent)(nil), "config.WatchSellerEvent")
	proto.RegisterType((*UpdateSellerRequest)(nil), "config.UpdateSellerRequest")
	proto.RegisterType((*UpdateSellerResponse)(nil), "config.UpdateSellerResponse")
	proto.RegisterType((*CreateSellerRequest)(nil), "config.CreateSellerRequest")
	proto.RegisterType((*CreateSellerResponse)(nil), "config.CreateSellerResponse")
	proto.RegisterType((*DeleteSellerRequest)(nil), "config.DeleteSellerRequest")
	proto.RegisterType((*DeleteSellerResponse)(nil), "config.DeleteSellerResponse")
	proto.RegisterType((*Release)(nil), "config.Release")
	proto.RegisterType((*ListReleaseRequest)(nil), "config.ListReleaseRequest")
	proto.RegisterType((*ListReleaseResponse)(nil), "config.ListReleaseResponse")
	proto.RegisterType((*GetReleaseRequest)(nil), "config.GetReleaseRequest")
	proto.RegisterType((*GetReleaseResponse)(nil), "config.GetReleaseResponse")
	proto.RegisterType((*WatchReleaseRequest)(nil), "config.WatchReleaseRequest")
	proto.RegisterType((*WatchReleaseEvent)(nil), "config.WatchReleaseEvent")
	proto.RegisterType((*UpdateReleaseRequest)(nil), "config.UpdateReleaseRequest")
	proto.RegisterType((*UpdateReleaseResponse)(nil), "config.UpdateReleaseResponse")
	proto.RegisterType((*CreateReleaseRequest)(nil), "config.CreateReleaseRequest")
	proto.RegisterType((*CreateReleaseResponse)(nil), "config.CreateReleaseResponse")
	proto.RegisterType((*DeleteReleaseRequest)(nil), "config.DeleteReleaseRequest")
	proto.RegisterType((*DeleteReleaseResponse)(nil), "config.DeleteReleaseResponse")
	proto.RegisterType((*RouteShader)(nil), "config.RouteShader")
	proto.RegisterType((*ListRouteShaderRequest)(nil), "config.ListRouteShaderRequest")
	proto.RegisterType((*ListRouteShaderResponse)(nil), "config.ListRouteShaderResponse")
	proto.RegisterType((*GetRouteShaderRequest)(nil), "config.GetRouteShaderRequest")
	proto.RegisterType((*GetRouteShaderResponse)(nil), "config.GetRouteShaderResponse")
	proto.RegisterType((*WatchRouteShaderRequest)(nil), "config.WatchRouteShaderRequest")
	proto.RegisterType((*WatchRouteShaderEvent)(nil), "config.WatchRouteShaderEvent")
	proto.RegisterType((*UpdateRouteShaderRequest)(nil), "config.UpdateRouteShaderRequest")
	proto.RegisterType((*UpdateRouteShaderResponse)(nil), "config.UpdateRouteShaderResponse")
	proto.RegisterType((*CreateRouteShaderRequest)(nil), "config.CreateRouteShaderRequest")
	proto.RegisterType((*CreateRouteShaderResponse)(nil), "config.CreateRouteShaderResponse")
	proto.RegisterType((*DeleteRouteShaderRequest)(nil), "config.DeleteRouteShaderRequest")
	proto.RegisterType((*DeleteRouteShaderResponse)(nil), "config.DeleteRouteShaderResponse")
	proto.RegisterType((*Datacenter)(nil), "config.Datacenter")
	proto.RegisterType((*ListDatacenterRequest)(nil), "config.ListDatacenterRequest")
	proto.RegisterType((*ListDatacenterResponse)(nil), "config.ListDatacenterResponse")
	proto.RegisterType((*GetDatacenterRequest)(nil), "config.GetDatacenterRequest")
	proto.RegisterType((*GetDatacenterResponse)(nil), "config.GetDatacenterResponse")
	proto.RegisterType((*WatchDatacenterRequest)(nil), "config.WatchDatacenterRequest")
	proto.RegisterType((*WatchDatacenterEvent)(nil), "config.WatchDatacenterEvent")
	proto.RegisterType((*UpdateDatacenterRequest)(nil), "config.UpdateDatacenterRequest")
	proto.RegisterType((*UpdateDatacenterResponse)(nil), "config.UpdateDatacenterResponse")
	proto.RegisterType((*CreateDatacenterRequest)(nil), "config.CreateDatacenterRequest")
	proto.RegisterType((*CreateDatacenterResponse)(nil), "config.CreateDatacenterResponse")
	proto.RegisterType((*DeleteDatacenterRequest)(nil), "config.DeleteDatacenterRequest")
	proto.RegisterType((*DeleteDatacenterResponse)(nil), "config.DeleteDatacenterResponse")
	proto.RegisterType((*Buyer)(nil), "config.Buyer")
	proto.RegisterType((*ListBuyerRequest)(nil), "config.ListBuyerRequest")
	proto.RegisterType((*ListBuyerResponse)(nil), "config.ListBuyerResponse")
	proto.RegisterType((*GetBuyerRequest)(nil), "config.GetBuyerRequest")
	proto.RegisterType((*GetBuyerResponse)(nil), "config.GetBuyerResponse")
	proto.RegisterType((*WatchBuyerRequest)(nil), "config.WatchBuyerRequest")
	proto.RegisterType((*WatchBuyerEvent)(nil), "config.WatchBuyerEvent")
	proto.RegisterType((*UpdateBuyerRequest)(nil), "config.UpdateBuyerRequest")
	proto.RegisterType((*UpdateBuyerResponse)(nil), "config.UpdateBuyerResponse")
	proto.RegisterType((*CreateBuyerRequest)(nil), "config.CreateBuyerRequest")
	proto.RegisterType((*CreateBuyerResponse)(nil), "config.CreateBuyerResponse")
	proto.RegisterType((*DeleteBuyerRequest)(nil), "config.DeleteBuyerRequest")
	proto.RegisterType((*DeleteBuyerResponse)(nil), "config.DeleteBuyerResponse")
	proto.RegisterType((*Migration)(nil), "config.Migration")
	proto.RegisterType((*ListMigrationRequest)(nil), "config.ListMigrationRequest")
	proto.RegisterType((*ListMigrationResponse)(nil), "config.ListMigrationResponse")
	proto.RegisterType((*GetMigrationRequest)(nil), "config.GetMigrationRequest")
	proto.RegisterType((*GetMigrationResponse)(nil), "config.GetMigrationResponse")
	proto.RegisterType((*WatchMigrationRequest)(nil), "config.WatchMigrationRequest")
	proto.RegisterType((*WatchMigrationEvent)(nil), "config.WatchMigrationEvent")
	proto.RegisterType((*UpdateMigrationRequest)(nil), "config.UpdateMigrationRequest")
	proto.RegisterType((*UpdateMigrationResponse)(nil), "config.UpdateMigrationResponse")
	proto.RegisterType((*CreateMigrationRequest)(nil), "config.CreateMigrationRequest")
	proto.RegisterType((*CreateMigrationResponse)(nil), "config.CreateMigrationResponse")
	proto.RegisterType((*DeleteMigrationRequest)(nil), "config.DeleteMigrationRequest")
	proto.RegisterType((*DeleteMigrationResponse)(nil), "config.DeleteMigrationResponse")
	proto.RegisterType((*FeatureFlagBool)(nil), "config.FeatureFlagBool")
	proto.RegisterType((*ListFeatureFlagBoolRequest)(nil), "config.ListFeatureFlagBoolRequest")
	proto.RegisterType((*ListFeatureFlagBoolResponse)(nil), "config.ListFeatureFlagBoolResponse")
	proto.RegisterType((*GetFeatureFlagBoolRequest)(nil), "config.GetFeatureFlagBoolRequest")
	proto.RegisterType((*GetFeatureFlagBoolResponse)(nil), "config.GetFeatureFlagBoolResponse")
	proto.RegisterType((*WatchFeatureFlagBoolRequest)(nil), "config.WatchFeatureFlagBoolRequest")
	proto.RegisterType((*WatchFeatureFlagBoolEvent)(nil), "config.WatchFeatureFlagBoolEvent")
	proto.RegisterType((*UpdateFeatureFlagBoolRequest)(nil), "config.UpdateFeatureFlagBoolRequest")
	proto.RegisterType((*UpdateFeatureFlagBoolResponse)(nil), "config.UpdateFeatureFlagBoolResponse")
	proto.RegisterType((*CreateFeatureFlagBoolRequest)(nil), "config.CreateFeatureFlagBoolRequest")
	proto.RegisterType((*CreateFeatureFlagBoolResponse)(nil), "config.CreateFeatureFlagBoolResponse")
	proto.RegisterType((*DeleteFeatureFlagBoolRequest)(nil), "config.DeleteFeatureFlagBoolRequest")
	proto.RegisterType((*DeleteFeatureFlagBoolResponse)(nil), "config.DeleteFeatureFlagBoolResponse")
	proto.RegisterType((*Relay)(nil), "config.Relay")
	proto.RegisterType((*ListRelayRequest)(nil), "config.ListRelayRequest")
	proto.RegisterType((*ListRelayResponse)(nil), "config.ListRelayResponse")
	proto.RegisterType((*GetRelayRequest)(nil), "config.GetRelayRequest")
	proto.RegisterType((*GetRelayResponse)(nil), "config.GetRelayResponse")
	proto.RegisterType((*WatchRelayRequest)(nil), "config.WatchRelayRequest")
	proto.RegisterType((*WatchRelayEvent)(nil), "config.WatchRelayEvent")
	proto.RegisterType((*UpdateRelayRequest)(nil), "config.UpdateRelayRequest")
	proto.RegisterType((*UpdateRelayResponse)(nil), "config.UpdateRelayResponse")
	proto.RegisterType((*CreateRelayRequest)(nil), "config.CreateRelayRequest")
	proto.RegisterType((*CreateRelayResponse)(nil), "config.CreateRelayResponse")
	proto.RegisterType((*DeleteRelayRequest)(nil), "config.DeleteRelayRequest")
	proto.RegisterType((*DeleteRelayResponse)(nil), "config.DeleteRelayResponse")
	proto.RegisterType((*Customer)(nil), "config.Customer")
	proto.RegisterType((*ListCustomerRequest)(nil), "config.ListCustomerRequest")
	proto.RegisterType((*ListCustomerResponse)(nil), "config.ListCustomerResponse")
	proto.RegisterType((*GetCustomerRequest)(nil), "config.GetCustomerRequest")
	proto.RegisterType((*GetCustomerResponse)(nil), "config.GetCustomerResponse")
	proto.RegisterType((*WatchCustomerRequest)(nil), "config.WatchCustomerRequest")
	proto.RegisterType((*WatchCustomerEvent)(nil), "config.WatchCustomerEvent")
	proto.RegisterType((*UpdateCustomerRequest)(nil), "config.UpdateCustomerRequest")
	proto.RegisterType((*UpdateCustomerResponse)(nil), "config.UpdateCustomerResponse")
	proto.RegisterType((*CreateCustomerRequest)(nil), "config.CreateCustomerRequest")
	proto.RegisterType((*CreateCustomerResponse)(nil), "config.CreateCustomerResponse")
	proto.RegisterType((*DeleteCustomerRequest)(nil), "config.DeleteCustomerRequest")
	proto.RegisterType((*DeleteCustomerResponse)(nil), "config.DeleteCustomerResponse")
	proto.RegisterType((*TypedTransactionEntity)(nil), "config.TypedTransactionEntity")
	proto.RegisterType((*TypedTransactionBatch)(nil), "config.TypedTransactionBatch")
	proto.RegisterType((*TypedTransactionInitialState)(nil), "config.TypedTransactionInitialState")
	proto.RegisterType((*TypedWatchTransactionsRequest)(nil), "config.TypedWatchTransactionsRequest")
	proto.RegisterType((*TypedWatchTransactionsResponse)(nil), "config.TypedWatchTransactionsResponse")
}

func init() { proto.RegisterFile("config.proto", fileDescriptor_3eaf2c85e69e9ea4) }

var fileDescriptor_3eaf2c85e69e9ea4 = []byte{
	// 6336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x7d, 0x4b, 0x6c, 0x1b, 0xc9,
	0x76, 0xb6, 0x28, 0x4a, 0x14, 0x75, 0xa8, 0x07, 0x5d, 0x7a, 0xb5, 0xa8, 0x87, 0xe5, 0xb6, 0x3d,
	0x43, 0x7b, 0xc6, 0x8f, 0xa1, 0x67, 0x3c, 0x33, 0xf6, 0xf8, 0x21, 0x51, 0x94, 0xc8, 0xdf, 0x7a,
	0x4d, 0x93, 0xf2, 0x9d, 0xb9, 0xc0, 0x0f, 0xa5, 0x45, 0x96, 0xa5, 0xbe, 0x26, 0xbb, 0x99, 0xee,
	0xa6, 0x6d, 0x05, 0x59, 0x64, 0x91, 0x6d, 0x90, 0x65, 0x80, 0x24, 0x08, 0x82, 0x20, 0xc8, 0xbd,
	0x48, 0x36, 0x77, 0x91, 0x2c, 0xb2, 0x09, 0x92, 0xc5, 0x05, 0x92, 0x2c, 0xee, 0x36, 0x8b, 0x6c,
	0x92, 0x4d, 0x56, 0x41, 0x16, 0xd9, 0x26, 0x17, 0x08, 0xea, 0xd5, 0xec, 0xea, 0x07, 0x29, 0x52,
	0x73, 0x77, 0xec, 0x3a, 0xe7, 0x7c, 0x75, 0xfa, 0x9c, 0xaa, 0xaf, 0xab, 0xaa, 0xab, 0x9a, 0x30,
	0x55, 0xb7, 0xcc, 0x37, 0xc6, 0xd9, 0xfd, 0xb6, 0x6d, 0xb9, 0x16, 0x4a, 0xb1, 0xab, 0xdc, 0xf5,
	0x33, 0xcb, 0x3a, 0x6b, 0xe2, 0x07, 0xb4, 0xf4, 0xb4, 0xf3, 0xe6, 0x81, 0x6b, 0xb4, 0xb0, 0xe3,
	0xea, 0xad, 0x36, 0x53, 0x54, 0x3f, 0x81, 0xcc, 0x91, 0x6e, 0xbb, 0x86, 0x6b, 0x58, 0x66, 0xa5,
	0x81, 0x56, 0x61, 0xd2, 0xd4, 0x5b, 0xd8, 0x69, 0xeb, 0x75, 0xac, 0x24, 0x36, 0x12, 0xf9, 0x49,
	0xad, 0x5b, 0xa0, 0x56, 0x89, 0xb2, 0x7b, 0x5e, 0x6a, 0xe2, 0x16, 0x36, 0x5d, 0x84, 0x60, 0xec,
	0xad, 0x61, 0x36, 0xb8, 0x1e, 0xfd, 0x8d, 0xb2, 0x30, 0x6a, 0x34, 0x94, 0xd1, 0x8d, 0x44, 0x3e,
	0x59, 0x1e, 0xd1, 0x46, 0x8d, 0x06, 0x9a, 0x87, 0x31, 0x82, 0xa0, 0x24, 0x89, 0x56, 0x79, 0x44,
	0xa3, 0x57, 0x5b, 0x69, 0x48, 0x19, 0x8d, 0xda, 0x45, 0x1b, 0xab, 0x18, 0x92, 0xaf, 0xf0, 0x05,
	0xfa, 0x02, 0x32, 0xed, 0xae, 0x23, 0x14, 0x33, 0x53, 0x98, 0xbb, 0xcf, 0xef, 0xca, 0xe7, 0xa3,
	0xe6, 0xd7, 0x43, 0x1f, 0xc3, 0x58, 0x5b, 0x77, 0xcf, 0x95, 0xd1, 0x8d, 0xa4, 0xac, 0xef, 0xb9,
	0xa9, 0x51, 0x05, 0xf5, 0x57, 0xa3, 0x30, 0xfe, 0x5a, 0x6f, 0x76, 0x30, 0x9a, 0xa1, 0x2e, 0x92,
	0x0a, 0xc6, 0xa9, 0x83, 0xb7, 0x61, 0xcc, 0xbd, 0x68, 0x63, 0xea, 0xf4, 0x4c, 0xe1, 0x9a, 0x80,
	0xa0, 0xca, 0xc4, 0x43, 0x8d, 0x8a, 0xd1, 0x06, 0x64, 0x1a, 0x56, 0xe7, 0xb4, 0x89, 0xa9, 0x80,
	0xde, 0x4e, 0x42, 0xf3, 0x17, 0x21, 0x15, 0xc0, 0x30, 0xdd, 0xc7, 0x9f, 0x33, 0x85, 0x31, 0x12,
	0x83, 0xad, 0xd1, 0x87, 0x09, 0xcd, 0x57, 0x4a, 0x50, 0x1c, 0xd7, 0x36, 0xcc, 0x33, 0xa6, 0x34,
	0x4e, 0x43, 0xe7, 0x2f, 0x42, 0x5b, 0x30, 0xe3, 0x25, 0x89, 0x29, 0xa5, 0x68, 0x2c, 0x72, 0xf7,
	0x59, 0x2e, 0xef, 0x8b, 0x5c, 0xde, 0xaf, 0x09, 0x35, 0x2d, 0x60, 0x81, 0x54, 0x98, 0x3a, 0xb5,
	0xac, 0x26, 0xd6, 0x4d, 0x86, 0x30, 0xb1, 0x91, 0xc8, 0xa7, 0x35, 0xa9, 0x0c, 0xad, 0x03, 0x9c,
	0x5e, 0xb8, 0xd8, 0x61, 0x1a, 0xe9, 0x8d, 0x44, 0x7e, 0x4a, 0xf3, 0x95, 0xa0, 0x8f, 0x21, 0xfd,
	0x16, 0x5f, 0x30, 0xe9, 0x24, 0xf5, 0x20, 0x23, 0x42, 0xf3, 0x0a, 0x5f, 0x68, 0x9e, 0x10, 0xdd,
	0x82, 0x4c, 0xc7, 0x77, 0xdf, 0xb0, 0x91, 0xc8, 0x8f, 0xd1, 0xfb, 0xf6, 0x17, 0xab, 0xbf, 0x48,
	0x40, 0xa6, 0x5a, 0x3f, 0xc7, 0x2d, 0x7d, 0xc7, 0xc0, 0xcd, 0x46, 0x28, 0x0b, 0x88, 0x37, 0x93,
	0x51, 0xd6, 0x98, 0xc8, 0x6f, 0x2f, 0x33, 0xc9, 0xde, 0x99, 0x51, 0x60, 0xa2, 0x6e, 0xb5, 0x48,
	0xae, 0x69, 0xd0, 0x27, 0x35, 0x71, 0x89, 0xbe, 0x80, 0x14, 0x6e, 0x18, 0xae, 0x65, 0xd3, 0x40,
	0x67, 0x0a, 0x6b, 0x02, 0xc2, 0xe7, 0x49, 0x89, 0x2a, 0x54, 0xcc, 0x37, 0x96, 0xc6, 0x95, 0x51,
	0x0e, 0xd2, 0x36, 0xd6, 0x1b, 0x96, 0xd9, 0xbc, 0xa0, 0xc1, 0x4f, 0x6b, 0xde, 0xb5, 0xfa, 0xdf,
	0xa3, 0xb0, 0x10, 0x69, 0x4d, 0x1b, 0x88, 0xe1, 0xb4, 0x9b, 0xfa, 0xc5, 0x01, 0xb9, 0x11, 0xd6,
	0x2b, 0xfc, 0x45, 0xe8, 0x0b, 0xa9, 0xa5, 0xdd, 0xe8, 0xe9, 0x8c, 0xef, 0xfe, 0x3e, 0x82, 0x19,
	0xe6, 0x98, 0x26, 0x9c, 0x4a, 0x52, 0xa7, 0x02, 0xa5, 0x24, 0xeb, 0x7a, 0xb3, 0x69, 0xbd, 0xc7,
	0x8d, 0x57, 0x86, 0xd9, 0x70, 0x94, 0xb1, 0x8d, 0x64, 0x7e, 0x52, 0x93, 0xca, 0x50, 0x0d, 0x6e,
	0x77, 0x1c, 0xbc, 0x63, 0x98, 0xba, 0x59, 0x37, 0xf4, 0x26, 0x0b, 0xa5, 0x75, 0x60, 0x9c, 0x9e,
	0x36, 0x0d, 0xd3, 0x29, 0x5a, 0xe6, 0x3b, 0x6c, 0x3b, 0x86, 0x65, 0xd2, 0x80, 0xa5, 0xb5, 0xcb,
	0x29, 0xa3, 0x2d, 0x80, 0x77, 0x7a, 0xd3, 0x68, 0xe8, 0xae, 0x65, 0x3b, 0x4a, 0x8a, 0xf6, 0x45,
	0x35, 0xf6, 0xf6, 0x5e, 0x0b, 0x55, 0xcd, 0x67, 0x45, 0x82, 0xee, 0xe2, 0x0f, 0xee, 0xa6, 0x8d,
	0x75, 0xde, 0x5e, 0xbd, 0x6b, 0xf5, 0x5f, 0x92, 0x90, 0x8b, 0x87, 0x41, 0x65, 0x92, 0xaf, 0xdf,
	0xec, 0x18, 0x36, 0x16, 0xc4, 0x71, 0xf7, 0x12, 0x95, 0x73, 0x8b, 0xf2, 0x88, 0xe6, 0x59, 0xa3,
	0x6f, 0x21, 0xf3, 0xc6, 0xf8, 0x80, 0x1b, 0x7b, 0xd8, 0x3c, 0xa3, 0xac, 0x42, 0xc0, 0xee, 0xf5,
	0x07, 0xdb, 0xe9, 0x1a, 0x95, 0x47, 0x34, 0x3f, 0x06, 0x2a, 0xc1, 0x44, 0x03, 0xbf, 0xd1, 0x3b,
	0x4d, 0x97, 0xa6, 0x2d, 0x53, 0xb8, 0xd3, 0x1f, 0x6e, 0x9b, 0x19, 0x94, 0x47, 0x34, 0x61, 0x8b,
	0xfe, 0x3f, 0xcc, 0xbe, 0xb1, 0xec, 0x96, 0xee, 0x56, 0x8e, 0x36, 0x1b, 0x0d, 0x1b, 0x3b, 0x0e,
	0x6d, 0xec, 0x99, 0xc2, 0x67, 0x97, 0xf0, 0x4e, 0x36, 0x2c, 0x8f, 0x68, 0x41, 0x2c, 0x64, 0xc0,
	0x5c, 0xa0, 0xe8, 0xc8, 0xb2, 0x5d, 0xde, 0x6d, 0xbe, 0x18, 0xb8, 0x0a, 0x62, 0x5c, 0x1e, 0xd1,
	0xa2, 0x30, 0xb7, 0x32, 0x30, 0xe9, 0xa5, 0x5d, 0xbd, 0x05, 0x6a, 0xff, 0x14, 0xa9, 0x2f, 0xe0,
	0xf6, 0xa5, 0x62, 0x8f, 0x16, 0x21, 0xd5, 0x64, 0xa9, 0x23, 0xed, 0x60, 0x5a, 0xe3, 0x57, 0x6a,
	0x19, 0x6e, 0xf4, 0x8d, 0x36, 0xba, 0x09, 0xe3, 0xef, 0x28, 0x85, 0xb1, 0x36, 0x34, 0x2d, 0xf1,
	0x8d, 0xc6, 0x64, 0xea, 0x27, 0x70, 0xe7, 0xd2, 0x51, 0x50, 0x1f, 0xc0, 0xbd, 0x81, 0x42, 0xa6,
	0xfe, 0x32, 0x01, 0x59, 0x66, 0x41, 0xba, 0x6b, 0xc9, 0xa3, 0x23, 0xc7, 0x30, 0xcf, 0x3a, 0x4d,
	0xdd, 0xe6, 0xac, 0xe2, 0x5d, 0x93, 0x1b, 0x6e, 0x37, 0x3b, 0xb6, 0xde, 0xe4, 0xc4, 0xc9, 0xaf,
	0xd0, 0x36, 0xac, 0xd9, 0xd8, 0x6c, 0x60, 0x9b, 0x61, 0x6c, 0xdb, 0x56, 0xbb, 0x61, 0xbd, 0x37,
	0x7f, 0x64, 0xb8, 0xe7, 0xd4, 0x17, 0xf6, 0x38, 0xd6, 0x7a, 0x2b, 0x91, 0x67, 0xc4, 0x5b, 0x7c,
	0x51, 0x94, 0xc8, 0xd5, 0x57, 0x42, 0x9f, 0x66, 0x24, 0xa5, 0x17, 0x0c, 0x53, 0x3c, 0xcd, 0xba,
	0x45, 0xea, 0x3f, 0x26, 0x00, 0xba, 0x37, 0x84, 0x3e, 0x81, 0xd4, 0x1b, 0x52, 0xee, 0x04, 0x1f,
	0xd8, 0xbe, 0x30, 0x69, 0x5c, 0x05, 0x3d, 0xf4, 0xd8, 0x9b, 0x75, 0x1c, 0x45, 0x56, 0xee, 0x46,
	0xc8, 0x23, 0xee, 0x7b, 0x30, 0x61, 0x98, 0x0d, 0xfc, 0x01, 0x33, 0xf2, 0x0b, 0xe1, 0x57, 0x88,
	0x50, 0x13, 0x3a, 0x64, 0xb4, 0xa3, 0x9b, 0x75, 0xec, 0x50, 0xd6, 0x1a, 0xa7, 0x6c, 0xd9, 0x2d,
	0xe0, 0x4f, 0xa8, 0x94, 0x78, 0x42, 0xa9, 0x7f, 0xe9, 0x3d, 0xc1, 0x28, 0x8c, 0xf7, 0xc4, 0x4a,
	0xf8, 0x9e, 0x58, 0x9f, 0x48, 0x0c, 0xbf, 0x14, 0x51, 0xbb, 0x8f, 0xd7, 0xbf, 0x86, 0x74, 0xdd,
	0x6a, 0xb5, 0x3b, 0x2e, 0x6e, 0xf0, 0x3b, 0x5c, 0x91, 0x0d, 0x8a, 0x5c, 0x4a, 0x0d, 0x09, 0x4f,
	0x09, 0x75, 0xb4, 0x08, 0xe3, 0x34, 0x48, 0x2c, 0x27, 0xe5, 0x11, 0x8d, 0x5d, 0x6e, 0x4d, 0xf0,
	0x26, 0xac, 0xfe, 0x7c, 0x14, 0xe6, 0x22, 0x40, 0xd0, 0x53, 0x48, 0xbd, 0x31, 0xdf, 0x3d, 0xfe,
	0x5c, 0xe7, 0x8d, 0xfc, 0x46, 0x8f, 0x1a, 0x77, 0xa8, 0x62, 0x79, 0x44, 0xe3, 0x26, 0xa8, 0x0c,
	0x19, 0xf6, 0xeb, 0xa4, 0xad, 0x1b, 0x36, 0x67, 0xc7, 0xdb, 0x7d, 0x11, 0x8e, 0x74, 0xc3, 0x2e,
	0x8f, 0x68, 0xf0, 0xc6, 0xbb, 0xe2, 0x6e, 0x3c, 0x2a, 0xe8, 0xfc, 0xc6, 0xfb, 0xb8, 0xf1, 0xa8,
	0x20, 0xdc, 0x78, 0x54, 0x10, 0x6e, 0x3c, 0x2a, 0x70, 0x37, 0xc6, 0x2e, 0xe3, 0xc6, 0xa3, 0x82,
	0xdf, 0x0d, 0x7e, 0x45, 0xa8, 0x48, 0x6f, 0x9e, 0x59, 0xb6, 0xe1, 0x9e, 0xb7, 0xd4, 0xcf, 0x60,
	0x39, 0xf6, 0x16, 0xd0, 0xbc, 0x08, 0x38, 0xcb, 0x36, 0xbb, 0x50, 0x0f, 0x61, 0xad, 0xe7, 0x5d,
	0x93, 0xee, 0x49, 0x35, 0x3f, 0xe3, 0x76, 0xfc, 0xca, 0x2b, 0x2f, 0x88, 0x6e, 0xcb, 0xae, 0xe2,
	0x7d, 0x20, 0xf7, 0x3d, 0xa0, 0x0f, 0xfc, 0x26, 0x07, 0xf6, 0xe1, 0x8f, 0x12, 0x90, 0x62, 0x88,
	0x91, 0x4d, 0xfc, 0x01, 0x8c, 0xbf, 0xa5, 0xc3, 0x0b, 0xd6, 0x83, 0x97, 0xe5, 0xb8, 0xdf, 0xa7,
	0xc3, 0x8c, 0x92, 0xe9, 0xda, 0x17, 0x1a, 0xd3, 0xcb, 0xed, 0x01, 0x74, 0x0b, 0x51, 0x16, 0x92,
	0x6f, 0xf1, 0x05, 0x47, 0x24, 0x3f, 0x51, 0x5e, 0xd0, 0x2e, 0x6b, 0x4f, 0x28, 0xdc, 0xcb, 0x39,
	0xf7, 0x3e, 0x19, 0xfd, 0x2a, 0xa1, 0x22, 0xc8, 0xee, 0x62, 0x97, 0xc9, 0xc8, 0xf3, 0x01, 0x3b,
	0xae, 0xfa, 0x14, 0xae, 0xf9, 0xca, 0x9c, 0xb6, 0x65, 0x3a, 0x64, 0xd4, 0x94, 0x72, 0x68, 0x09,
	0x6f, 0xe9, 0x33, 0x32, 0xae, 0xc6, 0xa5, 0xaa, 0x0e, 0x4b, 0xfb, 0xd8, 0xd5, 0xf7, 0x0c, 0xc7,
	0x2d, 0x99, 0x64, 0x5e, 0x81, 0x1d, 0x8e, 0x4b, 0x02, 0xee, 0xb8, 0xba, 0xed, 0x52, 0x84, 0x29,
	0x8d, 0x5d, 0x90, 0xd2, 0xa6, 0xd1, 0x32, 0x5c, 0xea, 0xef, 0xb4, 0xc6, 0x2e, 0x08, 0x49, 0x93,
	0xdb, 0x3d, 0xf0, 0xa6, 0x3a, 0x9a, 0x77, 0xad, 0xfe, 0x4e, 0x02, 0x94, 0x70, 0x1d, 0xdc, 0x4f,
	0x12, 0x63, 0xfc, 0x41, 0xd4, 0x41, 0x7f, 0x13, 0x5e, 0x6d, 0x59, 0x36, 0xd6, 0xb0, 0xd3, 0x69,
	0xba, 0x0e, 0xad, 0x28, 0xad, 0xf9, 0x8b, 0xd0, 0x7d, 0x48, 0x63, 0x8e, 0xa4, 0x24, 0x69, 0x22,
	0xbc, 0xb8, 0x91, 0x9a, 0x68, 0x2d, 0x17, 0x9a, 0xa7, 0xa3, 0x6a, 0x00, 0xdd, 0x72, 0xb4, 0xd6,
	0x4d, 0x42, 0x60, 0x58, 0x4f, 0x33, 0x72, 0x1b, 0x52, 0x34, 0xe0, 0x22, 0xc7, 0x81, 0x27, 0x21,
	0x17, 0xaa, 0xeb, 0xb0, 0xba, 0x8b, 0x5d, 0xfe, 0xf4, 0xf4, 0xcf, 0xd0, 0x78, 0x5a, 0x9e, 0xc1,
	0x5a, 0x8c, 0x9c, 0xdf, 0x7a, 0xef, 0xd9, 0xe6, 0xb7, 0x30, 0x4f, 0x5c, 0xde, 0xc5, 0x2e, 0xbf,
	0x1b, 0x9e, 0x95, 0x3e, 0xce, 0xfb, 0x13, 0x31, 0x1a, 0x48, 0x44, 0x11, 0x16, 0x02, 0x90, 0xdc,
	0x93, 0xbb, 0x90, 0xa2, 0xa1, 0x12, 0xb0, 0x51, 0xc1, 0xe4, 0x1a, 0x6a, 0x89, 0x35, 0x98, 0xe3,
	0x76, 0x43, 0x77, 0xb1, 0xec, 0xda, 0x20, 0x30, 0x3b, 0xac, 0x4d, 0xc8, 0x30, 0x43, 0xb8, 0xc3,
	0xdb, 0x6f, 0xd1, 0xc6, 0x57, 0x71, 0xa7, 0x67, 0xd8, 0xb8, 0xab, 0x72, 0x15, 0x43, 0xb8, 0x5a,
	0x63, 0xae, 0x6e, 0xe3, 0x26, 0x0e, 0xba, 0x7a, 0x85, 0xa4, 0x72, 0xef, 0x64, 0xd4, 0x21, 0xbc,
	0xbb, 0x01, 0xd7, 0x77, 0xb1, 0x5b, 0xb3, 0x75, 0xd3, 0xd1, 0xeb, 0xa4, 0xa5, 0x7e, 0xdb, 0xc1,
	0x1d, 0x5c, 0xb4, 0x3a, 0xa6, 0x2b, 0x5a, 0xf4, 0x77, 0xb0, 0x11, 0xaf, 0xc2, 0xab, 0xfc, 0x1c,
	0x16, 0xdc, 0x28, 0x05, 0x3e, 0x22, 0x8d, 0x16, 0xaa, 0x3f, 0x81, 0x59, 0xe2, 0x92, 0x0f, 0x1a,
	0x7d, 0x01, 0x60, 0xb5, 0xb1, 0xad, 0x93, 0x0b, 0x47, 0x49, 0xd0, 0x9e, 0xb8, 0xe0, 0xf7, 0xff,
	0x50, 0x48, 0x35, 0x9f, 0x22, 0x9d, 0x86, 0x62, 0xa7, 0x6e, 0x1b, 0x6d, 0x72, 0xcd, 0xa3, 0xe5,
	0x2f, 0x52, 0xff, 0x77, 0x14, 0xa6, 0x25, 0x7b, 0x54, 0x84, 0x4c, 0xd3, 0x70, 0xc4, 0x6d, 0xf2,
	0x58, 0x5d, 0xf7, 0xd7, 0x15, 0x41, 0x8f, 0x64, 0xa2, 0xe3, 0xb3, 0x42, 0xcf, 0x01, 0xce, 0xb0,
	0x87, 0xc1, 0xc8, 0x7c, 0xd5, 0x8f, 0x11, 0xec, 0xc9, 0xe4, 0x61, 0xdc, 0xb5, 0x40, 0xbb, 0x30,
	0xdd, 0xa1, 0x9d, 0x41, 0x40, 0x24, 0xc3, 0x6e, 0x44, 0x74, 0xba, 0xf2, 0x88, 0x26, 0xdb, 0x11,
	0xa0, 0x3a, 0x6d, 0xaa, 0x02, 0x68, 0x2c, 0x0c, 0x14, 0xd1, 0x5d, 0x08, 0x90, 0x64, 0x47, 0x80,
	0x1a, 0xb4, 0x55, 0x09, 0xa0, 0xf1, 0x30, 0x50, 0x44, 0x63, 0x26, 0x40, 0x92, 0x1d, 0x19, 0x67,
	0x78, 0x19, 0x52, 0x7f, 0x83, 0x91, 0x90, 0x2f, 0xd5, 0x8c, 0xd4, 0xd1, 0x2e, 0x64, 0x3d, 0x2d,
	0x41, 0xfd, 0x2c, 0xed, 0x2b, 0xd1, 0x69, 0xa7, 0x3a, 0x5a, 0xc8, 0x48, 0x7d, 0xce, 0x7a, 0x44,
	0x40, 0xb1, 0x64, 0xdb, 0x96, 0x8d, 0x54, 0x98, 0xc2, 0xe4, 0xc7, 0x3e, 0x76, 0x1c, 0xfd, 0x4c,
	0xd0, 0xae, 0x54, 0xa6, 0xfe, 0x53, 0x12, 0xe6, 0x22, 0x00, 0xd0, 0x63, 0x18, 0xa7, 0x7a, 0xbc,
	0x81, 0x6c, 0xf4, 0xf0, 0x8a, 0x56, 0xa6, 0x31, 0x75, 0xb4, 0x03, 0x53, 0xac, 0xa1, 0xb0, 0x2e,
	0xc2, 0xdb, 0xc6, 0x46, 0x7c, 0xfb, 0x62, 0x7a, 0xe5, 0x11, 0x4d, 0xb2, 0x43, 0x9b, 0x90, 0xa1,
	0xed, 0x85, 0xc3, 0x24, 0xe5, 0x35, 0x9d, 0x48, 0x66, 0x27, 0x8d, 0xd4, 0x67, 0x83, 0xfe, 0x1f,
	0xcc, 0x88, 0xc6, 0xc2, 0x51, 0xc6, 0xc2, 0xce, 0x44, 0x71, 0x72, 0x79, 0x44, 0x0b, 0x58, 0x12,
	0x2c, 0xd1, 0x5e, 0x38, 0xd6, 0x78, 0x18, 0x2b, 0x8a, 0x34, 0x09, 0x96, 0x6c, 0x49, 0xb0, 0x44,
	0x93, 0xe1, 0x58, 0xa9, 0x30, 0x56, 0x14, 0xc5, 0x11, 0x2c, 0xd9, 0x52, 0x6e, 0x6d, 0x39, 0x50,
	0x7e, 0xa4, 0xbb, 0xf5, 0x73, 0x5f, 0x73, 0x13, 0x1d, 0x58, 0xfd, 0x59, 0x02, 0x96, 0x23, 0x84,
	0x1e, 0x91, 0x8d, 0x9f, 0x12, 0x21, 0xcf, 0xb6, 0xd4, 0x95, 0x7d, 0x06, 0x5b, 0x44, 0x87, 0xcc,
	0x40, 0xa8, 0x32, 0xaa, 0xc0, 0x94, 0x61, 0x1a, 0xae, 0xa1, 0x37, 0xab, 0xae, 0xee, 0x8a, 0x5c,
	0xdf, 0x8c, 0x31, 0xae, 0xf8, 0x54, 0x49, 0xba, 0xfd, 0xa6, 0x5b, 0x00, 0x69, 0x9b, 0x3b, 0xa3,
	0xfe, 0x74, 0x34, 0xa2, 0xd7, 0xd4, 0x2d, 0xbb, 0x81, 0xee, 0x41, 0xa6, 0xd5, 0x21, 0xfa, 0x8d,
	0x57, 0xf8, 0x42, 0x74, 0x18, 0xe9, 0x09, 0xe2, 0x97, 0x13, 0x75, 0x16, 0x2e, 0xa6, 0x3e, 0x1a,
	0xa1, 0xee, 0x93, 0xa3, 0x97, 0x30, 0x4d, 0x72, 0x5e, 0xed, 0x9c, 0xb6, 0x0c, 0xb7, 0x3b, 0x51,
	0xeb, 0xb5, 0x18, 0x2b, 0x1b, 0xa0, 0x6f, 0x20, 0x43, 0x0a, 0x58, 0x3b, 0x68, 0xf0, 0xe6, 0xd6,
	0xcb, 0xde, 0xaf, 0x1e, 0x64, 0xf3, 0xf1, 0x10, 0x9b, 0xfb, 0xa6, 0xa9, 0x93, 0x74, 0x9a, 0xfa,
	0x37, 0x09, 0x36, 0x6e, 0x0a, 0xa6, 0x08, 0x7d, 0x03, 0xb3, 0x3c, 0x10, 0xa2, 0xa3, 0xf1, 0x60,
	0x45, 0x3d, 0x14, 0x83, 0xaa, 0x83, 0xc6, 0x2d, 0xe0, 0x77, 0x32, 0xce, 0xef, 0x31, 0xcf, 0xef,
	0x7d, 0x58, 0xe9, 0xd1, 0x38, 0xa4, 0x01, 0x6f, 0xe2, 0x12, 0x03, 0xde, 0x5f, 0x4c, 0xc1, 0x42,
	0x91, 0xca, 0xc9, 0x6c, 0x1e, 0xd7, 0x6c, 0xbd, 0x8e, 0xd9, 0x0c, 0xe4, 0x15, 0x9f, 0xa3, 0x27,
	0xe8, 0x1c, 0xfd, 0x4b, 0x81, 0x12, 0xa9, 0x1c, 0x5d, 0xea, 0x9b, 0xc3, 0x77, 0x07, 0x18, 0xa3,
	0x7d, 0x87, 0x58, 0x7c, 0x8c, 0x93, 0x8c, 0x19, 0xe3, 0xac, 0x8b, 0xe7, 0xbd, 0x65, 0x57, 0x44,
	0x42, 0x7d, 0x25, 0xe8, 0x16, 0x4c, 0xfb, 0xc6, 0x0e, 0x95, 0x06, 0x5d, 0x25, 0x9d, 0xd4, 0xe4,
	0x42, 0xb4, 0x03, 0xeb, 0x36, 0x6e, 0xe9, 0x86, 0x69, 0x98, 0x67, 0x91, 0x03, 0x15, 0xba, 0xd4,
	0x3f, 0xae, 0xf5, 0xd1, 0x42, 0x8f, 0x61, 0xd1, 0xc6, 0x75, 0xcb, 0x34, 0x31, 0x95, 0x14, 0xad,
	0x06, 0xae, 0xd2, 0xb7, 0x14, 0xf4, 0x65, 0xc0, 0xa4, 0x16, 0x23, 0x25, 0x89, 0xa7, 0xa4, 0xcf,
	0x95, 0x81, 0x25, 0xde, 0x57, 0x44, 0x26, 0x3c, 0x6d, 0xcb, 0x76, 0x95, 0x0c, 0xf5, 0x83, 0xfe,
	0x56, 0xff, 0x60, 0x12, 0x96, 0x63, 0x43, 0x8d, 0x56, 0x41, 0xa9, 0x1c, 0x54, 0x6a, 0x95, 0xcd,
	0xbd, 0x93, 0x6a, 0x6d, 0xb3, 0x56, 0x3a, 0xa9, 0x96, 0x0e, 0xb6, 0x4f, 0xb6, 0x4a, 0xbb, 0x95,
	0x83, 0xec, 0x08, 0x5a, 0x83, 0xe5, 0x08, 0x69, 0xe9, 0xa0, 0x56, 0xa9, 0x7d, 0x9f, 0x4d, 0xa0,
	0x1c, 0x2c, 0x46, 0x8a, 0xb7, 0xb3, 0xa3, 0xe8, 0x3a, 0xac, 0xc8, 0x32, 0xad, 0x54, 0x2c, 0x55,
	0x5e, 0x97, 0x38, 0x76, 0x12, 0x6d, 0xc0, 0x6a, 0xb4, 0x02, 0x87, 0x1f, 0x0b, 0xd7, 0xde, 0xd5,
	0xd8, 0xce, 0x8e, 0x13, 0x80, 0x9a, 0xb6, 0x79, 0x50, 0xdd, 0x2c, 0xd6, 0x2a, 0x87, 0x07, 0x27,
	0x5b, 0x9b, 0xb5, 0x62, 0xd9, 0xef, 0x7e, 0x0a, 0xdd, 0x81, 0xdb, 0x31, 0x1a, 0xfb, 0xc7, 0x04,
	0xd0, 0xbb, 0x95, 0x09, 0x74, 0x0f, 0xee, 0xc4, 0xa8, 0x6e, 0x97, 0xf6, 0x4a, 0x5d, 0xd5, 0x93,
	0x57, 0xa5, 0xef, 0xb3, 0x69, 0xb4, 0x0e, 0xb9, 0x18, 0x75, 0xe2, 0xdb, 0x24, 0xba, 0x09, 0xd7,
	0xc3, 0x72, 0x39, 0x02, 0x80, 0x3e, 0x85, 0x7c, 0xbc, 0x52, 0xc0, 0xc3, 0x0c, 0x7a, 0x08, 0x9f,
	0xc6, 0x6b, 0x47, 0x38, 0x39, 0x85, 0x6e, 0xc0, 0x5a, 0xbc, 0x05, 0xf1, 0x73, 0x9a, 0x65, 0xf0,
	0x64, 0xbf, 0xb4, 0x7f, 0xa8, 0x7d, 0x7f, 0x52, 0xad, 0x1d, 0x6a, 0x5e, 0xf8, 0x67, 0xd0, 0x0a,
	0x2c, 0x75, 0x65, 0xac, 0x02, 0x21, 0x9c, 0x45, 0x4b, 0x30, 0xe7, 0xc7, 0xde, 0xd4, 0xb4, 0xca,
	0xeb, 0xd2, 0x76, 0x36, 0x1b, 0xbc, 0xf3, 0x9d, 0xca, 0x41, 0xa5, 0x5a, 0x2e, 0x6d, 0x9f, 0x1c,
	0x69, 0x87, 0xc5, 0x52, 0xb5, 0x5a, 0x39, 0xd8, 0xcd, 0x5e, 0x0b, 0x5a, 0x57, 0x6b, 0x9b, 0x7b,
	0x7b, 0xa5, 0xed, 0x2c, 0x22, 0xfe, 0x14, 0x0f, 0x0f, 0x76, 0x2a, 0xbb, 0xcc, 0x97, 0xe2, 0xe1,
	0x41, 0xb5, 0x52, 0xad, 0x95, 0x0e, 0x6a, 0xd9, 0x39, 0xa4, 0xc2, 0xba, 0xdf, 0x48, 0x0e, 0x10,
	0xbd, 0xe5, 0xf9, 0xa0, 0x4e, 0x44, 0x58, 0x16, 0xd0, 0x67, 0x70, 0xcf, 0xaf, 0xa3, 0x95, 0x48,
	0x2d, 0x35, 0xed, 0xb8, 0x58, 0x3b, 0xd9, 0x3c, 0x3a, 0x8a, 0x68, 0x1d, 0x8b, 0xe8, 0x31, 0x14,
	0x8a, 0x7b, 0x95, 0xd2, 0x41, 0xed, 0xa4, 0x78, 0xac, 0x69, 0xa5, 0x83, 0xda, 0xde, 0xf7, 0x27,
	0xdb, 0x95, 0x6a, 0xf1, 0xf0, 0xe0, 0xa0, 0x54, 0x24, 0x9a, 0x9b, 0xb5, 0x5a, 0x69, 0xff, 0xa8,
	0x56, 0x39, 0xd8, 0x65, 0x78, 0xa4, 0x38, 0xbb, 0x84, 0xee, 0xc2, 0x47, 0xdc, 0x6e, 0xf7, 0xb0,
	0x76, 0x52, 0x3a, 0xdc, 0x89, 0x54, 0x24, 0x31, 0x51, 0x48, 0x87, 0xf1, 0xe9, 0x1e, 0x54, 0xf6,
	0x4e, 0xb6, 0x8e, 0x77, 0x4f, 0x2a, 0xbb, 0x07, 0x87, 0x1a, 0x51, 0x58, 0x26, 0xf9, 0xe0, 0x0a,
	0x3b, 0x9b, 0x95, 0xbd, 0xd2, 0xb6, 0xaf, 0xa6, 0x1c, 0x09, 0xbb, 0xf0, 0x90, 0x83, 0xd2, 0x5b,
	0x2b, 0x55, 0x6b, 0x9b, 0x5b, 0x7b, 0x34, 0x03, 0xd9, 0x15, 0xf4, 0x08, 0x1e, 0xf8, 0xaa, 0x38,
	0x3e, 0x28, 0x7d, 0x77, 0xc4, 0xdc, 0x2f, 0x1e, 0x6e, 0x97, 0xa2, 0xef, 0x61, 0x95, 0x30, 0x44,
	0xb5, 0xa4, 0xbd, 0x2e, 0x69, 0x24, 0x4d, 0x5a, 0xed, 0xf8, 0xe8, 0x64, 0x57, 0x3b, 0x2a, 0x9e,
	0x1c, 0x1d, 0x6a, 0xb5, 0xec, 0x5a, 0x84, 0xb4, 0x5c, 0xab, 0x1d, 0x31, 0xe9, 0xba, 0x4f, 0xba,
	0xab, 0x6d, 0x16, 0x4b, 0x3b, 0xc7, 0x7b, 0x27, 0xd5, 0xf2, 0x71, 0x6d, 0xfb, 0xf0, 0x47, 0x07,
	0xd9, 0xeb, 0xea, 0xdf, 0x27, 0x60, 0x72, 0x5f, 0x6f, 0x6b, 0xf8, 0x8c, 0x3c, 0xb4, 0x56, 0xf8,
	0x34, 0x35, 0x92, 0xc0, 0xb3, 0xe2, 0x15, 0xa6, 0xb7, 0x56, 0x86, 0x60, 0xdc, 0xa9, 0xeb, 0x4d,
	0xac, 0x24, 0xf3, 0x09, 0x8d, 0xfd, 0x44, 0x0a, 0xa4, 0x1b, 0x96, 0x5b, 0xa5, 0xc5, 0x63, 0xf9,
	0x84, 0xe6, 0x5d, 0x11, 0x49, 0x53, 0x77, 0x0d, 0xb7, 0xd3, 0xc0, 0xca, 0x38, 0x91, 0x88, 0x2b,
	0x94, 0x83, 0xc9, 0xa6, 0x65, 0x9e, 0x31, 0x51, 0x2a, 0x9f, 0xd0, 0xba, 0x97, 0x68, 0x03, 0xa6,
	0xea, 0x84, 0xb1, 0xed, 0x0b, 0xc2, 0xc2, 0x8e, 0x32, 0x41, 0x86, 0xf3, 0xfe, 0x12, 0xf5, 0x39,
	0xcc, 0x93, 0xe1, 0xb5, 0x77, 0x17, 0x62, 0x7a, 0x83, 0xbc, 0xe5, 0xad, 0xee, 0xe2, 0x16, 0xf2,
	0x16, 0xb7, 0xbc, 0xa5, 0x2d, 0xf5, 0x03, 0x2c, 0x04, 0xec, 0xf9, 0x08, 0x31, 0x2b, 0x96, 0xae,
	0xbc, 0x85, 0xab, 0xf5, 0xc0, 0xc2, 0x55, 0x70, 0xd9, 0xea, 0x5e, 0x68, 0xd9, 0xca, 0x7b, 0xab,
	0xdb, 0x85, 0xef, 0x3e, 0xc4, 0x0b, 0x30, 0xb7, 0x8b, 0xc3, 0x8e, 0xf7, 0xca, 0x82, 0xfa, 0x02,
	0xe6, 0x65, 0x1b, 0xee, 0xec, 0xc7, 0xdd, 0xa5, 0x80, 0xe8, 0x6a, 0xc5, 0x3a, 0xc0, 0x12, 0x2c,
	0xd0, 0x41, 0x71, 0xb0, 0x5a, 0xf5, 0xcf, 0x13, 0x30, 0x27, 0x4b, 0x4a, 0xef, 0xb0, 0xe9, 0xa2,
	0xbc, 0x18, 0x50, 0xe4, 0x67, 0x0a, 0x8b, 0x02, 0x97, 0x2a, 0x52, 0xb9, 0x6f, 0xb4, 0xd0, 0xf5,
	0x61, 0xb4, 0xa7, 0x0f, 0x68, 0x15, 0xd2, 0x56, 0x93, 0xad, 0xe4, 0x2a, 0x49, 0xbe, 0x8d, 0xc0,
	0x2b, 0x21, 0x52, 0x13, 0xbf, 0x67, 0xd2, 0x31, 0x21, 0x15, 0x25, 0xea, 0x26, 0x2c, 0xb2, 0x09,
	0x4c, 0x28, 0x6e, 0x97, 0x0e, 0xc1, 0x16, 0x2c, 0x85, 0x20, 0x06, 0x0d, 0xe3, 0x26, 0x2c, 0xb2,
	0x41, 0xec, 0x95, 0xdc, 0x08, 0x41, 0x0c, 0xea, 0xc6, 0x17, 0xb0, 0xc8, 0xa6, 0x4d, 0x83, 0xb5,
	0xa2, 0x2d, 0x58, 0x0a, 0x99, 0x0d, 0x5a, 0xf5, 0xdf, 0x26, 0x20, 0x55, 0xc5, 0xcd, 0x26, 0xb6,
	0x07, 0xe5, 0x8d, 0x97, 0x90, 0x6b, 0xdb, 0x46, 0x1d, 0x1f, 0x75, 0x4e, 0x9b, 0x46, 0xbd, 0x62,
	0x9e, 0xd9, 0xd8, 0x71, 0xc4, 0x7b, 0x77, 0x2f, 0xe5, 0x3d, 0x74, 0xd0, 0x73, 0x58, 0xf6, 0x49,
	0x4b, 0x32, 0xc0, 0x38, 0x07, 0x88, 0x57, 0x51, 0x9f, 0xc2, 0x35, 0xd2, 0xe7, 0x99, 0xfb, 0x83,
	0x12, 0x86, 0x0d, 0xc8, 0x6f, 0x3c, 0x34, 0x5b, 0xdc, 0x0d, 0xb1, 0x45, 0x77, 0x11, 0x9f, 0x61,
	0x77, 0xa9, 0xe2, 0x01, 0x7b, 0x2f, 0x20, 0xf9, 0xdb, 0x33, 0xc3, 0x5f, 0xb3, 0x97, 0x06, 0xb2,
	0x8f, 0xb7, 0xa4, 0xdc, 0x06, 0x6b, 0x13, 0x89, 0x9d, 0x07, 0x44, 0xbb, 0xb7, 0x54, 0x9b, 0xfa,
	0x27, 0x09, 0xc8, 0xfa, 0x8a, 0x07, 0xe5, 0x86, 0x5b, 0x12, 0x37, 0xc4, 0x54, 0x7d, 0x25, 0x62,
	0x78, 0x0a, 0x73, 0xac, 0x57, 0xcb, 0x51, 0xba, 0xdc, 0x3d, 0x7f, 0x03, 0xf3, 0xb2, 0xf1, 0x40,
	0x11, 0x7b, 0x0a, 0x73, 0xac, 0x27, 0x0f, 0x59, 0xb5, 0x6c, 0x3c, 0x50, 0xd5, 0x05, 0x98, 0x63,
	0x3d, 0x79, 0x80, 0xb6, 0xf1, 0x0d, 0xcc, 0xcb, 0x36, 0x03, 0xd5, 0xf8, 0x1f, 0x09, 0x98, 0xd0,
	0x70, 0x13, 0xeb, 0x0e, 0x1e, 0xb4, 0xe3, 0x2f, 0xc2, 0x44, 0xfd, 0x5c, 0x37, 0x4d, 0xdc, 0x54,
	0x52, 0x74, 0x23, 0x13, 0xbb, 0x40, 0x2f, 0x61, 0xc6, 0x66, 0x88, 0xdb, 0xba, 0x8b, 0x8f, 0xdd,
	0xba, 0x32, 0xd1, 0x6f, 0x4b, 0x98, 0xac, 0x4f, 0x86, 0x09, 0xbc, 0xe4, 0xc0, 0x72, 0xb1, 0xa3,
	0xa4, 0xc9, 0x30, 0xc1, 0x5f, 0x82, 0x1e, 0xc2, 0x3c, 0xfe, 0xd0, 0xc6, 0xb6, 0xd1, 0xc2, 0xa6,
	0xab, 0x37, 0xb7, 0x3a, 0x46, 0xb3, 0x71, 0x6c, 0x37, 0x95, 0xc9, 0xfc, 0xa4, 0x16, 0x29, 0x51,
	0xbf, 0x61, 0xfd, 0x9c, 0xdf, 0xeb, 0xa0, 0x2c, 0xe1, 0xc2, 0x9c, 0x64, 0x3d, 0x34, 0x4d, 0x7c,
	0x12, 0xa2, 0x89, 0x59, 0x11, 0x6a, 0x01, 0xde, 0xe5, 0x89, 0x87, 0xb4, 0xdb, 0x07, 0x5c, 0xee,
	0xd9, 0x18, 0x9e, 0x02, 0xf2, 0x5b, 0x70, 0x37, 0x6f, 0x4b, 0x4d, 0x21, 0x54, 0xa1, 0x68, 0x0b,
	0x0b, 0x7c, 0xc8, 0x20, 0x57, 0xa8, 0xfe, 0x69, 0x02, 0xae, 0xf9, 0xcb, 0x07, 0x25, 0x8b, 0xdb,
	0x12, 0x59, 0xc4, 0xd5, 0x7e, 0x25, 0xb6, 0x78, 0x26, 0x3a, 0x7c, 0x20, 0x56, 0x97, 0xbc, 0xf1,
	0xe7, 0xb0, 0x10, 0x30, 0x1f, 0x2c, 0x70, 0xcf, 0x44, 0xa7, 0x1f, 0xba, 0xfa, 0x80, 0xf9, 0x60,
	0xd5, 0x3f, 0x12, 0x0c, 0x30, 0x48, 0x4b, 0x79, 0x0e, 0x0b, 0x01, 0xa3, 0xc1, 0x2a, 0xfd, 0xcf,
	0x31, 0xc8, 0x68, 0x56, 0xc7, 0xc5, 0xd5, 0x73, 0xbd, 0xd1, 0x6f, 0xd4, 0xb0, 0x2e, 0x6f, 0x37,
	0x1c, 0x0d, 0x6e, 0x36, 0xcc, 0xc3, 0x0c, 0x36, 0xdf, 0xe1, 0xa6, 0xd5, 0xc6, 0xaf, 0x4e, 0xdb,
	0xce, 0x71, 0xdb, 0x6b, 0x01, 0x81, 0x72, 0xf4, 0x29, 0x64, 0xfd, 0x25, 0xdb, 0xd6, 0x7b, 0xd3,
	0x6b, 0x0f, 0x21, 0x09, 0x9a, 0x87, 0xb1, 0x96, 0x45, 0x67, 0x28, 0x4c, 0x83, 0x5e, 0xa1, 0xc7,
	0xb0, 0xd0, 0xd2, 0x3f, 0x1c, 0xd1, 0xf1, 0x04, 0xb6, 0x77, 0xb7, 0xbc, 0xb1, 0x46, 0x8a, 0xab,
	0x45, 0x8b, 0xd1, 0x5d, 0xb8, 0xa6, 0xd7, 0xeb, 0xb8, 0xed, 0xea, 0xa7, 0x4d, 0xbc, 0xa7, 0xbb,
	0xd8, 0xac, 0x5f, 0x28, 0xe9, 0x7c, 0x42, 0x0b, 0x17, 0x53, 0x0a, 0x73, 0xdd, 0xda, 0xb9, 0x8d,
	0x9d, 0x73, 0xab, 0xd9, 0x50, 0x26, 0xf3, 0x09, 0x4d, 0x2a, 0x41, 0x2a, 0x4c, 0xdb, 0xae, 0x5b,
	0xbe, 0x70, 0x5c, 0x6c, 0x63, 0xc7, 0x70, 0x14, 0xc8, 0x27, 0x34, 0xb9, 0x88, 0x50, 0xac, 0xed,
	0xba, 0xaf, 0xb1, 0x6b, 0x29, 0x99, 0x7c, 0x42, 0x13, 0x17, 0xe8, 0x16, 0xcc, 0xd8, 0xae, 0xcb,
	0xc2, 0xff, 0xde, 0x70, 0xeb, 0xe7, 0xca, 0x54, 0x3e, 0xa1, 0x05, 0xca, 0xd0, 0x47, 0x30, 0x7b,
	0x61, 0x75, 0x0e, 0xcd, 0xe6, 0xc5, 0x9e, 0xf1, 0x0e, 0x1f, 0x9a, 0x75, 0xac, 0x4c, 0xe7, 0xd3,
	0x5a, 0xb0, 0x10, 0xe5, 0x21, 0xdb, 0xd6, 0xeb, 0x6f, 0xb1, 0xbb, 0x67, 0x39, 0x4e, 0x55, 0x7f,
	0x83, 0xdd, 0x0b, 0x65, 0x26, 0x9f, 0xd6, 0x42, 0xa5, 0xe8, 0x3e, 0xcc, 0x75, 0xcb, 0xf6, 0x3b,
	0x4d, 0xd7, 0xa0, 0x1b, 0x9a, 0x67, 0xf3, 0x69, 0x2d, 0x4a, 0x40, 0x3c, 0xf8, 0x89, 0xe1, 0xba,
	0xd8, 0xee, 0xea, 0x66, 0x89, 0x07, 0x81, 0x42, 0x1e, 0xad, 0xae, 0xd2, 0xb5, 0x7c, 0x5a, 0x93,
	0x4a, 0xd4, 0x97, 0xb0, 0x48, 0x09, 0xb8, 0xdb, 0xe2, 0x06, 0xa5, 0xf0, 0xdf, 0x86, 0xa5, 0x10,
	0xc2, 0xd0, 0x34, 0xfe, 0x20, 0x44, 0xe3, 0xde, 0xee, 0x2d, 0x7f, 0x05, 0x5d, 0x2a, 0xff, 0x1c,
	0x16, 0x08, 0x31, 0x87, 0xdd, 0xef, 0xd9, 0x49, 0x8b, 0xb0, 0x18, 0xb4, 0xe2, 0x2e, 0xdf, 0x91,
	0x7a, 0x69, 0x64, 0xe5, 0xa2, 0xa7, 0x2e, 0xc3, 0x12, 0xa3, 0xef, 0x50, 0xe5, 0xea, 0xcf, 0x12,
	0x7c, 0xfe, 0xe8, 0x93, 0x0d, 0x4a, 0xef, 0x77, 0x24, 0x7a, 0xef, 0xe5, 0xc9, 0x95, 0x28, 0xbe,
	0x04, 0x0a, 0xe7, 0xe8, 0x70, 0x0c, 0x07, 0x08, 0xc6, 0x0e, 0x2c, 0x47, 0xc0, 0x0c, 0x1e, 0xd4,
	0x12, 0x28, 0x9c, 0xb3, 0xaf, 0xea, 0x4e, 0x04, 0xcc, 0xe0, 0xee, 0x7c, 0x09, 0x0a, 0x67, 0xf3,
	0x01, 0x5b, 0xd8, 0x0e, 0x2c, 0x47, 0x18, 0x0e, 0xee, 0xc0, 0x3f, 0x27, 0x00, 0xb6, 0x75, 0x57,
	0xaf, 0x63, 0xd3, 0x1d, 0x7c, 0x0e, 0xe9, 0x5f, 0x4d, 0x4a, 0xc6, 0xaf, 0x26, 0x8d, 0xc9, 0xab,
	0x49, 0x2a, 0x4c, 0x3b, 0xae, 0x8d, 0xb1, 0x2b, 0x36, 0x19, 0x8f, 0xe7, 0x27, 0x35, 0xb9, 0x08,
	0xad, 0x00, 0x90, 0x1a, 0x4e, 0xf4, 0xa6, 0xa1, 0xb3, 0xf5, 0x26, 0xba, 0x6b, 0x67, 0x93, 0x5c,
	0x12, 0x7a, 0xc5, 0x26, 0x61, 0xed, 0x86, 0x92, 0xce, 0xa7, 0x35, 0x71, 0xa1, 0xbe, 0x60, 0x8b,
	0x48, 0xdd, 0xfb, 0x19, 0x94, 0x6b, 0x7e, 0x8b, 0xb1, 0x95, 0x1f, 0x60, 0x68, 0xaa, 0xe9, 0xb1,
	0x7b, 0xca, 0x87, 0xdf, 0x65, 0x9a, 0x47, 0x74, 0x4d, 0x29, 0xec, 0x7b, 0xcf, 0x66, 0xb0, 0x49,
	0xe9, 0x29, 0xc2, 0xdf, 0xbc, 0xd4, 0x04, 0xa2, 0x6a, 0x16, 0x2d, 0x40, 0x81, 0x45, 0xca, 0x0f,
	0xa1, 0x9a, 0xd5, 0xbf, 0x48, 0xc0, 0x7c, 0x40, 0x34, 0x28, 0xc9, 0xe4, 0x25, 0x92, 0xe9, 0xe1,
	0xc6, 0x95, 0x38, 0xa6, 0x28, 0x96, 0x92, 0xc2, 0xd1, 0xbb, 0x7c, 0x1c, 0xb6, 0x05, 0x51, 0x5d,
	0x29, 0x9a, 0x45, 0xb1, 0x9c, 0x74, 0x45, 0x57, 0xc2, 0x20, 0x03, 0xbb, 0xf2, 0x58, 0x2c, 0x2f,
	0x0d, 0xd8, 0xa6, 0xb6, 0x05, 0x27, 0x5d, 0xa9, 0xf6, 0xff, 0x4a, 0xc2, 0xf8, 0x56, 0xe7, 0xe2,
	0xb2, 0x9c, 0x92, 0xf4, 0x38, 0x65, 0x1e, 0x52, 0x7a, 0xdd, 0x35, 0xde, 0x11, 0xda, 0x48, 0x6b,
	0xfc, 0x37, 0x99, 0x38, 0x9e, 0xeb, 0xce, 0x51, 0x53, 0x77, 0xdf, 0x58, 0x76, 0xeb, 0xa8, 0xfa,
	0xf9, 0x66, 0xbd, 0x4e, 0xa8, 0x03, 0xf2, 0x69, 0x2d, 0x52, 0x82, 0xbe, 0x02, 0xc5, 0x57, 0xfe,
	0xdd, 0x96, 0xf5, 0xe1, 0xd0, 0xc4, 0xdc, 0x2a, 0x93, 0x4f, 0x6b, 0xb1, 0x52, 0xf4, 0x18, 0x96,
	0x7c, 0x32, 0x36, 0x28, 0xe3, 0x86, 0x53, 0xf9, 0xb4, 0x16, 0x27, 0x44, 0x4f, 0x60, 0xa9, 0xa5,
	0x7f, 0xd8, 0xb7, 0x4c, 0xf7, 0xbc, 0x79, 0x51, 0x6d, 0x63, 0xb3, 0xe1, 0x8d, 0x50, 0x67, 0x79,
	0x9b, 0x8d, 0x53, 0x20, 0x23, 0x2e, 0xe7, 0xdc, 0x7a, 0x5f, 0x31, 0x69, 0xcc, 0x08, 0x09, 0xb1,
	0x11, 0x57, 0xa0, 0x90, 0x8c, 0x20, 0x0d, 0x87, 0x8c, 0x00, 0x8b, 0x1d, 0xc7, 0xb5, 0x5a, 0xd8,
	0xa6, 0x63, 0xae, 0x40, 0x19, 0xfa, 0x0a, 0x16, 0x9d, 0xc6, 0xdb, 0xd7, 0xec, 0xe4, 0xcc, 0x23,
	0xb6, 0xf8, 0xf6, 0x0a, 0x5f, 0x54, 0x1a, 0xca, 0x3c, 0x3f, 0x37, 0x15, 0x23, 0x27, 0x51, 0x8b,
	0x92, 0x90, 0x04, 0x2b, 0x0b, 0xf9, 0x29, 0x2d, 0x56, 0xaa, 0x3e, 0x81, 0x2c, 0xf1, 0x90, 0xba,
	0x3a, 0x28, 0xef, 0xb6, 0xd9, 0x4a, 0x20, 0xb7, 0x1d, 0x9a, 0x72, 0xef, 0x84, 0x28, 0xd7, 0xdb,
	0x55, 0xca, 0xa0, 0xbb, 0x6c, 0x7b, 0x1f, 0x66, 0x77, 0xb1, 0xec, 0x6c, 0xcf, 0x4e, 0xf1, 0x25,
	0x5d, 0xfa, 0x93, 0x1d, 0xbc, 0x29, 0x75, 0x86, 0x40, 0x55, 0xa2, 0x1f, 0xcc, 0xf1, 0x49, 0xb8,
	0xbf, 0x2a, 0xf5, 0x8f, 0x13, 0x30, 0xdb, 0x2d, 0x1d, 0x94, 0x54, 0x6f, 0x4a, 0xa4, 0x1a, 0x5d,
	0xef, 0x95, 0xf8, 0xf4, 0x6b, 0x40, 0x8c, 0x0a, 0xa5, 0xf8, 0x5c, 0xea, 0x76, 0x9f, 0x88, 0xf5,
	0xbf, 0x21, 0x42, 0xf5, 0x35, 0x20, 0x46, 0x7b, 0x43, 0x55, 0x2b, 0x99, 0x0e, 0x52, 0xed, 0x67,
	0x80, 0x18, 0xdf, 0x5d, 0xbe, 0x35, 0x3c, 0x11, 0xeb, 0x7d, 0x43, 0x54, 0x97, 0x87, 0xc9, 0x7d,
	0xe3, 0x8c, 0x6f, 0x8a, 0xec, 0x33, 0xd5, 0x67, 0xef, 0xd4, 0x84, 0xf6, 0xb0, 0xef, 0xd4, 0xba,
	0xf6, 0xbf, 0x96, 0x77, 0x6a, 0x1e, 0x7c, 0xe8, 0x9d, 0x5a, 0xd0, 0xf1, 0xcb, 0xbc, 0x53, 0x0b,
	0x39, 0x1b, 0xf7, 0x2a, 0xc4, 0x53, 0x0c, 0xbd, 0x53, 0x0b, 0x54, 0xeb, 0x7b, 0xa7, 0x26, 0x24,
	0x3f, 0xd4, 0x3b, 0xb5, 0xa0, 0x0f, 0x3f, 0xd0, 0x3b, 0xb5, 0x60, 0xdc, 0x2e, 0x1d, 0x82, 0xee,
	0x3b, 0xb5, 0xe1, 0xc3, 0xd8, 0x7d, 0xa7, 0x76, 0x15, 0x37, 0x42, 0x10, 0x83, 0xba, 0xd1, 0x7d,
	0xa7, 0x36, 0x50, 0x2b, 0xea, 0xbe, 0x53, 0x1b, 0xbe, 0xea, 0x37, 0x30, 0xbb, 0x83, 0x75, 0xb7,
	0x63, 0xe3, 0x9d, 0xa6, 0x7e, 0xb6, 0x65, 0x59, 0xcd, 0xde, 0x63, 0x18, 0xdf, 0x74, 0x64, 0xc1,
	0x37, 0x1d, 0xa1, 0xab, 0x67, 0xbe, 0xfd, 0x69, 0x8b, 0xc1, 0x3d, 0xd2, 0xdb, 0x90, 0x23, 0xfd,
	0x33, 0x50, 0xd7, 0xa0, 0xbd, 0xfc, 0x77, 0x13, 0xb0, 0x12, 0x09, 0x33, 0x74, 0x67, 0x7f, 0x14,
	0xea, 0xec, 0xde, 0x21, 0xb3, 0x60, 0x25, 0xdd, 0x2e, 0xff, 0x15, 0x2c, 0xef, 0xe2, 0xb8, 0x7b,
	0xe9, 0x99, 0xb2, 0x57, 0x90, 0x8b, 0xb2, 0xe4, 0xee, 0xdf, 0x93, 0xb2, 0x16, 0xeb, 0x88, 0xc8,
	0xdd, 0x1a, 0xac, 0xd0, 0x1e, 0x1c, 0xed, 0x88, 0xfa, 0x73, 0xb1, 0x1b, 0x35, 0x20, 0x1f, 0x94,
	0x10, 0xee, 0x49, 0x84, 0xd0, 0xcf, 0xab, 0x2b, 0xd1, 0xc2, 0x3e, 0xac, 0xb2, 0x3e, 0x1d, 0x13,
	0xdb, 0x01, 0x03, 0x74, 0x00, 0x6b, 0x31, 0x70, 0xc3, 0x05, 0x7c, 0x1f, 0x56, 0x59, 0x5f, 0xff,
	0xc1, 0xdc, 0x8b, 0x81, 0x1b, 0xce, 0xbd, 0xa7, 0xb0, 0xca, 0xf8, 0x60, 0x98, 0x96, 0x79, 0x00,
	0x6b, 0x31, 0xc6, 0xc3, 0x39, 0xf3, 0x6f, 0x63, 0x30, 0xae, 0xe1, 0xa6, 0x7e, 0x31, 0xd0, 0xaa,
	0xfb, 0xf5, 0xe0, 0xaa, 0xbb, 0x0a, 0xd3, 0x6d, 0x3a, 0xf4, 0x16, 0xeb, 0x27, 0x64, 0xf2, 0x24,
	0x17, 0xa1, 0xbb, 0x70, 0xad, 0xa5, 0x9b, 0xfa, 0x19, 0xfd, 0x3c, 0x85, 0x7f, 0x9d, 0x25, 0x5c,
	0x8c, 0x72, 0x30, 0xc9, 0x76, 0x9d, 0xbf, 0xc2, 0x17, 0xca, 0x64, 0x7e, 0x4a, 0xeb, 0x5e, 0x12,
	0x6e, 0x73, 0x9c, 0xf3, 0x63, 0x07, 0xdb, 0x0a, 0xe4, 0x27, 0x35, 0x71, 0x81, 0x72, 0xb4, 0x9c,
	0x9e, 0xdf, 0xce, 0xf0, 0x26, 0x2b, 0x0a, 0xd0, 0x0d, 0x48, 0x39, 0xf4, 0x6d, 0xa5, 0x32, 0x1d,
	0xbc, 0x3f, 0x2e, 0x40, 0x77, 0x00, 0x1a, 0xde, 0x9c, 0x51, 0xd9, 0x08, 0xaa, 0xf9, 0x84, 0x68,
	0x91, 0xf2, 0xa0, 0x8b, 0x15, 0xc4, 0xeb, 0x61, 0x97, 0xe8, 0x16, 0x4c, 0x99, 0x46, 0xbd, 0xda,
	0xc6, 0xb8, 0xb1, 0x7f, 0xda, 0x76, 0x94, 0x1b, 0x7c, 0x66, 0x23, 0x95, 0xa2, 0x32, 0xac, 0xb7,
	0xd8, 0x7c, 0x4b, 0xc3, 0xf5, 0x8e, 0x6d, 0x1b, 0xe6, 0x59, 0xf1, 0x5c, 0xb7, 0xcf, 0xb0, 0x37,
	0x35, 0x53, 0x39, 0x6c, 0x1f, 0x3d, 0x74, 0x04, 0x2a, 0xdd, 0xca, 0x50, 0xed, 0xb4, 0xdb, 0x4d,
	0x03, 0xdb, 0x4c, 0xdc, 0x08, 0x6c, 0x7b, 0xb8, 0xc9, 0xd1, 0x2e, 0xa1, 0x8b, 0x0a, 0x30, 0x67,
	0x98, 0xf5, 0x66, 0xa7, 0x81, 0x1b, 0x5b, 0xba, 0xd9, 0x78, 0x6f, 0x34, 0xdc, 0xf3, 0xdd, 0x2d,
	0xe5, 0x16, 0x87, 0x88, 0x12, 0x52, 0xee, 0xd6, 0xeb, 0xe7, 0x86, 0x49, 0x3f, 0x4e, 0xa1, 0xdc,
	0x26, 0x6d, 0xc3, 0x57, 0x20, 0x66, 0x61, 0xb4, 0x95, 0x0d, 0x39, 0x0b, 0xe3, 0xb6, 0xbf, 0x8e,
	0x59, 0x18, 0x83, 0x0e, 0xce, 0xc2, 0x24, 0x67, 0x2f, 0x31, 0x0b, 0x93, 0x1d, 0x8c, 0x19, 0x74,
	0x33, 0xa5, 0xe0, 0x2c, 0xcc, 0x5f, 0x55, 0x77, 0x16, 0x46, 0x4b, 0x7f, 0xa0, 0x59, 0x98, 0x54,
	0xef, 0x0f, 0x33, 0x0b, 0x93, 0xe2, 0x73, 0xa9, 0xdb, 0xf5, 0x66, 0x61, 0x43, 0x84, 0xca, 0x9b,
	0x85, 0x0d, 0x55, 0xad, 0x64, 0x3a, 0x48, 0xb5, 0xde, 0x2c, 0xec, 0xf2, 0xad, 0xc1, 0x9b, 0x85,
	0x0d, 0x51, 0xdd, 0xff, 0x24, 0x20, 0xed, 0x2d, 0x97, 0x0c, 0xb8, 0xea, 0x7d, 0x1d, 0xc6, 0x4f,
	0xc9, 0x94, 0x4e, 0x19, 0x0b, 0x1a, 0xb0, 0x72, 0x1f, 0x01, 0x8e, 0xc7, 0x11, 0xe0, 0x22, 0x4c,
	0x18, 0xce, 0x66, 0xa3, 0x65, 0x98, 0x4a, 0x8a, 0x8c, 0x19, 0xf9, 0x05, 0x2a, 0xc0, 0x82, 0xde,
	0x71, 0xad, 0x96, 0xee, 0x1a, 0xf5, 0xaa, 0x71, 0x66, 0x1a, 0xe6, 0xb6, 0xd5, 0xd2, 0x0d, 0x93,
	0xee, 0x90, 0x88, 0x16, 0xa1, 0x87, 0x30, 0x1f, 0x10, 0x68, 0x56, 0x13, 0x3b, 0x94, 0xb0, 0x23,
	0x25, 0xea, 0x33, 0xb6, 0x2d, 0x42, 0x04, 0x60, 0x50, 0xa2, 0x78, 0xc7, 0x26, 0xa6, 0x5d, 0xf3,
	0xa1, 0xb9, 0xe2, 0xd3, 0x10, 0x57, 0x64, 0xbd, 0xb3, 0x12, 0x02, 0xbd, 0x4b, 0x17, 0x9f, 0xd1,
	0x5d, 0x12, 0x41, 0xaf, 0x7b, 0xb6, 0x91, 0x67, 0x74, 0x26, 0x1a, 0xf2, 0xf4, 0x23, 0xa9, 0x8d,
	0x84, 0xeb, 0x14, 0xcd, 0x64, 0x91, 0xaf, 0x80, 0x07, 0xea, 0x54, 0xff, 0x2c, 0xc1, 0xb7, 0x67,
	0x09, 0xc1, 0xa0, 0xec, 0xf1, 0x91, 0xc4, 0x1e, 0xb1, 0x0e, 0x5c, 0x89, 0x40, 0x5e, 0x88, 0xed,
	0x11, 0xc1, 0x88, 0x5d, 0xf6, 0xee, 0x5f, 0x8a, 0x19, 0xe9, 0xd0, 0xf1, 0x7b, 0x21, 0xb6, 0x48,
	0x5c, 0xc1, 0x85, 0x20, 0xc0, 0x80, 0x2e, 0x7c, 0x2e, 0x36, 0x4c, 0x0c, 0xd4, 0x6e, 0x5e, 0x8a,
	0xe9, 0xe7, 0xd0, 0xf5, 0xfe, 0x2a, 0x09, 0x8b, 0x24, 0xe1, 0x0d, 0xdf, 0xd9, 0x17, 0x7e, 0x34,
	0xfe, 0x26, 0x5f, 0x1a, 0x57, 0x52, 0xa1, 0x65, 0xa2, 0xf2, 0x88, 0xc6, 0x97, 0xcd, 0x1f, 0xf8,
	0xd6, 0x89, 0xe8, 0x40, 0x2a, 0x3c, 0x63, 0x2d, 0x8f, 0x68, 0xbe, 0xb5, 0xa4, 0xcd, 0xd0, 0xb4,
	0x55, 0xc9, 0xf6, 0x18, 0x95, 0x96, 0x47, 0xb4, 0xd0, 0x34, 0xf7, 0x26, 0x1f, 0x9f, 0x46, 0x30,
	0x27, 0x71, 0x8c, 0x8d, 0x5d, 0x3f, 0xed, 0x32, 0xa7, 0x92, 0x89, 0x0a, 0x41, 0x79, 0x44, 0xeb,
	0x72, 0x6b, 0xc1, 0xff, 0x7e, 0x91, 0x32, 0x66, 0xc4, 0x5b, 0x83, 0xf2, 0x88, 0xe6, 0x7f, 0x0b,
	0xf9, 0x91, 0xd8, 0xd3, 0x4a, 0xf9, 0x33, 0xb0, 0x05, 0xae, 0x3c, 0xa2, 0x89, 0x1d, 0xaf, 0x77,
	0xbc, 0x3d, 0x70, 0xca, 0x54, 0xc4, 0x9e, 0x97, 0xf2, 0x88, 0xe6, 0xed, 0x91, 0xfb, 0x42, 0xda,
	0xf5, 0xa2, 0x5c, 0x8b, 0x79, 0x2f, 0x5a, 0x1e, 0xd1, 0xa4, 0xdd, 0x31, 0x0f, 0x7c, 0x1b, 0xf3,
	0x95, 0xd9, 0xc8, 0xad, 0xb8, 0x34, 0x09, 0xe2, 0x62, 0x2b, 0x2d, 0x5a, 0x87, 0xfa, 0x77, 0x09,
	0x58, 0x08, 0xe6, 0x9f, 0x1d, 0x92, 0x2b, 0xc7, 0x1d, 0x92, 0x5b, 0x17, 0xe0, 0xd1, 0xed, 0xe6,
	0xca, 0x07, 0xe6, 0x02, 0x0b, 0x12, 0xc9, 0xe0, 0x71, 0xb9, 0x29, 0x76, 0x5c, 0x8e, 0x1f, 0x96,
	0xfb, 0x31, 0xac, 0x06, 0xfd, 0x90, 0x4e, 0xcb, 0x3d, 0x09, 0x9d, 0x96, 0xeb, 0xe7, 0x7f, 0x97,
	0xc9, 0xaf, 0xc3, 0x1a, 0xd5, 0x89, 0x3d, 0x36, 0xfa, 0x57, 0x09, 0x58, 0x8f, 0xd3, 0xe0, 0x1d,
	0xf1, 0x91, 0x77, 0x76, 0xd4, 0x7f, 0x42, 0x37, 0x32, 0xe4, 0xdd, 0xa3, 0xa3, 0xe5, 0xe0, 0xd1,
	0xd1, 0x7c, 0xa6, 0x70, 0x2b, 0xce, 0xf6, 0xb2, 0x27, 0x47, 0xef, 0xbe, 0x87, 0x49, 0xef, 0x83,
	0x71, 0x28, 0x03, 0x13, 0x1d, 0xf3, 0xad, 0x69, 0xbd, 0x37, 0xb3, 0x23, 0x08, 0x20, 0xc5, 0x3e,
	0xdf, 0x97, 0x4d, 0xa0, 0x49, 0x18, 0xa7, 0x1f, 0xab, 0xcb, 0x8e, 0x92, 0x62, 0xf6, 0x3d, 0xbe,
	0x6c, 0x12, 0x4d, 0xc3, 0xa4, 0xf7, 0x69, 0xbd, 0xec, 0x18, 0x31, 0xe7, 0xdf, 0xd0, 0xcb, 0x8e,
	0x13, 0x13, 0xfa, 0xb9, 0xbc, 0x6c, 0x0a, 0x4d, 0x50, 0xba, 0xca, 0x4e, 0x10, 0x5b, 0xf6, 0xd1,
	0xbb, 0x6c, 0xfa, 0xee, 0x96, 0xf8, 0x96, 0x4b, 0xc4, 0x97, 0xdd, 0x08, 0x12, 0xff, 0xb2, 0x57,
	0x76, 0x04, 0x4d, 0x41, 0xba, 0xad, 0x3b, 0xce, 0x7b, 0xcb, 0x6e, 0x64, 0x13, 0x04, 0xa3, 0x69,
	0x59, 0x6f, 0x3b, 0xed, 0xec, 0xe8, 0xdd, 0xfb, 0x30, 0x1b, 0xf8, 0x76, 0x10, 0x9a, 0x85, 0x4c,
	0xc7, 0x74, 0xda, 0xb8, 0x6e, 0xbc, 0x31, 0x70, 0x83, 0xdd, 0x46, 0x0b, 0xb7, 0x2c, 0xfb, 0x22,
	0x9b, 0xb8, 0xfb, 0x25, 0xcc, 0xc8, 0x8f, 0x34, 0x52, 0x11, 0x3f, 0x4b, 0x9a, 0x1d, 0x21, 0x17,
	0xec, 0xa1, 0x41, 0xea, 0xc9, 0xc0, 0x04, 0xa3, 0xd1, 0x46, 0x76, 0xb4, 0xf0, 0xef, 0x29, 0x58,
	0xf4, 0x1d, 0xc0, 0xdb, 0xc7, 0xae, 0x5e, 0xc5, 0xf6, 0x3b, 0xa3, 0x8e, 0xd1, 0x4b, 0x98, 0xf4,
	0xbe, 0xae, 0x82, 0xbc, 0x6f, 0x30, 0x05, 0x3f, 0xc2, 0x92, 0x5b, 0x8e, 0x90, 0xf0, 0xd6, 0xb0,
	0x0f, 0x69, 0x71, 0xc6, 0x1b, 0xf5, 0xfb, 0xaa, 0x40, 0xae, 0xef, 0xb1, 0x70, 0xb4, 0x03, 0x13,
	0xfc, 0xac, 0x37, 0xea, 0xf9, 0x7d, 0x81, 0x5c, 0xef, 0xa3, 0xe1, 0xe8, 0x90, 0x7d, 0x13, 0x85,
	0x45, 0x04, 0xf5, 0xfb, 0xce, 0x40, 0xae, 0xef, 0x11, 0x71, 0x01, 0xc8, 0xe2, 0x8d, 0xfa, 0x7d,
	0x6f, 0x20, 0xd7, 0xf7, 0x9c, 0xb8, 0x00, 0x64, 0x69, 0x42, 0xfd, 0xbe, 0x3b, 0x90, 0xeb, 0x7b,
	0x58, 0x1c, 0x35, 0xd8, 0x9e, 0x84, 0xd0, 0x27, 0x59, 0xd0, 0x2d, 0x5f, 0xf6, 0x62, 0xbf, 0xe8,
	0x92, 0xbb, 0xdd, 0x47, 0xcb, 0x3b, 0xcc, 0x9e, 0xdd, 0x6c, 0xb7, 0x9b, 0x17, 0xfe, 0xaf, 0x59,
	0x2c, 0xc5, 0x9c, 0x00, 0x97, 0x93, 0x14, 0xfe, 0x28, 0xc2, 0x8f, 0xf9, 0xec, 0xd0, 0x4f, 0x33,
	0x68, 0x43, 0x1a, 0xbf, 0x45, 0x70, 0x54, 0xee, 0x46, 0x0f, 0x0d, 0xe6, 0xe5, 0xc3, 0x04, 0x6a,
	0x81, 0x12, 0xf7, 0x39, 0x0f, 0xf4, 0xb1, 0xef, 0x56, 0x7b, 0x7d, 0x13, 0x24, 0x97, 0xef, 0xaf,
	0xc8, 0x2a, 0x2c, 0xfc, 0x43, 0x12, 0xb2, 0xde, 0xd3, 0x48, 0xf4, 0xae, 0x22, 0x8c, 0xd1, 0x7e,
	0xe1, 0xb5, 0xe4, 0xa8, 0xa3, 0x5a, 0xdd, 0x20, 0x45, 0x1f, 0xc4, 0x7a, 0x09, 0x49, 0xd2, 0x1b,
	0x56, 0x7c, 0xae, 0x84, 0x20, 0x56, 0xa3, 0x85, 0x1c, 0xa1, 0x04, 0xe3, 0x34, 0x52, 0x68, 0x4d,
	0x0a, 0x5c, 0x08, 0x65, 0x25, 0x5a, 0x4c, 0xf9, 0xe6, 0x61, 0x02, 0x55, 0x20, 0xc5, 0xbb, 0x93,
	0xf7, 0xbc, 0x89, 0x3e, 0x8b, 0x94, 0xbb, 0x1e, 0x2b, 0xe7, 0x1e, 0x55, 0x20, 0xc5, 0x3b, 0x92,
	0x07, 0x15, 0x7d, 0x9e, 0xa8, 0x0b, 0x15, 0x77, 0x58, 0xa8, 0x02, 0x29, 0xde, 0x85, 0x3c, 0xa8,
	0xe8, 0x33, 0x41, 0x5d, 0xa8, 0x98, 0xc3, 0x3f, 0x85, 0x3f, 0x4c, 0xc2, 0x34, 0x1b, 0xe1, 0x88,
	0x04, 0x3e, 0xe3, 0x09, 0x5c, 0xf6, 0xa7, 0x48, 0x3a, 0x6b, 0x90, 0xcb, 0x45, 0x89, 0xb8, 0x6f,
	0x4f, 0x58, 0xea, 0x24, 0x5e, 0x95, 0x8c, 0x97, 0x23, 0x24, 0xdc, 0xf6, 0x85, 0x48, 0x5a, 0x4e,
	0xca, 0x8a, 0x6c, 0xaf, 0x44, 0xc8, 0x44, 0xba, 0x8a, 0x5e, 0xba, 0x56, 0xe4, 0x74, 0xc8, 0x10,
	0xab, 0xd1, 0x42, 0xee, 0x45, 0xd1, 0x4b, 0xd4, 0x8a, 0x9c, 0x88, 0x18, 0x90, 0xc8, 0xb3, 0x1c,
	0x45, 0x2f, 0x45, 0x2b, 0x72, 0x0a, 0x62, 0x40, 0xa2, 0x8e, 0x67, 0x14, 0x7e, 0x9a, 0x84, 0x19,
	0x3e, 0xa8, 0x14, 0xd9, 0x79, 0xc1, 0xb3, 0x23, 0xa5, 0x40, 0xde, 0xd3, 0xdd, 0x6d, 0xd3, 0x51,
	0xc7, 0x11, 0xbe, 0x61, 0xf9, 0xf1, 0x67, 0x21, 0x60, 0x9e, 0x8b, 0x12, 0x79, 0x5f, 0x2c, 0xe1,
	0x19, 0x92, 0xfb, 0x4d, 0x00, 0x61, 0x39, 0x4a, 0x28, 0x72, 0x54, 0xf2, 0x72, 0x14, 0x48, 0x43,
	0x00, 0x64, 0x2d, 0x46, 0xea, 0x75, 0x70, 0x91, 0xa5, 0x40, 0x22, 0xe2, 0x60, 0xa2, 0xb7, 0xcf,
	0x97, 0xbc, 0x3c, 0x05, 0x52, 0x11, 0x07, 0x13, 0xb9, 0x21, 0xbe, 0xf0, 0xaf, 0x49, 0x40, 0xbe,
	0xb1, 0xbc, 0xc8, 0xd6, 0x2e, 0xcf, 0xd6, 0xba, 0x94, 0x91, 0xd0, 0xf6, 0xcb, 0x6e, 0x37, 0x8d,
	0xdb, 0x7d, 0xbc, 0xcd, 0xb2, 0xb6, 0xe6, 0x4f, 0x4d, 0x18, 0x66, 0x3d, 0x4e, 0xec, 0xf1, 0x06,
	0xcf, 0xde, 0x75, 0x39, 0x41, 0x61, 0xa4, 0xb5, 0x38, 0x05, 0x91, 0xc5, 0x7d, 0x2f, 0x8b, 0x1b,
	0x81, 0x3c, 0x85, 0xc1, 0x6e, 0xf4, 0xd0, 0xf0, 0x46, 0x54, 0x22, 0x9b, 0x1b, 0x81, 0x7c, 0xf5,
	0x80, 0x8b, 0xdf, 0x15, 0xbb, 0xef, 0x65, 0x75, 0x23, 0x90, 0xb7, 0x1e, 0x70, 0xb1, 0x7b, 0x5c,
	0x0b, 0xbf, 0x4c, 0xc2, 0xb5, 0xee, 0x94, 0x51, 0x24, 0xb7, 0xc4, 0x93, 0x2b, 0x3d, 0xcb, 0x42,
	0xfb, 0xdf, 0x72, 0xeb, 0x71, 0x62, 0xee, 0xeb, 0x16, 0x4b, 0xad, 0xff, 0x71, 0x16, 0x06, 0x59,
	0x8b, 0x91, 0x72, 0x8c, 0x5d, 0x91, 0xd8, 0x75, 0x29, 0x6f, 0x61, 0x9c, 0xd5, 0x18, 0xb9, 0x48,
	0xeb, 0x2b, 0x2f, 0xad, 0x81, 0xe7, 0x59, 0x18, 0x6a, 0x23, 0x5e, 0x81, 0x7b, 0xf5, 0xca, 0x4b,
	0x6a, 0xe0, 0x89, 0xd6, 0x03, 0x2c, 0x76, 0x2f, 0xe2, 0x2b, 0x2f, 0xa5, 0x81, 0x67, 0x5a, 0x0f,
	0xb0, 0xb8, 0xad, 0x85, 0x85, 0xdf, 0x4b, 0xc2, 0x14, 0x5d, 0xf9, 0x10, 0xb9, 0x7c, 0xca, 0x73,
	0xa9, 0xf8, 0x93, 0xe5, 0xdf, 0xa3, 0x93, 0x5b, 0x8e, 0x90, 0x70, 0xd7, 0xbe, 0x62, 0x19, 0x5c,
	0xf2, 0xe5, 0x48, 0x32, 0x55, 0xc2, 0x02, 0x6e, 0xf9, 0x4c, 0xe4, 0x4d, 0x66, 0x4c, 0xc9, 0x7a,
	0x29, 0x2c, 0x12, 0xd9, 0xda, 0xf4, 0xb2, 0x95, 0x93, 0x93, 0x21, 0x01, 0xac, 0x44, 0xca, 0x3c,
	0x42, 0x17, 0x39, 0xca, 0xc9, 0x29, 0x88, 0x86, 0x88, 0xda, 0xf8, 0xb4, 0xe9, 0x65, 0x26, 0x27,
	0x07, 0x3e, 0x1a, 0x22, 0x62, 0x33, 0x13, 0x1b, 0x49, 0x8a, 0xc5, 0xa5, 0xde, 0x23, 0xc9, 0xc0,
	0x0e, 0x8d, 0xc0, 0x48, 0x32, 0xb4, 0x11, 0x23, 0x6a, 0x24, 0x19, 0x84, 0x58, 0x8d, 0x16, 0xf6,
	0x19, 0x49, 0x06, 0x51, 0x56, 0xa2, 0xc5, 0xfd, 0x47, 0x92, 0x41, 0xa0, 0xeb, 0xb1, 0xf2, 0xbe,
	0x23, 0xc9, 0x58, 0xa8, 0xb8, 0x2d, 0x32, 0xf1, 0x23, 0xc9, 0x58, 0xa8, 0x98, 0x2d, 0x2f, 0x85,
	0xdf, 0x1f, 0x83, 0xc5, 0xc0, 0x1a, 0x9f, 0xc8, 0xe4, 0x21, 0xcf, 0xa4, 0xea, 0xcf, 0x55, 0xf4,
	0x4b, 0xf2, 0xdc, 0xcd, 0x9e, 0x3a, 0xdc, 0xed, 0x3d, 0x96, 0xd5, 0x1b, 0xbe, 0xc4, 0xc5, 0xc0,
	0xa9, 0xbd, 0x54, 0x38, 0xda, 0xb7, 0x22, 0xc3, 0x37, 0xa5, 0x14, 0xc6, 0x20, 0xde, 0xe8, 0xa5,
	0x24, 0xb2, 0x7d, 0xec, 0x65, 0xfb, 0x96, 0x9c, 0xcd, 0x18, 0xd0, 0xdb, 0x7d, 0xb4, 0xb8, 0xa7,
	0xc7, 0x5e, 0xe6, 0x6f, 0xc9, 0x99, 0xed, 0x07, 0xdb, 0x7b, 0x9f, 0xc3, 0xb1, 0xd7, 0x0a, 0x6e,
	0xc9, 0x59, 0xee, 0x07, 0xdb, 0x73, 0xc7, 0x02, 0x65, 0x59, 0xba, 0x8c, 0xdb, 0x93, 0x65, 0xfd,
	0xef, 0xe0, 0x64, 0x96, 0x95, 0x5f, 0xb5, 0x45, 0xb0, 0xac, 0x64, 0xaa, 0x84, 0x05, 0xbd, 0x59,
	0x56, 0xb2, 0x5e, 0x0a, 0x8b, 0xfa, 0xb2, 0xac, 0x04, 0xb0, 0x12, 0x29, 0xeb, 0xc7, 0xb2, 0xd1,
	0x10, 0x51, 0x2f, 0x36, 0x63, 0x59, 0x36, 0x1a, 0x22, 0xe2, 0x65, 0x65, 0xe1, 0xaf, 0x93, 0x30,
	0x2b, 0xd6, 0xca, 0x45, 0x4a, 0x36, 0x79, 0x4a, 0xa4, 0x39, 0x43, 0xe0, 0xed, 0x45, 0x6e, 0x35,
	0x5a, 0xc8, 0x3d, 0x7b, 0xce, 0x12, 0xe3, 0x9f, 0x36, 0x04, 0x01, 0x56, 0x22, 0x65, 0xde, 0x54,
	0x89, 0xa7, 0x47, 0x1e, 0x9c, 0x04, 0x31, 0x72, 0x91, 0x52, 0x91, 0xa4, 0x5d, 0x2f, 0x49, 0x81,
	0x79, 0x43, 0x10, 0x66, 0x3d, 0x4e, 0xec, 0x0d, 0xa5, 0x44, 0xaa, 0x02, 0x33, 0x87, 0x58, 0xa0,
	0x98, 0x77, 0x46, 0xbb, 0x5e, 0xc2, 0x02, 0x73, 0x87, 0x58, 0xa0, 0xe8, 0x97, 0x40, 0x05, 0x13,
	0x90, 0x6f, 0x1d, 0x46, 0x24, 0xee, 0x3b, 0x11, 0xb5, 0xdb, 0xd2, 0x8a, 0x72, 0xec, 0x02, 0xd2,
	0x47, 0xfd, 0xd4, 0xc4, 0x2a, 0xd2, 0x56, 0xfa, 0xc7, 0xfc, 0xdf, 0x76, 0x4e, 0x53, 0xf4, 0x1c,
	0xfe, 0xa3, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x13, 0x0f, 0xfe, 0x8c, 0x67, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigstoreMetaServiceClient is the client API for ConfigstoreMetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigstoreMetaServiceClient interface {
	GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error)
	MetaList(ctx context.Context, in *MetaListEntitiesRequest, opts ...grpc.CallOption) (*MetaListEntitiesResponse, error)
	MetaGet(ctx context.Context, in *MetaGetEntityRequest, opts ...grpc.CallOption) (*MetaGetEntityResponse, error)
	MetaUpdate(ctx context.Context, in *MetaUpdateEntityRequest, opts ...grpc.CallOption) (*MetaUpdateEntityResponse, error)
	MetaCreate(ctx context.Context, in *MetaCreateEntityRequest, opts ...grpc.CallOption) (*MetaCreateEntityResponse, error)
	MetaDelete(ctx context.Context, in *MetaDeleteEntityRequest, opts ...grpc.CallOption) (*MetaDeleteEntityResponse, error)
	GetDefaultPartitionId(ctx context.Context, in *GetDefaultPartitionIdRequest, opts ...grpc.CallOption) (*GetDefaultPartitionIdResponse, error)
	ApplyTransaction(ctx context.Context, in *MetaTransaction, opts ...grpc.CallOption) (*MetaTransactionResult, error)
	WatchTransactions(ctx context.Context, in *WatchTransactionsRequest, opts ...grpc.CallOption) (ConfigstoreMetaService_WatchTransactionsClient, error)
	GetTransactionQueueCount(ctx context.Context, in *GetTransactionQueueCountRequest, opts ...grpc.CallOption) (*GetTransactionQueueCountResponse, error)
}

type configstoreMetaServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigstoreMetaServiceClient(cc *grpc.ClientConn) ConfigstoreMetaServiceClient {
	return &configstoreMetaServiceClient{cc}
}

func (c *configstoreMetaServiceClient) GetSchema(ctx context.Context, in *GetSchemaRequest, opts ...grpc.CallOption) (*GetSchemaResponse, error) {
	out := new(GetSchemaResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configstoreMetaServiceClient) MetaList(ctx context.Context, in *MetaListEntitiesRequest, opts ...grpc.CallOption) (*MetaListEntitiesResponse, error) {
	out := new(MetaListEntitiesResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/MetaList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configstoreMetaServiceClient) MetaGet(ctx context.Context, in *MetaGetEntityRequest, opts ...grpc.CallOption) (*MetaGetEntityResponse, error) {
	out := new(MetaGetEntityResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/MetaGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configstoreMetaServiceClient) MetaUpdate(ctx context.Context, in *MetaUpdateEntityRequest, opts ...grpc.CallOption) (*MetaUpdateEntityResponse, error) {
	out := new(MetaUpdateEntityResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/MetaUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configstoreMetaServiceClient) MetaCreate(ctx context.Context, in *MetaCreateEntityRequest, opts ...grpc.CallOption) (*MetaCreateEntityResponse, error) {
	out := new(MetaCreateEntityResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/MetaCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configstoreMetaServiceClient) MetaDelete(ctx context.Context, in *MetaDeleteEntityRequest, opts ...grpc.CallOption) (*MetaDeleteEntityResponse, error) {
	out := new(MetaDeleteEntityResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/MetaDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configstoreMetaServiceClient) GetDefaultPartitionId(ctx context.Context, in *GetDefaultPartitionIdRequest, opts ...grpc.CallOption) (*GetDefaultPartitionIdResponse, error) {
	out := new(GetDefaultPartitionIdResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/GetDefaultPartitionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configstoreMetaServiceClient) ApplyTransaction(ctx context.Context, in *MetaTransaction, opts ...grpc.CallOption) (*MetaTransactionResult, error) {
	out := new(MetaTransactionResult)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/ApplyTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configstoreMetaServiceClient) WatchTransactions(ctx context.Context, in *WatchTransactionsRequest, opts ...grpc.CallOption) (ConfigstoreMetaService_WatchTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ConfigstoreMetaService_serviceDesc.Streams[0], "/config.ConfigstoreMetaService/WatchTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &configstoreMetaServiceWatchTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigstoreMetaService_WatchTransactionsClient interface {
	Recv() (*WatchTransactionsResponse, error)
	grpc.ClientStream
}

type configstoreMetaServiceWatchTransactionsClient struct {
	grpc.ClientStream
}

func (x *configstoreMetaServiceWatchTransactionsClient) Recv() (*WatchTransactionsResponse, error) {
	m := new(WatchTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configstoreMetaServiceClient) GetTransactionQueueCount(ctx context.Context, in *GetTransactionQueueCountRequest, opts ...grpc.CallOption) (*GetTransactionQueueCountResponse, error) {
	out := new(GetTransactionQueueCountResponse)
	err := c.cc.Invoke(ctx, "/config.ConfigstoreMetaService/GetTransactionQueueCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigstoreMetaServiceServer is the server API for ConfigstoreMetaService service.
type ConfigstoreMetaServiceServer interface {
	GetSchema(context.Context, *GetSchemaRequest) (*GetSchemaResponse, error)
	MetaList(context.Context, *MetaListEntitiesRequest) (*MetaListEntitiesResponse, error)
	MetaGet(context.Context, *MetaGetEntityRequest) (*MetaGetEntityResponse, error)
	MetaUpdate(context.Context, *MetaUpdateEntityRequest) (*MetaUpdateEntityResponse, error)
	MetaCreate(context.Context, *MetaCreateEntityRequest) (*MetaCreateEntityResponse, error)
	MetaDelete(context.Context, *MetaDeleteEntityRequest) (*MetaDeleteEntityResponse, error)
	GetDefaultPartitionId(context.Context, *GetDefaultPartitionIdRequest) (*GetDefaultPartitionIdResponse, error)
	ApplyTransaction(context.Context, *MetaTransaction) (*MetaTransactionResult, error)
	WatchTransactions(*WatchTransactionsRequest, ConfigstoreMetaService_WatchTransactionsServer) error
	GetTransactionQueueCount(context.Context, *GetTransactionQueueCountRequest) (*GetTransactionQueueCountResponse, error)
}

func RegisterConfigstoreMetaServiceServer(s *grpc.Server, srv ConfigstoreMetaServiceServer) {
	s.RegisterService(&_ConfigstoreMetaService_serviceDesc, srv)
}

func _ConfigstoreMetaService_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).GetSchema(ctx, req.(*GetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigstoreMetaService_MetaList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaListEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).MetaList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/MetaList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).MetaList(ctx, req.(*MetaListEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigstoreMetaService_MetaGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaGetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).MetaGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/MetaGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).MetaGet(ctx, req.(*MetaGetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigstoreMetaService_MetaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaUpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).MetaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/MetaUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).MetaUpdate(ctx, req.(*MetaUpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigstoreMetaService_MetaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaCreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).MetaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/MetaCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).MetaCreate(ctx, req.(*MetaCreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigstoreMetaService_MetaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaDeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).MetaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/MetaDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).MetaDelete(ctx, req.(*MetaDeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigstoreMetaService_GetDefaultPartitionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultPartitionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).GetDefaultPartitionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/GetDefaultPartitionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).GetDefaultPartitionId(ctx, req.(*GetDefaultPartitionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigstoreMetaService_ApplyTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).ApplyTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/ApplyTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).ApplyTransaction(ctx, req.(*MetaTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigstoreMetaService_WatchTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigstoreMetaServiceServer).WatchTransactions(m, &configstoreMetaServiceWatchTransactionsServer{stream})
}

type ConfigstoreMetaService_WatchTransactionsServer interface {
	Send(*WatchTransactionsResponse) error
	grpc.ServerStream
}

type configstoreMetaServiceWatchTransactionsServer struct {
	grpc.ServerStream
}

func (x *configstoreMetaServiceWatchTransactionsServer) Send(m *WatchTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ConfigstoreMetaService_GetTransactionQueueCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionQueueCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigstoreMetaServiceServer).GetTransactionQueueCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ConfigstoreMetaService/GetTransactionQueueCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigstoreMetaServiceServer).GetTransactionQueueCount(ctx, req.(*GetTransactionQueueCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigstoreMetaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.ConfigstoreMetaService",
	HandlerType: (*ConfigstoreMetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSchema",
			Handler:    _ConfigstoreMetaService_GetSchema_Handler,
		},
		{
			MethodName: "MetaList",
			Handler:    _ConfigstoreMetaService_MetaList_Handler,
		},
		{
			MethodName: "MetaGet",
			Handler:    _ConfigstoreMetaService_MetaGet_Handler,
		},
		{
			MethodName: "MetaUpdate",
			Handler:    _ConfigstoreMetaService_MetaUpdate_Handler,
		},
		{
			MethodName: "MetaCreate",
			Handler:    _ConfigstoreMetaService_MetaCreate_Handler,
		},
		{
			MethodName: "MetaDelete",
			Handler:    _ConfigstoreMetaService_MetaDelete_Handler,
		},
		{
			MethodName: "GetDefaultPartitionId",
			Handler:    _ConfigstoreMetaService_GetDefaultPartitionId_Handler,
		},
		{
			MethodName: "ApplyTransaction",
			Handler:    _ConfigstoreMetaService_ApplyTransaction_Handler,
		},
		{
			MethodName: "GetTransactionQueueCount",
			Handler:    _ConfigstoreMetaService_GetTransactionQueueCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTransactions",
			Handler:       _ConfigstoreMetaService_WatchTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// MapRegionServiceClient is the client API for MapRegionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapRegionServiceClient interface {
	// Fetch a page of MapRegion entities
	List(ctx context.Context, in *ListMapRegionRequest, opts ...grpc.CallOption) (*ListMapRegionResponse, error)
	// Retrieve a single MapRegion, if it exists
	Get(ctx context.Context, in *GetMapRegionRequest, opts ...grpc.CallOption) (*GetMapRegionResponse, error)
	// Watch all MapRegion entities for changes
	Watch(ctx context.Context, in *WatchMapRegionRequest, opts ...grpc.CallOption) (MapRegionService_WatchClient, error)
	// Update a single MapRegion
	Update(ctx context.Context, in *UpdateMapRegionRequest, opts ...grpc.CallOption) (*UpdateMapRegionResponse, error)
	// Create a single MapRegion
	Create(ctx context.Context, in *CreateMapRegionRequest, opts ...grpc.CallOption) (*CreateMapRegionResponse, error)
	// Delete a single MapRegion
	Delete(ctx context.Context, in *DeleteMapRegionRequest, opts ...grpc.CallOption) (*DeleteMapRegionResponse, error)
}

type mapRegionServiceClient struct {
	cc *grpc.ClientConn
}

func NewMapRegionServiceClient(cc *grpc.ClientConn) MapRegionServiceClient {
	return &mapRegionServiceClient{cc}
}

func (c *mapRegionServiceClient) List(ctx context.Context, in *ListMapRegionRequest, opts ...grpc.CallOption) (*ListMapRegionResponse, error) {
	out := new(ListMapRegionResponse)
	err := c.cc.Invoke(ctx, "/config.MapRegionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRegionServiceClient) Get(ctx context.Context, in *GetMapRegionRequest, opts ...grpc.CallOption) (*GetMapRegionResponse, error) {
	out := new(GetMapRegionResponse)
	err := c.cc.Invoke(ctx, "/config.MapRegionService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRegionServiceClient) Watch(ctx context.Context, in *WatchMapRegionRequest, opts ...grpc.CallOption) (MapRegionService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MapRegionService_serviceDesc.Streams[0], "/config.MapRegionService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapRegionServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MapRegionService_WatchClient interface {
	Recv() (*WatchMapRegionEvent, error)
	grpc.ClientStream
}

type mapRegionServiceWatchClient struct {
	grpc.ClientStream
}

func (x *mapRegionServiceWatchClient) Recv() (*WatchMapRegionEvent, error) {
	m := new(WatchMapRegionEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mapRegionServiceClient) Update(ctx context.Context, in *UpdateMapRegionRequest, opts ...grpc.CallOption) (*UpdateMapRegionResponse, error) {
	out := new(UpdateMapRegionResponse)
	err := c.cc.Invoke(ctx, "/config.MapRegionService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRegionServiceClient) Create(ctx context.Context, in *CreateMapRegionRequest, opts ...grpc.CallOption) (*CreateMapRegionResponse, error) {
	out := new(CreateMapRegionResponse)
	err := c.cc.Invoke(ctx, "/config.MapRegionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRegionServiceClient) Delete(ctx context.Context, in *DeleteMapRegionRequest, opts ...grpc.CallOption) (*DeleteMapRegionResponse, error) {
	out := new(DeleteMapRegionResponse)
	err := c.cc.Invoke(ctx, "/config.MapRegionService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapRegionServiceServer is the server API for MapRegionService service.
type MapRegionServiceServer interface {
	// Fetch a page of MapRegion entities
	List(context.Context, *ListMapRegionRequest) (*ListMapRegionResponse, error)
	// Retrieve a single MapRegion, if it exists
	Get(context.Context, *GetMapRegionRequest) (*GetMapRegionResponse, error)
	// Watch all MapRegion entities for changes
	Watch(*WatchMapRegionRequest, MapRegionService_WatchServer) error
	// Update a single MapRegion
	Update(context.Context, *UpdateMapRegionRequest) (*UpdateMapRegionResponse, error)
	// Create a single MapRegion
	Create(context.Context, *CreateMapRegionRequest) (*CreateMapRegionResponse, error)
	// Delete a single MapRegion
	Delete(context.Context, *DeleteMapRegionRequest) (*DeleteMapRegionResponse, error)
}

func RegisterMapRegionServiceServer(s *grpc.Server, srv MapRegionServiceServer) {
	s.RegisterService(&_MapRegionService_serviceDesc, srv)
}

func _MapRegionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMapRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRegionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MapRegionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRegionServiceServer).List(ctx, req.(*ListMapRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRegionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRegionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MapRegionService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRegionServiceServer).Get(ctx, req.(*GetMapRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRegionService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchMapRegionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapRegionServiceServer).Watch(m, &mapRegionServiceWatchServer{stream})
}

type MapRegionService_WatchServer interface {
	Send(*WatchMapRegionEvent) error
	grpc.ServerStream
}

type mapRegionServiceWatchServer struct {
	grpc.ServerStream
}

func (x *mapRegionServiceWatchServer) Send(m *WatchMapRegionEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MapRegionService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMapRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRegionServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MapRegionService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRegionServiceServer).Update(ctx, req.(*UpdateMapRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRegionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMapRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRegionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MapRegionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRegionServiceServer).Create(ctx, req.(*CreateMapRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRegionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMapRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRegionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MapRegionService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRegionServiceServer).Delete(ctx, req.(*DeleteMapRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MapRegionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.MapRegionService",
	HandlerType: (*MapRegionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MapRegionService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MapRegionService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MapRegionService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MapRegionService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MapRegionService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _MapRegionService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// SellerServiceClient is the client API for SellerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SellerServiceClient interface {
	// Fetch a page of Seller entities
	List(ctx context.Context, in *ListSellerRequest, opts ...grpc.CallOption) (*ListSellerResponse, error)
	// Retrieve a single Seller, if it exists
	Get(ctx context.Context, in *GetSellerRequest, opts ...grpc.CallOption) (*GetSellerResponse, error)
	// Watch all Seller entities for changes
	Watch(ctx context.Context, in *WatchSellerRequest, opts ...grpc.CallOption) (SellerService_WatchClient, error)
	// Update a single Seller
	Update(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*UpdateSellerResponse, error)
	// Create a single Seller
	Create(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error)
	// Delete a single Seller
	Delete(ctx context.Context, in *DeleteSellerRequest, opts ...grpc.CallOption) (*DeleteSellerResponse, error)
}

type sellerServiceClient struct {
	cc *grpc.ClientConn
}

func NewSellerServiceClient(cc *grpc.ClientConn) SellerServiceClient {
	return &sellerServiceClient{cc}
}

func (c *sellerServiceClient) List(ctx context.Context, in *ListSellerRequest, opts ...grpc.CallOption) (*ListSellerResponse, error) {
	out := new(ListSellerResponse)
	err := c.cc.Invoke(ctx, "/config.SellerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) Get(ctx context.Context, in *GetSellerRequest, opts ...grpc.CallOption) (*GetSellerResponse, error) {
	out := new(GetSellerResponse)
	err := c.cc.Invoke(ctx, "/config.SellerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) Watch(ctx context.Context, in *WatchSellerRequest, opts ...grpc.CallOption) (SellerService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SellerService_serviceDesc.Streams[0], "/config.SellerService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &sellerServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SellerService_WatchClient interface {
	Recv() (*WatchSellerEvent, error)
	grpc.ClientStream
}

type sellerServiceWatchClient struct {
	grpc.ClientStream
}

func (x *sellerServiceWatchClient) Recv() (*WatchSellerEvent, error) {
	m := new(WatchSellerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sellerServiceClient) Update(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*UpdateSellerResponse, error) {
	out := new(UpdateSellerResponse)
	err := c.cc.Invoke(ctx, "/config.SellerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) Create(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error) {
	out := new(CreateSellerResponse)
	err := c.cc.Invoke(ctx, "/config.SellerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellerServiceClient) Delete(ctx context.Context, in *DeleteSellerRequest, opts ...grpc.CallOption) (*DeleteSellerResponse, error) {
	out := new(DeleteSellerResponse)
	err := c.cc.Invoke(ctx, "/config.SellerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SellerServiceServer is the server API for SellerService service.
type SellerServiceServer interface {
	// Fetch a page of Seller entities
	List(context.Context, *ListSellerRequest) (*ListSellerResponse, error)
	// Retrieve a single Seller, if it exists
	Get(context.Context, *GetSellerRequest) (*GetSellerResponse, error)
	// Watch all Seller entities for changes
	Watch(*WatchSellerRequest, SellerService_WatchServer) error
	// Update a single Seller
	Update(context.Context, *UpdateSellerRequest) (*UpdateSellerResponse, error)
	// Create a single Seller
	Create(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error)
	// Delete a single Seller
	Delete(context.Context, *DeleteSellerRequest) (*DeleteSellerResponse, error)
}

func RegisterSellerServiceServer(s *grpc.Server, srv SellerServiceServer) {
	s.RegisterService(&_SellerService_serviceDesc, srv)
}

func _SellerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SellerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).List(ctx, req.(*ListSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SellerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).Get(ctx, req.(*GetSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchSellerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SellerServiceServer).Watch(m, &sellerServiceWatchServer{stream})
}

type SellerService_WatchServer interface {
	Send(*WatchSellerEvent) error
	grpc.ServerStream
}

type sellerServiceWatchServer struct {
	grpc.ServerStream
}

func (x *sellerServiceWatchServer) Send(m *WatchSellerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _SellerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SellerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).Update(ctx, req.(*UpdateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SellerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).Create(ctx, req.(*CreateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SellerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SellerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.SellerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SellerServiceServer).Delete(ctx, req.(*DeleteSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SellerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.SellerService",
	HandlerType: (*SellerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _SellerService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SellerService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SellerService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SellerService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SellerService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _SellerService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// ReleaseServiceClient is the client API for ReleaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReleaseServiceClient interface {
	// Fetch a page of Release entities
	List(ctx context.Context, in *ListReleaseRequest, opts ...grpc.CallOption) (*ListReleaseResponse, error)
	// Retrieve a single Release, if it exists
	Get(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*GetReleaseResponse, error)
	// Watch all Release entities for changes
	Watch(ctx context.Context, in *WatchReleaseRequest, opts ...grpc.CallOption) (ReleaseService_WatchClient, error)
	// Update a single Release
	Update(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*UpdateReleaseResponse, error)
	// Create a single Release
	Create(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*CreateReleaseResponse, error)
	// Delete a single Release
	Delete(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*DeleteReleaseResponse, error)
}

type releaseServiceClient struct {
	cc *grpc.ClientConn
}

func NewReleaseServiceClient(cc *grpc.ClientConn) ReleaseServiceClient {
	return &releaseServiceClient{cc}
}

func (c *releaseServiceClient) List(ctx context.Context, in *ListReleaseRequest, opts ...grpc.CallOption) (*ListReleaseResponse, error) {
	out := new(ListReleaseResponse)
	err := c.cc.Invoke(ctx, "/config.ReleaseService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) Get(ctx context.Context, in *GetReleaseRequest, opts ...grpc.CallOption) (*GetReleaseResponse, error) {
	out := new(GetReleaseResponse)
	err := c.cc.Invoke(ctx, "/config.ReleaseService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) Watch(ctx context.Context, in *WatchReleaseRequest, opts ...grpc.CallOption) (ReleaseService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReleaseService_serviceDesc.Streams[0], "/config.ReleaseService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &releaseServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReleaseService_WatchClient interface {
	Recv() (*WatchReleaseEvent, error)
	grpc.ClientStream
}

type releaseServiceWatchClient struct {
	grpc.ClientStream
}

func (x *releaseServiceWatchClient) Recv() (*WatchReleaseEvent, error) {
	m := new(WatchReleaseEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *releaseServiceClient) Update(ctx context.Context, in *UpdateReleaseRequest, opts ...grpc.CallOption) (*UpdateReleaseResponse, error) {
	out := new(UpdateReleaseResponse)
	err := c.cc.Invoke(ctx, "/config.ReleaseService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) Create(ctx context.Context, in *CreateReleaseRequest, opts ...grpc.CallOption) (*CreateReleaseResponse, error) {
	out := new(CreateReleaseResponse)
	err := c.cc.Invoke(ctx, "/config.ReleaseService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *releaseServiceClient) Delete(ctx context.Context, in *DeleteReleaseRequest, opts ...grpc.CallOption) (*DeleteReleaseResponse, error) {
	out := new(DeleteReleaseResponse)
	err := c.cc.Invoke(ctx, "/config.ReleaseService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReleaseServiceServer is the server API for ReleaseService service.
type ReleaseServiceServer interface {
	// Fetch a page of Release entities
	List(context.Context, *ListReleaseRequest) (*ListReleaseResponse, error)
	// Retrieve a single Release, if it exists
	Get(context.Context, *GetReleaseRequest) (*GetReleaseResponse, error)
	// Watch all Release entities for changes
	Watch(*WatchReleaseRequest, ReleaseService_WatchServer) error
	// Update a single Release
	Update(context.Context, *UpdateReleaseRequest) (*UpdateReleaseResponse, error)
	// Create a single Release
	Create(context.Context, *CreateReleaseRequest) (*CreateReleaseResponse, error)
	// Delete a single Release
	Delete(context.Context, *DeleteReleaseRequest) (*DeleteReleaseResponse, error)
}

func RegisterReleaseServiceServer(s *grpc.Server, srv ReleaseServiceServer) {
	s.RegisterService(&_ReleaseService_serviceDesc, srv)
}

func _ReleaseService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ReleaseService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).List(ctx, req.(*ListReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ReleaseService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).Get(ctx, req.(*GetReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchReleaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReleaseServiceServer).Watch(m, &releaseServiceWatchServer{stream})
}

type ReleaseService_WatchServer interface {
	Send(*WatchReleaseEvent) error
	grpc.ServerStream
}

type releaseServiceWatchServer struct {
	grpc.ServerStream
}

func (x *releaseServiceWatchServer) Send(m *WatchReleaseEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ReleaseService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ReleaseService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).Update(ctx, req.(*UpdateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ReleaseService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).Create(ctx, req.(*CreateReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReleaseService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReleaseServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.ReleaseService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReleaseServiceServer).Delete(ctx, req.(*DeleteReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReleaseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.ReleaseService",
	HandlerType: (*ReleaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ReleaseService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ReleaseService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ReleaseService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ReleaseService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ReleaseService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _ReleaseService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// RouteShaderServiceClient is the client API for RouteShaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouteShaderServiceClient interface {
	// Fetch a page of RouteShader entities
	List(ctx context.Context, in *ListRouteShaderRequest, opts ...grpc.CallOption) (*ListRouteShaderResponse, error)
	// Retrieve a single RouteShader, if it exists
	Get(ctx context.Context, in *GetRouteShaderRequest, opts ...grpc.CallOption) (*GetRouteShaderResponse, error)
	// Watch all RouteShader entities for changes
	Watch(ctx context.Context, in *WatchRouteShaderRequest, opts ...grpc.CallOption) (RouteShaderService_WatchClient, error)
	// Update a single RouteShader
	Update(ctx context.Context, in *UpdateRouteShaderRequest, opts ...grpc.CallOption) (*UpdateRouteShaderResponse, error)
	// Create a single RouteShader
	Create(ctx context.Context, in *CreateRouteShaderRequest, opts ...grpc.CallOption) (*CreateRouteShaderResponse, error)
	// Delete a single RouteShader
	Delete(ctx context.Context, in *DeleteRouteShaderRequest, opts ...grpc.CallOption) (*DeleteRouteShaderResponse, error)
}

type routeShaderServiceClient struct {
	cc *grpc.ClientConn
}

func NewRouteShaderServiceClient(cc *grpc.ClientConn) RouteShaderServiceClient {
	return &routeShaderServiceClient{cc}
}

func (c *routeShaderServiceClient) List(ctx context.Context, in *ListRouteShaderRequest, opts ...grpc.CallOption) (*ListRouteShaderResponse, error) {
	out := new(ListRouteShaderResponse)
	err := c.cc.Invoke(ctx, "/config.RouteShaderService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeShaderServiceClient) Get(ctx context.Context, in *GetRouteShaderRequest, opts ...grpc.CallOption) (*GetRouteShaderResponse, error) {
	out := new(GetRouteShaderResponse)
	err := c.cc.Invoke(ctx, "/config.RouteShaderService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeShaderServiceClient) Watch(ctx context.Context, in *WatchRouteShaderRequest, opts ...grpc.CallOption) (RouteShaderService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RouteShaderService_serviceDesc.Streams[0], "/config.RouteShaderService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeShaderServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RouteShaderService_WatchClient interface {
	Recv() (*WatchRouteShaderEvent, error)
	grpc.ClientStream
}

type routeShaderServiceWatchClient struct {
	grpc.ClientStream
}

func (x *routeShaderServiceWatchClient) Recv() (*WatchRouteShaderEvent, error) {
	m := new(WatchRouteShaderEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeShaderServiceClient) Update(ctx context.Context, in *UpdateRouteShaderRequest, opts ...grpc.CallOption) (*UpdateRouteShaderResponse, error) {
	out := new(UpdateRouteShaderResponse)
	err := c.cc.Invoke(ctx, "/config.RouteShaderService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeShaderServiceClient) Create(ctx context.Context, in *CreateRouteShaderRequest, opts ...grpc.CallOption) (*CreateRouteShaderResponse, error) {
	out := new(CreateRouteShaderResponse)
	err := c.cc.Invoke(ctx, "/config.RouteShaderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeShaderServiceClient) Delete(ctx context.Context, in *DeleteRouteShaderRequest, opts ...grpc.CallOption) (*DeleteRouteShaderResponse, error) {
	out := new(DeleteRouteShaderResponse)
	err := c.cc.Invoke(ctx, "/config.RouteShaderService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteShaderServiceServer is the server API for RouteShaderService service.
type RouteShaderServiceServer interface {
	// Fetch a page of RouteShader entities
	List(context.Context, *ListRouteShaderRequest) (*ListRouteShaderResponse, error)
	// Retrieve a single RouteShader, if it exists
	Get(context.Context, *GetRouteShaderRequest) (*GetRouteShaderResponse, error)
	// Watch all RouteShader entities for changes
	Watch(*WatchRouteShaderRequest, RouteShaderService_WatchServer) error
	// Update a single RouteShader
	Update(context.Context, *UpdateRouteShaderRequest) (*UpdateRouteShaderResponse, error)
	// Create a single RouteShader
	Create(context.Context, *CreateRouteShaderRequest) (*CreateRouteShaderResponse, error)
	// Delete a single RouteShader
	Delete(context.Context, *DeleteRouteShaderRequest) (*DeleteRouteShaderResponse, error)
}

func RegisterRouteShaderServiceServer(s *grpc.Server, srv RouteShaderServiceServer) {
	s.RegisterService(&_RouteShaderService_serviceDesc, srv)
}

func _RouteShaderService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouteShaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteShaderServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RouteShaderService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteShaderServiceServer).List(ctx, req.(*ListRouteShaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteShaderService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteShaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteShaderServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RouteShaderService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteShaderServiceServer).Get(ctx, req.(*GetRouteShaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteShaderService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRouteShaderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteShaderServiceServer).Watch(m, &routeShaderServiceWatchServer{stream})
}

type RouteShaderService_WatchServer interface {
	Send(*WatchRouteShaderEvent) error
	grpc.ServerStream
}

type routeShaderServiceWatchServer struct {
	grpc.ServerStream
}

func (x *routeShaderServiceWatchServer) Send(m *WatchRouteShaderEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RouteShaderService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouteShaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteShaderServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RouteShaderService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteShaderServiceServer).Update(ctx, req.(*UpdateRouteShaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteShaderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteShaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteShaderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RouteShaderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteShaderServiceServer).Create(ctx, req.(*CreateRouteShaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteShaderService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouteShaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteShaderServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RouteShaderService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteShaderServiceServer).Delete(ctx, req.(*DeleteRouteShaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteShaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.RouteShaderService",
	HandlerType: (*RouteShaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RouteShaderService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RouteShaderService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RouteShaderService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RouteShaderService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RouteShaderService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _RouteShaderService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// DatacenterServiceClient is the client API for DatacenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatacenterServiceClient interface {
	// Fetch a page of Datacenter entities
	List(ctx context.Context, in *ListDatacenterRequest, opts ...grpc.CallOption) (*ListDatacenterResponse, error)
	// Retrieve a single Datacenter, if it exists
	Get(ctx context.Context, in *GetDatacenterRequest, opts ...grpc.CallOption) (*GetDatacenterResponse, error)
	// Watch all Datacenter entities for changes
	Watch(ctx context.Context, in *WatchDatacenterRequest, opts ...grpc.CallOption) (DatacenterService_WatchClient, error)
	// Update a single Datacenter
	Update(ctx context.Context, in *UpdateDatacenterRequest, opts ...grpc.CallOption) (*UpdateDatacenterResponse, error)
	// Create a single Datacenter
	Create(ctx context.Context, in *CreateDatacenterRequest, opts ...grpc.CallOption) (*CreateDatacenterResponse, error)
	// Delete a single Datacenter
	Delete(ctx context.Context, in *DeleteDatacenterRequest, opts ...grpc.CallOption) (*DeleteDatacenterResponse, error)
}

type datacenterServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatacenterServiceClient(cc *grpc.ClientConn) DatacenterServiceClient {
	return &datacenterServiceClient{cc}
}

func (c *datacenterServiceClient) List(ctx context.Context, in *ListDatacenterRequest, opts ...grpc.CallOption) (*ListDatacenterResponse, error) {
	out := new(ListDatacenterResponse)
	err := c.cc.Invoke(ctx, "/config.DatacenterService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterServiceClient) Get(ctx context.Context, in *GetDatacenterRequest, opts ...grpc.CallOption) (*GetDatacenterResponse, error) {
	out := new(GetDatacenterResponse)
	err := c.cc.Invoke(ctx, "/config.DatacenterService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterServiceClient) Watch(ctx context.Context, in *WatchDatacenterRequest, opts ...grpc.CallOption) (DatacenterService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DatacenterService_serviceDesc.Streams[0], "/config.DatacenterService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &datacenterServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DatacenterService_WatchClient interface {
	Recv() (*WatchDatacenterEvent, error)
	grpc.ClientStream
}

type datacenterServiceWatchClient struct {
	grpc.ClientStream
}

func (x *datacenterServiceWatchClient) Recv() (*WatchDatacenterEvent, error) {
	m := new(WatchDatacenterEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *datacenterServiceClient) Update(ctx context.Context, in *UpdateDatacenterRequest, opts ...grpc.CallOption) (*UpdateDatacenterResponse, error) {
	out := new(UpdateDatacenterResponse)
	err := c.cc.Invoke(ctx, "/config.DatacenterService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterServiceClient) Create(ctx context.Context, in *CreateDatacenterRequest, opts ...grpc.CallOption) (*CreateDatacenterResponse, error) {
	out := new(CreateDatacenterResponse)
	err := c.cc.Invoke(ctx, "/config.DatacenterService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datacenterServiceClient) Delete(ctx context.Context, in *DeleteDatacenterRequest, opts ...grpc.CallOption) (*DeleteDatacenterResponse, error) {
	out := new(DeleteDatacenterResponse)
	err := c.cc.Invoke(ctx, "/config.DatacenterService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatacenterServiceServer is the server API for DatacenterService service.
type DatacenterServiceServer interface {
	// Fetch a page of Datacenter entities
	List(context.Context, *ListDatacenterRequest) (*ListDatacenterResponse, error)
	// Retrieve a single Datacenter, if it exists
	Get(context.Context, *GetDatacenterRequest) (*GetDatacenterResponse, error)
	// Watch all Datacenter entities for changes
	Watch(*WatchDatacenterRequest, DatacenterService_WatchServer) error
	// Update a single Datacenter
	Update(context.Context, *UpdateDatacenterRequest) (*UpdateDatacenterResponse, error)
	// Create a single Datacenter
	Create(context.Context, *CreateDatacenterRequest) (*CreateDatacenterResponse, error)
	// Delete a single Datacenter
	Delete(context.Context, *DeleteDatacenterRequest) (*DeleteDatacenterResponse, error)
}

func RegisterDatacenterServiceServer(s *grpc.Server, srv DatacenterServiceServer) {
	s.RegisterService(&_DatacenterService_serviceDesc, srv)
}

func _DatacenterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatacenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.DatacenterService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServiceServer).List(ctx, req.(*ListDatacenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatacenterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatacenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.DatacenterService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServiceServer).Get(ctx, req.(*GetDatacenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatacenterService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDatacenterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DatacenterServiceServer).Watch(m, &datacenterServiceWatchServer{stream})
}

type DatacenterService_WatchServer interface {
	Send(*WatchDatacenterEvent) error
	grpc.ServerStream
}

type datacenterServiceWatchServer struct {
	grpc.ServerStream
}

func (x *datacenterServiceWatchServer) Send(m *WatchDatacenterEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _DatacenterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatacenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.DatacenterService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServiceServer).Update(ctx, req.(*UpdateDatacenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatacenterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatacenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.DatacenterService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServiceServer).Create(ctx, req.(*CreateDatacenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatacenterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatacenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatacenterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.DatacenterService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatacenterServiceServer).Delete(ctx, req.(*DeleteDatacenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatacenterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.DatacenterService",
	HandlerType: (*DatacenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DatacenterService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DatacenterService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DatacenterService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DatacenterService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DatacenterService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _DatacenterService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// BuyerServiceClient is the client API for BuyerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuyerServiceClient interface {
	// Fetch a page of Buyer entities
	List(ctx context.Context, in *ListBuyerRequest, opts ...grpc.CallOption) (*ListBuyerResponse, error)
	// Retrieve a single Buyer, if it exists
	Get(ctx context.Context, in *GetBuyerRequest, opts ...grpc.CallOption) (*GetBuyerResponse, error)
	// Watch all Buyer entities for changes
	Watch(ctx context.Context, in *WatchBuyerRequest, opts ...grpc.CallOption) (BuyerService_WatchClient, error)
	// Update a single Buyer
	Update(ctx context.Context, in *UpdateBuyerRequest, opts ...grpc.CallOption) (*UpdateBuyerResponse, error)
	// Create a single Buyer
	Create(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*CreateBuyerResponse, error)
	// Delete a single Buyer
	Delete(ctx context.Context, in *DeleteBuyerRequest, opts ...grpc.CallOption) (*DeleteBuyerResponse, error)
}

type buyerServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuyerServiceClient(cc *grpc.ClientConn) BuyerServiceClient {
	return &buyerServiceClient{cc}
}

func (c *buyerServiceClient) List(ctx context.Context, in *ListBuyerRequest, opts ...grpc.CallOption) (*ListBuyerResponse, error) {
	out := new(ListBuyerResponse)
	err := c.cc.Invoke(ctx, "/config.BuyerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerServiceClient) Get(ctx context.Context, in *GetBuyerRequest, opts ...grpc.CallOption) (*GetBuyerResponse, error) {
	out := new(GetBuyerResponse)
	err := c.cc.Invoke(ctx, "/config.BuyerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerServiceClient) Watch(ctx context.Context, in *WatchBuyerRequest, opts ...grpc.CallOption) (BuyerService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BuyerService_serviceDesc.Streams[0], "/config.BuyerService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &buyerServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BuyerService_WatchClient interface {
	Recv() (*WatchBuyerEvent, error)
	grpc.ClientStream
}

type buyerServiceWatchClient struct {
	grpc.ClientStream
}

func (x *buyerServiceWatchClient) Recv() (*WatchBuyerEvent, error) {
	m := new(WatchBuyerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *buyerServiceClient) Update(ctx context.Context, in *UpdateBuyerRequest, opts ...grpc.CallOption) (*UpdateBuyerResponse, error) {
	out := new(UpdateBuyerResponse)
	err := c.cc.Invoke(ctx, "/config.BuyerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerServiceClient) Create(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*CreateBuyerResponse, error) {
	out := new(CreateBuyerResponse)
	err := c.cc.Invoke(ctx, "/config.BuyerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyerServiceClient) Delete(ctx context.Context, in *DeleteBuyerRequest, opts ...grpc.CallOption) (*DeleteBuyerResponse, error) {
	out := new(DeleteBuyerResponse)
	err := c.cc.Invoke(ctx, "/config.BuyerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyerServiceServer is the server API for BuyerService service.
type BuyerServiceServer interface {
	// Fetch a page of Buyer entities
	List(context.Context, *ListBuyerRequest) (*ListBuyerResponse, error)
	// Retrieve a single Buyer, if it exists
	Get(context.Context, *GetBuyerRequest) (*GetBuyerResponse, error)
	// Watch all Buyer entities for changes
	Watch(*WatchBuyerRequest, BuyerService_WatchServer) error
	// Update a single Buyer
	Update(context.Context, *UpdateBuyerRequest) (*UpdateBuyerResponse, error)
	// Create a single Buyer
	Create(context.Context, *CreateBuyerRequest) (*CreateBuyerResponse, error)
	// Delete a single Buyer
	Delete(context.Context, *DeleteBuyerRequest) (*DeleteBuyerResponse, error)
}

func RegisterBuyerServiceServer(s *grpc.Server, srv BuyerServiceServer) {
	s.RegisterService(&_BuyerService_serviceDesc, srv)
}

func _BuyerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.BuyerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).List(ctx, req.(*ListBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.BuyerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).Get(ctx, req.(*GetBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyerService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBuyerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuyerServiceServer).Watch(m, &buyerServiceWatchServer{stream})
}

type BuyerService_WatchServer interface {
	Send(*WatchBuyerEvent) error
	grpc.ServerStream
}

type buyerServiceWatchServer struct {
	grpc.ServerStream
}

func (x *buyerServiceWatchServer) Send(m *WatchBuyerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _BuyerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.BuyerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).Update(ctx, req.(*UpdateBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.BuyerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).Create(ctx, req.(*CreateBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.BuyerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyerServiceServer).Delete(ctx, req.(*DeleteBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuyerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.BuyerService",
	HandlerType: (*BuyerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _BuyerService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BuyerService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BuyerService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _BuyerService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BuyerService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _BuyerService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// MigrationServiceClient is the client API for MigrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MigrationServiceClient interface {
	// Fetch a page of Migration entities
	List(ctx context.Context, in *ListMigrationRequest, opts ...grpc.CallOption) (*ListMigrationResponse, error)
	// Retrieve a single Migration, if it exists
	Get(ctx context.Context, in *GetMigrationRequest, opts ...grpc.CallOption) (*GetMigrationResponse, error)
	// Watch all Migration entities for changes
	Watch(ctx context.Context, in *WatchMigrationRequest, opts ...grpc.CallOption) (MigrationService_WatchClient, error)
	// Update a single Migration
	Update(ctx context.Context, in *UpdateMigrationRequest, opts ...grpc.CallOption) (*UpdateMigrationResponse, error)
	// Create a single Migration
	Create(ctx context.Context, in *CreateMigrationRequest, opts ...grpc.CallOption) (*CreateMigrationResponse, error)
	// Delete a single Migration
	Delete(ctx context.Context, in *DeleteMigrationRequest, opts ...grpc.CallOption) (*DeleteMigrationResponse, error)
}

type migrationServiceClient struct {
	cc *grpc.ClientConn
}

func NewMigrationServiceClient(cc *grpc.ClientConn) MigrationServiceClient {
	return &migrationServiceClient{cc}
}

func (c *migrationServiceClient) List(ctx context.Context, in *ListMigrationRequest, opts ...grpc.CallOption) (*ListMigrationResponse, error) {
	out := new(ListMigrationResponse)
	err := c.cc.Invoke(ctx, "/config.MigrationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) Get(ctx context.Context, in *GetMigrationRequest, opts ...grpc.CallOption) (*GetMigrationResponse, error) {
	out := new(GetMigrationResponse)
	err := c.cc.Invoke(ctx, "/config.MigrationService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) Watch(ctx context.Context, in *WatchMigrationRequest, opts ...grpc.CallOption) (MigrationService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MigrationService_serviceDesc.Streams[0], "/config.MigrationService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &migrationServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MigrationService_WatchClient interface {
	Recv() (*WatchMigrationEvent, error)
	grpc.ClientStream
}

type migrationServiceWatchClient struct {
	grpc.ClientStream
}

func (x *migrationServiceWatchClient) Recv() (*WatchMigrationEvent, error) {
	m := new(WatchMigrationEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *migrationServiceClient) Update(ctx context.Context, in *UpdateMigrationRequest, opts ...grpc.CallOption) (*UpdateMigrationResponse, error) {
	out := new(UpdateMigrationResponse)
	err := c.cc.Invoke(ctx, "/config.MigrationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) Create(ctx context.Context, in *CreateMigrationRequest, opts ...grpc.CallOption) (*CreateMigrationResponse, error) {
	out := new(CreateMigrationResponse)
	err := c.cc.Invoke(ctx, "/config.MigrationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationServiceClient) Delete(ctx context.Context, in *DeleteMigrationRequest, opts ...grpc.CallOption) (*DeleteMigrationResponse, error) {
	out := new(DeleteMigrationResponse)
	err := c.cc.Invoke(ctx, "/config.MigrationService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationServiceServer is the server API for MigrationService service.
type MigrationServiceServer interface {
	// Fetch a page of Migration entities
	List(context.Context, *ListMigrationRequest) (*ListMigrationResponse, error)
	// Retrieve a single Migration, if it exists
	Get(context.Context, *GetMigrationRequest) (*GetMigrationResponse, error)
	// Watch all Migration entities for changes
	Watch(*WatchMigrationRequest, MigrationService_WatchServer) error
	// Update a single Migration
	Update(context.Context, *UpdateMigrationRequest) (*UpdateMigrationResponse, error)
	// Create a single Migration
	Create(context.Context, *CreateMigrationRequest) (*CreateMigrationResponse, error)
	// Delete a single Migration
	Delete(context.Context, *DeleteMigrationRequest) (*DeleteMigrationResponse, error)
}

func RegisterMigrationServiceServer(s *grpc.Server, srv MigrationServiceServer) {
	s.RegisterService(&_MigrationService_serviceDesc, srv)
}

func _MigrationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MigrationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).List(ctx, req.(*ListMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MigrationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).Get(ctx, req.(*GetMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchMigrationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MigrationServiceServer).Watch(m, &migrationServiceWatchServer{stream})
}

type MigrationService_WatchServer interface {
	Send(*WatchMigrationEvent) error
	grpc.ServerStream
}

type migrationServiceWatchServer struct {
	grpc.ServerStream
}

func (x *migrationServiceWatchServer) Send(m *WatchMigrationEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _MigrationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MigrationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).Update(ctx, req.(*UpdateMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MigrationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).Create(ctx, req.(*CreateMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.MigrationService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationServiceServer).Delete(ctx, req.(*DeleteMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MigrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.MigrationService",
	HandlerType: (*MigrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _MigrationService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MigrationService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MigrationService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MigrationService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MigrationService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _MigrationService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// FeatureFlagBoolServiceClient is the client API for FeatureFlagBoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FeatureFlagBoolServiceClient interface {
	// Fetch a page of FeatureFlagBool entities
	List(ctx context.Context, in *ListFeatureFlagBoolRequest, opts ...grpc.CallOption) (*ListFeatureFlagBoolResponse, error)
	// Retrieve a single FeatureFlagBool, if it exists
	Get(ctx context.Context, in *GetFeatureFlagBoolRequest, opts ...grpc.CallOption) (*GetFeatureFlagBoolResponse, error)
	// Watch all FeatureFlagBool entities for changes
	Watch(ctx context.Context, in *WatchFeatureFlagBoolRequest, opts ...grpc.CallOption) (FeatureFlagBoolService_WatchClient, error)
	// Update a single FeatureFlagBool
	Update(ctx context.Context, in *UpdateFeatureFlagBoolRequest, opts ...grpc.CallOption) (*UpdateFeatureFlagBoolResponse, error)
	// Create a single FeatureFlagBool
	Create(ctx context.Context, in *CreateFeatureFlagBoolRequest, opts ...grpc.CallOption) (*CreateFeatureFlagBoolResponse, error)
	// Delete a single FeatureFlagBool
	Delete(ctx context.Context, in *DeleteFeatureFlagBoolRequest, opts ...grpc.CallOption) (*DeleteFeatureFlagBoolResponse, error)
}

type featureFlagBoolServiceClient struct {
	cc *grpc.ClientConn
}

func NewFeatureFlagBoolServiceClient(cc *grpc.ClientConn) FeatureFlagBoolServiceClient {
	return &featureFlagBoolServiceClient{cc}
}

func (c *featureFlagBoolServiceClient) List(ctx context.Context, in *ListFeatureFlagBoolRequest, opts ...grpc.CallOption) (*ListFeatureFlagBoolResponse, error) {
	out := new(ListFeatureFlagBoolResponse)
	err := c.cc.Invoke(ctx, "/config.FeatureFlagBoolService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagBoolServiceClient) Get(ctx context.Context, in *GetFeatureFlagBoolRequest, opts ...grpc.CallOption) (*GetFeatureFlagBoolResponse, error) {
	out := new(GetFeatureFlagBoolResponse)
	err := c.cc.Invoke(ctx, "/config.FeatureFlagBoolService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagBoolServiceClient) Watch(ctx context.Context, in *WatchFeatureFlagBoolRequest, opts ...grpc.CallOption) (FeatureFlagBoolService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FeatureFlagBoolService_serviceDesc.Streams[0], "/config.FeatureFlagBoolService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &featureFlagBoolServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FeatureFlagBoolService_WatchClient interface {
	Recv() (*WatchFeatureFlagBoolEvent, error)
	grpc.ClientStream
}

type featureFlagBoolServiceWatchClient struct {
	grpc.ClientStream
}

func (x *featureFlagBoolServiceWatchClient) Recv() (*WatchFeatureFlagBoolEvent, error) {
	m := new(WatchFeatureFlagBoolEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *featureFlagBoolServiceClient) Update(ctx context.Context, in *UpdateFeatureFlagBoolRequest, opts ...grpc.CallOption) (*UpdateFeatureFlagBoolResponse, error) {
	out := new(UpdateFeatureFlagBoolResponse)
	err := c.cc.Invoke(ctx, "/config.FeatureFlagBoolService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagBoolServiceClient) Create(ctx context.Context, in *CreateFeatureFlagBoolRequest, opts ...grpc.CallOption) (*CreateFeatureFlagBoolResponse, error) {
	out := new(CreateFeatureFlagBoolResponse)
	err := c.cc.Invoke(ctx, "/config.FeatureFlagBoolService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureFlagBoolServiceClient) Delete(ctx context.Context, in *DeleteFeatureFlagBoolRequest, opts ...grpc.CallOption) (*DeleteFeatureFlagBoolResponse, error) {
	out := new(DeleteFeatureFlagBoolResponse)
	err := c.cc.Invoke(ctx, "/config.FeatureFlagBoolService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureFlagBoolServiceServer is the server API for FeatureFlagBoolService service.
type FeatureFlagBoolServiceServer interface {
	// Fetch a page of FeatureFlagBool entities
	List(context.Context, *ListFeatureFlagBoolRequest) (*ListFeatureFlagBoolResponse, error)
	// Retrieve a single FeatureFlagBool, if it exists
	Get(context.Context, *GetFeatureFlagBoolRequest) (*GetFeatureFlagBoolResponse, error)
	// Watch all FeatureFlagBool entities for changes
	Watch(*WatchFeatureFlagBoolRequest, FeatureFlagBoolService_WatchServer) error
	// Update a single FeatureFlagBool
	Update(context.Context, *UpdateFeatureFlagBoolRequest) (*UpdateFeatureFlagBoolResponse, error)
	// Create a single FeatureFlagBool
	Create(context.Context, *CreateFeatureFlagBoolRequest) (*CreateFeatureFlagBoolResponse, error)
	// Delete a single FeatureFlagBool
	Delete(context.Context, *DeleteFeatureFlagBoolRequest) (*DeleteFeatureFlagBoolResponse, error)
}

func RegisterFeatureFlagBoolServiceServer(s *grpc.Server, srv FeatureFlagBoolServiceServer) {
	s.RegisterService(&_FeatureFlagBoolService_serviceDesc, srv)
}

func _FeatureFlagBoolService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureFlagBoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagBoolServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.FeatureFlagBoolService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagBoolServiceServer).List(ctx, req.(*ListFeatureFlagBoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagBoolService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeatureFlagBoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagBoolServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.FeatureFlagBoolService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagBoolServiceServer).Get(ctx, req.(*GetFeatureFlagBoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagBoolService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchFeatureFlagBoolRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FeatureFlagBoolServiceServer).Watch(m, &featureFlagBoolServiceWatchServer{stream})
}

type FeatureFlagBoolService_WatchServer interface {
	Send(*WatchFeatureFlagBoolEvent) error
	grpc.ServerStream
}

type featureFlagBoolServiceWatchServer struct {
	grpc.ServerStream
}

func (x *featureFlagBoolServiceWatchServer) Send(m *WatchFeatureFlagBoolEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _FeatureFlagBoolService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeatureFlagBoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagBoolServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.FeatureFlagBoolService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagBoolServiceServer).Update(ctx, req.(*UpdateFeatureFlagBoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagBoolService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeatureFlagBoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagBoolServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.FeatureFlagBoolService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagBoolServiceServer).Create(ctx, req.(*CreateFeatureFlagBoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeatureFlagBoolService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeatureFlagBoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureFlagBoolServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.FeatureFlagBoolService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureFlagBoolServiceServer).Delete(ctx, req.(*DeleteFeatureFlagBoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeatureFlagBoolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.FeatureFlagBoolService",
	HandlerType: (*FeatureFlagBoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _FeatureFlagBoolService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FeatureFlagBoolService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FeatureFlagBoolService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _FeatureFlagBoolService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FeatureFlagBoolService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _FeatureFlagBoolService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// RelayServiceClient is the client API for RelayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelayServiceClient interface {
	// Fetch a page of Relay entities
	List(ctx context.Context, in *ListRelayRequest, opts ...grpc.CallOption) (*ListRelayResponse, error)
	// Retrieve a single Relay, if it exists
	Get(ctx context.Context, in *GetRelayRequest, opts ...grpc.CallOption) (*GetRelayResponse, error)
	// Watch all Relay entities for changes
	Watch(ctx context.Context, in *WatchRelayRequest, opts ...grpc.CallOption) (RelayService_WatchClient, error)
	// Update a single Relay
	Update(ctx context.Context, in *UpdateRelayRequest, opts ...grpc.CallOption) (*UpdateRelayResponse, error)
	// Create a single Relay
	Create(ctx context.Context, in *CreateRelayRequest, opts ...grpc.CallOption) (*CreateRelayResponse, error)
	// Delete a single Relay
	Delete(ctx context.Context, in *DeleteRelayRequest, opts ...grpc.CallOption) (*DeleteRelayResponse, error)
}

type relayServiceClient struct {
	cc *grpc.ClientConn
}

func NewRelayServiceClient(cc *grpc.ClientConn) RelayServiceClient {
	return &relayServiceClient{cc}
}

func (c *relayServiceClient) List(ctx context.Context, in *ListRelayRequest, opts ...grpc.CallOption) (*ListRelayResponse, error) {
	out := new(ListRelayResponse)
	err := c.cc.Invoke(ctx, "/config.RelayService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayServiceClient) Get(ctx context.Context, in *GetRelayRequest, opts ...grpc.CallOption) (*GetRelayResponse, error) {
	out := new(GetRelayResponse)
	err := c.cc.Invoke(ctx, "/config.RelayService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayServiceClient) Watch(ctx context.Context, in *WatchRelayRequest, opts ...grpc.CallOption) (RelayService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RelayService_serviceDesc.Streams[0], "/config.RelayService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &relayServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RelayService_WatchClient interface {
	Recv() (*WatchRelayEvent, error)
	grpc.ClientStream
}

type relayServiceWatchClient struct {
	grpc.ClientStream
}

func (x *relayServiceWatchClient) Recv() (*WatchRelayEvent, error) {
	m := new(WatchRelayEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *relayServiceClient) Update(ctx context.Context, in *UpdateRelayRequest, opts ...grpc.CallOption) (*UpdateRelayResponse, error) {
	out := new(UpdateRelayResponse)
	err := c.cc.Invoke(ctx, "/config.RelayService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayServiceClient) Create(ctx context.Context, in *CreateRelayRequest, opts ...grpc.CallOption) (*CreateRelayResponse, error) {
	out := new(CreateRelayResponse)
	err := c.cc.Invoke(ctx, "/config.RelayService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayServiceClient) Delete(ctx context.Context, in *DeleteRelayRequest, opts ...grpc.CallOption) (*DeleteRelayResponse, error) {
	out := new(DeleteRelayResponse)
	err := c.cc.Invoke(ctx, "/config.RelayService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayServiceServer is the server API for RelayService service.
type RelayServiceServer interface {
	// Fetch a page of Relay entities
	List(context.Context, *ListRelayRequest) (*ListRelayResponse, error)
	// Retrieve a single Relay, if it exists
	Get(context.Context, *GetRelayRequest) (*GetRelayResponse, error)
	// Watch all Relay entities for changes
	Watch(*WatchRelayRequest, RelayService_WatchServer) error
	// Update a single Relay
	Update(context.Context, *UpdateRelayRequest) (*UpdateRelayResponse, error)
	// Create a single Relay
	Create(context.Context, *CreateRelayRequest) (*CreateRelayResponse, error)
	// Delete a single Relay
	Delete(context.Context, *DeleteRelayRequest) (*DeleteRelayResponse, error)
}

func RegisterRelayServiceServer(s *grpc.Server, srv RelayServiceServer) {
	s.RegisterService(&_RelayService_serviceDesc, srv)
}

func _RelayService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RelayService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServiceServer).List(ctx, req.(*ListRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RelayService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServiceServer).Get(ctx, req.(*GetRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRelayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelayServiceServer).Watch(m, &relayServiceWatchServer{stream})
}

type RelayService_WatchServer interface {
	Send(*WatchRelayEvent) error
	grpc.ServerStream
}

type relayServiceWatchServer struct {
	grpc.ServerStream
}

func (x *relayServiceWatchServer) Send(m *WatchRelayEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _RelayService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RelayService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServiceServer).Update(ctx, req.(*UpdateRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RelayService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServiceServer).Create(ctx, req.(*CreateRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.RelayService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServiceServer).Delete(ctx, req.(*DeleteRelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RelayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.RelayService",
	HandlerType: (*RelayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _RelayService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RelayService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RelayService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _RelayService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RelayService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _RelayService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// Fetch a page of Customer entities
	List(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error)
	// Retrieve a single Customer, if it exists
	Get(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error)
	// Watch all Customer entities for changes
	Watch(ctx context.Context, in *WatchCustomerRequest, opts ...grpc.CallOption) (CustomerService_WatchClient, error)
	// Update a single Customer
	Update(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error)
	// Create a single Customer
	Create(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	// Delete a single Customer
	Delete(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*DeleteCustomerResponse, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) List(ctx context.Context, in *ListCustomerRequest, opts ...grpc.CallOption) (*ListCustomerResponse, error) {
	out := new(ListCustomerResponse)
	err := c.cc.Invoke(ctx, "/config.CustomerService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Get(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*GetCustomerResponse, error) {
	out := new(GetCustomerResponse)
	err := c.cc.Invoke(ctx, "/config.CustomerService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Watch(ctx context.Context, in *WatchCustomerRequest, opts ...grpc.CallOption) (CustomerService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CustomerService_serviceDesc.Streams[0], "/config.CustomerService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &customerServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CustomerService_WatchClient interface {
	Recv() (*WatchCustomerEvent, error)
	grpc.ClientStream
}

type customerServiceWatchClient struct {
	grpc.ClientStream
}

func (x *customerServiceWatchClient) Recv() (*WatchCustomerEvent, error) {
	m := new(WatchCustomerEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *customerServiceClient) Update(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*UpdateCustomerResponse, error) {
	out := new(UpdateCustomerResponse)
	err := c.cc.Invoke(ctx, "/config.CustomerService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Create(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, "/config.CustomerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) Delete(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*DeleteCustomerResponse, error) {
	out := new(DeleteCustomerResponse)
	err := c.cc.Invoke(ctx, "/config.CustomerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	// Fetch a page of Customer entities
	List(context.Context, *ListCustomerRequest) (*ListCustomerResponse, error)
	// Retrieve a single Customer, if it exists
	Get(context.Context, *GetCustomerRequest) (*GetCustomerResponse, error)
	// Watch all Customer entities for changes
	Watch(*WatchCustomerRequest, CustomerService_WatchServer) error
	// Update a single Customer
	Update(context.Context, *UpdateCustomerRequest) (*UpdateCustomerResponse, error)
	// Create a single Customer
	Create(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	// Delete a single Customer
	Delete(context.Context, *DeleteCustomerRequest) (*DeleteCustomerResponse, error)
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CustomerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).List(ctx, req.(*ListCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CustomerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Get(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchCustomerRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CustomerServiceServer).Watch(m, &customerServiceWatchServer{stream})
}

type CustomerService_WatchServer interface {
	Send(*WatchCustomerEvent) error
	grpc.ServerStream
}

type customerServiceWatchServer struct {
	grpc.ServerStream
}

func (x *customerServiceWatchServer) Send(m *WatchCustomerEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _CustomerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CustomerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Update(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CustomerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Create(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.CustomerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Delete(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _CustomerService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CustomerService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CustomerService_Update_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CustomerService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CustomerService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _CustomerService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// Watch for incoming transactions
	Watch(ctx context.Context, in *TypedWatchTransactionsRequest, opts ...grpc.CallOption) (TransactionService_WatchClient, error)
}

type transactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionServiceClient(cc *grpc.ClientConn) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) Watch(ctx context.Context, in *TypedWatchTransactionsRequest, opts ...grpc.CallOption) (TransactionService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionService_serviceDesc.Streams[0], "/config.TransactionService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_WatchClient interface {
	Recv() (*TypedWatchTransactionsResponse, error)
	grpc.ClientStream
}

type transactionServiceWatchClient struct {
	grpc.ClientStream
}

func (x *transactionServiceWatchClient) Recv() (*TypedWatchTransactionsResponse, error) {
	m := new(TypedWatchTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionServiceServer is the server API for TransactionService service.
type TransactionServiceServer interface {
	// Watch for incoming transactions
	Watch(*TypedWatchTransactionsRequest, TransactionService_WatchServer) error
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TypedWatchTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).Watch(m, &transactionServiceWatchServer{stream})
}

type TransactionService_WatchServer interface {
	Send(*TypedWatchTransactionsResponse) error
	grpc.ServerStream
}

type transactionServiceWatchServer struct {
	grpc.ServerStream
}

func (x *transactionServiceWatchServer) Send(m *TypedWatchTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _TransactionService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "config.proto",
}

const traceDefaultServiceName = "configstore client"

// ==== tracing code begin ====
// ==== tracing.go and generator_gosdk_template.gotxt should be identical here ====

var hasInited bool
var traceServiceName string
var traceEnabled bool

func doInit() {
	traceServiceName = os.Getenv("CONFIGSTORE_SERVICE_NAME")
	if traceServiceName == "" {
		traceServiceName = traceDefaultServiceName
	}
	traceEnabled = os.Getenv("CONFIGSTORE_ENABLE_TRACE") == "1"
	hasInited = true
}

func getTraceServiceName() string {
	if !hasInited {
		doInit()
	}
	return traceServiceName
}

func isTracingEnabled() bool {
	if !hasInited {
		doInit()
	}
	return traceEnabled
}

func serializeMetaEntityForTrace(entity *MetaEntity) string {
	var lines []string
	lines = append(lines, "")
	lines = append(lines, fmt.Sprintf("  key = %s", SerializeKey(entity.Key)))
	for _, value := range entity.Values {
		serValue := "(unknown)"
		switch value.Type {
		case ValueType_double:
			serValue = fmt.Sprintf("%f", value.DoubleValue)
		case ValueType_int64:
			serValue = fmt.Sprintf("%d", value.Int64Value)
		case ValueType_string:
			serValue = value.StringValue
		case ValueType_timestamp:
			serValue = fmt.Sprintf("%+v", value.TimestampValue)
		case ValueType_boolean:
			if value.BooleanValue {
				serValue = "true"
			} else {
				serValue = "false"
			}
		case ValueType_bytes:
			serValue = "(bytes)"
		case ValueType_key:
			if value.KeyValue == nil {
				serValue = "(nil)"
			} else {
				serValue = SerializeKey(value.KeyValue)
			}
		case ValueType_uint64:
			serValue = fmt.Sprintf("%d", value.Uint64Value)
		}
		lines = append(lines, fmt.Sprintf("  %d = %s", value.Id, serValue))
	}
	return strings.Join(lines, "\n")
}

func RecordTrace(trace *ConfigstoreTraceEntry) {
	if !isTracingEnabled() {
		return
	}

	RecordTraceWithCustomEntity(trace, nil)
}

func RecordTraceWithCustomEntity(trace *ConfigstoreTraceEntry, entity interface{}) {
	if !isTracingEnabled() {
		return
	}

	var entityString string
	if entity != nil {
		metaEntity, ok := entity.(*MetaEntity)
		if ok {
			entityString = serializeMetaEntityForTrace(metaEntity)
		} else {
			entityString = fmt.Sprintf("%+v", entity)
		}
	} else {
		if trace.Entity != nil {
			entityString = serializeMetaEntityForTrace(trace.Entity)
		}
	}

	switch trace.Type {
	case ConfigstoreTraceEntry_INITIAL_STATE_SEND_BEGIN:
		log.Printf("%s: initial state: send begin", trace.OperatorId)
	case ConfigstoreTraceEntry_INITIAL_STATE_SEND_ENTITY:
		log.Printf("%s: initial state: send entity: %s", trace.OperatorId, entityString)
	case ConfigstoreTraceEntry_INITIAL_STATE_SEND_END:
		log.Printf("%s: initial state: send end", trace.OperatorId)
	case ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_BEGIN:
		log.Printf("%s: initial state: receive begin", trace.OperatorId)
	case ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_ENTITY:
		log.Printf("%s: initial state: receive entity: %s", trace.OperatorId, entityString)
	case ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_END:
		log.Printf("%s: initial state: receive end", trace.OperatorId)
	case ConfigstoreTraceEntry_TRANSACTION_BATCH_SEND_BEGIN:
		log.Printf("%s: transaction batch: %s: send begin", trace.OperatorId, trace.TransactionId)
	case ConfigstoreTraceEntry_TRANSACTION_BATCH_SEND_MUTATED_ENTITY:
		log.Printf("%s: transaction batch: %s: send mutated entity: %s", trace.OperatorId, trace.TransactionId, entityString)
	case ConfigstoreTraceEntry_TRANSACTION_BATCH_SEND_DELETED_ENTITY_KEY:
		log.Printf("%s: transaction batch: %s: send deleted entity key: %s", trace.OperatorId, trace.TransactionId, SerializeKey(trace.Key))
	case ConfigstoreTraceEntry_TRANSACTION_BATCH_SEND_END:
		log.Printf("%s: transaction batch: %s: send end", trace.OperatorId, trace.TransactionId)
	case ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_BEGIN:
		log.Printf("%s: transaction batch: %s: receive begin", trace.OperatorId, trace.TransactionId)
	case ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_MUTATED_ENTITY:
		log.Printf("%s: transaction batch: %s: receive mutated entity: %s", trace.OperatorId, trace.TransactionId, entityString)
	case ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_DELETED_ENTITY_KEY:
		log.Printf("%s: transaction batch: %s: receive deleted entity key: %s", trace.OperatorId, trace.TransactionId, SerializeKey(trace.Key))
	case ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_END:
		log.Printf("%s: transaction batch: %s: receive end", trace.OperatorId, trace.TransactionId)
	case ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY:
		log.Printf("%s: in memory: store %s", trace.OperatorId, entityString)
	case ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY:
		log.Printf("%s: in memory: delete %s", trace.OperatorId, SerializeKey(trace.Key))
	case ConfigstoreTraceEntry_TRANSACTION_ARRIVED:
		log.Printf("%s: transaction queue: %s: transaction arrived", trace.OperatorId, trace.TransactionId)
	case ConfigstoreTraceEntry_TRANSACTION_FINISHED_PROCESSING:
		log.Printf("%s: transaction queue: %s: finished processing transaction (%d transactions left to process)", trace.OperatorId, trace.TransactionId, trace.RemainingTransactionQueueCount)
	case ConfigstoreTraceEntry_TRANSACTION_STALLED:
		log.Printf("%s: transaction queue: %s: can't process transaction, waiting on entity snapshot with key: %s", trace.OperatorId, trace.TransactionId, SerializeKey(trace.Key))
	case ConfigstoreTraceEntry_CONFIGSTORE_CONSISTENT:
		log.Printf("%s: consistent and ready to serve transactions", trace.OperatorId)
	case ConfigstoreTraceEntry_TRANSACTION_MUTATED_ENTITY_KEY:
		log.Printf("%s: transaction queue: %s: transaction contained mutated entity key: %s", trace.OperatorId, trace.TransactionId, SerializeKey(trace.Key))
	case ConfigstoreTraceEntry_TRANSACTION_DELETED_ENTITY_KEY:
		log.Printf("%s: transaction queue: %s: transaction contained deleted entity key: %s", trace.OperatorId, trace.TransactionId, SerializeKey(trace.Key))
	case ConfigstoreTraceEntry_TRANSACTION_RECONSTRUCT_APPEND_MUTATED_ENTITY:
		log.Printf("%s: transaction reconstructor: %s: append mutated entity with key %s: %s", trace.OperatorId, trace.TransactionId, SerializeKey(trace.Key), entityString)
	case ConfigstoreTraceEntry_CLIENT_CURRENTLY_DISCONNECTED_ATTEMPTING_RECONNECT:
		log.Printf("%s: currently disconnected, attempting to reconnect...", trace.OperatorId)
	case ConfigstoreTraceEntry_CLIENT_FAILED_RECONNECT:
		log.Printf("%s: failed to reconnect: %s", trace.OperatorId, trace.ErrorString)
	case ConfigstoreTraceEntry_CLIENT_CONNECTION_REESTABLISHED:
		log.Printf("%s: connection re-established", trace.OperatorId)
	case ConfigstoreTraceEntry_CLIENT_GOT_EOF_ATTEMPTING_RECONNECTING:
		log.Printf("%s: got EOF from configstore endpoint, attempting to reconnect...", trace.OperatorId)
	case ConfigstoreTraceEntry_CLIENT_GOT_NIL_BUG_IGNORING:
		log.Printf("%s: got nil response from endpoint (this is a bug), ignoring...", trace.OperatorId)
	case ConfigstoreTraceEntry_CLIENT_GOT_UNEXPECTED_CODE_ATTEMPTING_RECONNECT:
		log.Printf("%s: got %s code from configstore endpoint, attempting to reconnect...", trace.OperatorId, trace.ReconnectionCodeString)
	case ConfigstoreTraceEntry_SERVER_STARTUP_GRPC_PORT:
		log.Printf("%s: running gRPC server on port %d...", trace.OperatorId, trace.Port)
	case ConfigstoreTraceEntry_SERVER_STARTUP_HTTP_PORT:
		log.Printf("%s: running HTTP server on port %d...", trace.OperatorId, trace.Port)
	}
}

// ==== tracing code end ====

func Fnv64a(val string) uint64 {
	hash := fnv.New64a()
	hash.Write(([]byte)(val))
	return hash.Sum64()
}

func Fnv64aPair(a uint64, b uint64) uint64 {
	hash := fnv.New64a()
	if a > b {
		tmp := a
		a = b
		b = tmp
	}
	key := make([]byte, 16)
	binary.LittleEndian.PutUint64(key, a)
	binary.LittleEndian.PutUint64(key[8:], b)
	hash.Write(key)
	return hash.Sum64()
}

func Fnv32a(val string) uint32 {
	hash := fnv.New32a()
	hash.Write(([]byte)(val))
	return hash.Sum32()
}

func Fnv32aPair(a uint32, b uint32) uint32 {
	hash := fnv.New32a()
	if a > b {
		tmp := a
		a = b
		b = tmp
	}
	key := make([]byte, 16)
	binary.LittleEndian.PutUint32(key, a)
	binary.LittleEndian.PutUint32(key[8:], b)
	hash.Write(key)
	return hash.Sum32()
}

func CreateTopLevelKey(partitionId *PartitionId, pathElement *PathElement) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{pathElement},
	}
}

func GetInputForHashingKey(k *Key) string {
	if k == nil || len(k.Path) == 0 {
		return ""
	}
	return k.Path[len(k.Path)-1].GetName()
}

func CreateIncompleteTopLevelKey(partitionId *PartitionId, kind string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: kind,
			},
		},
	}
}

func CreateDescendantKey(parent *Key, pathElement *PathElement) *Key {
	newKey := &Key{
		PartitionId: &PartitionId{
			Namespace: parent.PartitionId.Namespace,
		},
		Path: nil,
	}
	for _, elem := range parent.Path {
		switch elem.IdType.(type) {
		case *PathElement_Id:
			newKey.Path = append(newKey.Path, &PathElement{
				Kind: elem.Kind,
				IdType: &PathElement_Id{
					Id: elem.GetId(),
				},
			})
			break
		case *PathElement_Name:
			newKey.Path = append(newKey.Path, &PathElement{
				Kind: elem.Kind,
				IdType: &PathElement_Name{
					Name: elem.GetName(),
				},
			})
			break
		}
	}
	switch pathElement.IdType.(type) {
	case *PathElement_Id:
		newKey.Path = append(newKey.Path, &PathElement{
			Kind: pathElement.Kind,
			IdType: &PathElement_Id{
				Id: pathElement.GetId(),
			},
		})
		break
	case *PathElement_Name:
		newKey.Path = append(newKey.Path, &PathElement{
			Kind: pathElement.Kind,
			IdType: &PathElement_Name{
				Name: pathElement.GetName(),
			},
		})
		break
	}
	return newKey
}

func SerializeTimestamp(ts *timestamp.Timestamp) string {
	if ts == nil {
		return ""
	}

	return ts.String()
}

func SerializeKey(key *Key) string {
	if key == nil {
		return ""
	}

	var elements []string
	for _, pathElement := range key.Path {
		if _, ok := pathElement.IdType.(*PathElement_Id); ok {
			elements = append(elements, fmt.Sprintf("%s:id=%d", pathElement.GetKind(), pathElement.GetId()))
		} else if _, ok := pathElement.IdType.(*PathElement_Name); ok {
			elements = append(elements, fmt.Sprintf("%s:name=%s", pathElement.GetKind(), pathElement.GetName()))
		} else {
			elements = append(elements, fmt.Sprintf("%s:unset", pathElement.GetKind()))
		}
	}
	return fmt.Sprintf("ns=%s|%s", key.PartitionId.Namespace, strings.Join(elements, "|"))
}

func CompareKeys(a *Key, b *Key) bool {
	return SerializeKey(a) == SerializeKey(b)
}


func CreateTopLevel_Buyer_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Buyer",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_Buyer_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Buyer",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_Buyer_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Buyer",
				IdType: nil,
			},
		},
	}
}

func (src *Buyer) Copy() *Buyer {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_Customer_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Customer",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_Customer_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Customer",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_Customer_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Customer",
				IdType: nil,
			},
		},
	}
}

func (src *Customer) Copy() *Customer {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_Datacenter_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Datacenter",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_Datacenter_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Datacenter",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_Datacenter_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Datacenter",
				IdType: nil,
			},
		},
	}
}

func (src *Datacenter) Copy() *Datacenter {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_FeatureFlagBool_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "FeatureFlagBool",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_FeatureFlagBool_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "FeatureFlagBool",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_FeatureFlagBool_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "FeatureFlagBool",
				IdType: nil,
			},
		},
	}
}

func (src *FeatureFlagBool) Copy() *FeatureFlagBool {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_MapRegion_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "MapRegion",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_MapRegion_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "MapRegion",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_MapRegion_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "MapRegion",
				IdType: nil,
			},
		},
	}
}

func (src *MapRegion) Copy() *MapRegion {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_Migration_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Migration",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_Migration_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Migration",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_Migration_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Migration",
				IdType: nil,
			},
		},
	}
}

func (src *Migration) Copy() *Migration {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_Relay_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Relay",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_Relay_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Relay",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_Relay_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Relay",
				IdType: nil,
			},
		},
	}
}

func (src *Relay) Copy() *Relay {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_Release_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Release",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_Release_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Release",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_Release_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Release",
				IdType: nil,
			},
		},
	}
}

func (src *Release) Copy() *Release {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_RouteShader_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "RouteShader",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_RouteShader_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "RouteShader",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_RouteShader_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "RouteShader",
				IdType: nil,
			},
		},
	}
}

func (src *RouteShader) Copy() *RouteShader {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}

func CreateTopLevel_Seller_NameKey(partitionId *PartitionId, name string) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Seller",
				IdType: &PathElement_Name{
					Name: name,
				},
			},
		},
	}
}

func CreateTopLevel_Seller_IdKey(partitionId *PartitionId, id int64) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Seller",
				IdType: &PathElement_Id{
				  Id: id,
				},
			},
		},
	}
}

func CreateTopLevel_Seller_IncompleteKey(partitionId *PartitionId) *Key {
	return &Key{
		PartitionId: partitionId,
		Path: []*PathElement{
			&PathElement{
				Kind: "Seller",
				IdType: nil,
			},
		},
	}
}

func (src *Seller) Copy() *Seller {
	// NOTE: This doesn't deep copy keys or timestamps, because we don't
	// expect those to be mutated in-place...
	dest := *src
	return &dest
}
















type Configstore struct {
	conn *grpc.ClientConn
	mutex sync.RWMutex

	
	Buyers BuyerStore
	
	Customers CustomerStore
	
	Datacenters DatacenterStore
	
	FeatureFlagBools FeatureFlagBoolStore
	
	MapRegions MapRegionStore
	
	Migrations MigrationStore
	
	Relays RelayStore
	
	Releases ReleaseStore
	
	RouteShaders RouteShaderStore
	
	Sellers SellerStore
	
}


type BuyerSnapshot struct {
	Buyers map[string]*Buyer
	
	Buyers_ByName map[string]*Buyer
				
	Buyers_BySdkVersion3PublicKeyId map[uint64]*Buyer
				}

type CustomerSnapshot struct {
	Customers map[string]*Customer
	
	Customers_ByAutomaticSigninDomain map[string]*Customer
				
	Customers_ByBuyer map[string]*Customer
				}

type DatacenterSnapshot struct {
	Datacenters map[string]*Datacenter
	
	Datacenters_ByDatacenterSdkId map[uint64]*Datacenter
				
	Datacenters_ByDatacenterNameAliasSdkId map[uint64]*Datacenter
				
	Datacenters_ByName map[string]*Datacenter
				}

type FeatureFlagBoolSnapshot struct {
	FeatureFlagBools map[string]*FeatureFlagBool
	}

type MapRegionSnapshot struct {
	MapRegions map[string]*MapRegion
	}

type MigrationSnapshot struct {
	Migrations map[string]*Migration
	}

type RelaySnapshot struct {
	Relays map[string]*Relay
	
	Relays_ByRelayCoreId map[uint32]*Relay
				
	Relays_ByRelaySdkId map[uint64]*Relay
				
	Relays_ByDisplayName map[string]*Relay
				}

type ReleaseSnapshot struct {
	Releases map[string]*Release
	}

type RouteShaderSnapshot struct {
	RouteShaders map[string]*RouteShader
	}

type SellerSnapshot struct {
	Sellers map[string]*Seller
	
	Sellers_ByName map[string]*Seller
				}


func (configstore *Configstore) TakeSnapshots(snapshots ...interface{}) {
	configstore.mutex.RLock()
	for _, snapshot := range snapshots {
		switch s := snapshot.(type) {

		case *BuyerSnapshot:
			src := configstore.Buyers.(*BuyerImplStore)
			s.Buyers = make(map[string]*Buyer)
			for k, v := range src.store {
				s.Buyers[k] = v.Copy()
			}
	
			s.Buyers_ByName = make(map[string]*Buyer)
			for k, v := range src.indexstore_Name {
				s.Buyers_ByName[k] = v.Copy()
			}
				
			s.Buyers_BySdkVersion3PublicKeyId = make(map[uint64]*Buyer)
			for k, v := range src.indexstore_SdkVersion3PublicKeyId {
				s.Buyers_BySdkVersion3PublicKeyId[k] = v.Copy()
			}
				
		case *CustomerSnapshot:
			src := configstore.Customers.(*CustomerImplStore)
			s.Customers = make(map[string]*Customer)
			for k, v := range src.store {
				s.Customers[k] = v.Copy()
			}
	
			s.Customers_ByAutomaticSigninDomain = make(map[string]*Customer)
			for k, v := range src.indexstore_AutomaticSigninDomain {
				s.Customers_ByAutomaticSigninDomain[k] = v.Copy()
			}
				
			s.Customers_ByBuyer = make(map[string]*Customer)
			for k, v := range src.indexstore_Buyer {
				s.Customers_ByBuyer[k] = v.Copy()
			}
				
		case *DatacenterSnapshot:
			src := configstore.Datacenters.(*DatacenterImplStore)
			s.Datacenters = make(map[string]*Datacenter)
			for k, v := range src.store {
				s.Datacenters[k] = v.Copy()
			}
	
			s.Datacenters_ByDatacenterSdkId = make(map[uint64]*Datacenter)
			for k, v := range src.indexstore_DatacenterSdkId {
				s.Datacenters_ByDatacenterSdkId[k] = v.Copy()
			}
				
			s.Datacenters_ByDatacenterNameAliasSdkId = make(map[uint64]*Datacenter)
			for k, v := range src.indexstore_DatacenterNameAliasSdkId {
				s.Datacenters_ByDatacenterNameAliasSdkId[k] = v.Copy()
			}
				
			s.Datacenters_ByName = make(map[string]*Datacenter)
			for k, v := range src.indexstore_Name {
				s.Datacenters_ByName[k] = v.Copy()
			}
				
		case *FeatureFlagBoolSnapshot:
			src := configstore.FeatureFlagBools.(*FeatureFlagBoolImplStore)
			s.FeatureFlagBools = make(map[string]*FeatureFlagBool)
			for k, v := range src.store {
				s.FeatureFlagBools[k] = v.Copy()
			}
	
		case *MapRegionSnapshot:
			src := configstore.MapRegions.(*MapRegionImplStore)
			s.MapRegions = make(map[string]*MapRegion)
			for k, v := range src.store {
				s.MapRegions[k] = v.Copy()
			}
	
		case *MigrationSnapshot:
			src := configstore.Migrations.(*MigrationImplStore)
			s.Migrations = make(map[string]*Migration)
			for k, v := range src.store {
				s.Migrations[k] = v.Copy()
			}
	
		case *RelaySnapshot:
			src := configstore.Relays.(*RelayImplStore)
			s.Relays = make(map[string]*Relay)
			for k, v := range src.store {
				s.Relays[k] = v.Copy()
			}
	
			s.Relays_ByRelayCoreId = make(map[uint32]*Relay)
			for k, v := range src.indexstore_RelayCoreId {
				s.Relays_ByRelayCoreId[k] = v.Copy()
			}
				
			s.Relays_ByRelaySdkId = make(map[uint64]*Relay)
			for k, v := range src.indexstore_RelaySdkId {
				s.Relays_ByRelaySdkId[k] = v.Copy()
			}
				
			s.Relays_ByDisplayName = make(map[string]*Relay)
			for k, v := range src.indexstore_DisplayName {
				s.Relays_ByDisplayName[k] = v.Copy()
			}
				
		case *ReleaseSnapshot:
			src := configstore.Releases.(*ReleaseImplStore)
			s.Releases = make(map[string]*Release)
			for k, v := range src.store {
				s.Releases[k] = v.Copy()
			}
	
		case *RouteShaderSnapshot:
			src := configstore.RouteShaders.(*RouteShaderImplStore)
			s.RouteShaders = make(map[string]*RouteShader)
			for k, v := range src.store {
				s.RouteShaders[k] = v.Copy()
			}
	
		case *SellerSnapshot:
			src := configstore.Sellers.(*SellerImplStore)
			s.Sellers = make(map[string]*Seller)
			for k, v := range src.store {
				s.Sellers[k] = v.Copy()
			}
	
			s.Sellers_ByName = make(map[string]*Seller)
			for k, v := range src.indexstore_Name {
				s.Sellers_ByName[k] = v.Copy()
			}
				
		}
	}
	configstore.mutex.RUnlock()
}

func ConnectToConfigstore(ctx context.Context, conn *grpc.ClientConn) (*Configstore, error) {
	configstore := &Configstore{
		conn: conn,
	}
	
	configstore.Buyers = &BuyerImplStore{
		configstore: configstore,
		client:   NewBuyerServiceClient(configstore.conn),
		store:    make(map[string]*Buyer),
		
			
				
					
					
		indexstore_Name: make(map[string]*Buyer),
					
				
			
		
			
				
					
					
		indexstore_SdkVersion3PublicKeyId: make(map[uint64]*Buyer),
					
				
			
		
	}
	
	configstore.Customers = &CustomerImplStore{
		configstore: configstore,
		client:   NewCustomerServiceClient(configstore.conn),
		store:    make(map[string]*Customer),
		
			
				
					
					
		indexstore_AutomaticSigninDomain: make(map[string]*Customer),
					
				
			
		
			
				
					
					
		indexstore_Buyer: make(map[string]*Customer),
					
				
			
		
	}
	
	configstore.Datacenters = &DatacenterImplStore{
		configstore: configstore,
		client:   NewDatacenterServiceClient(configstore.conn),
		store:    make(map[string]*Datacenter),
		
			
				
					
		indexstore_DatacenterSdkId: make(map[uint64]*Datacenter),
					
				
			
		
			
				
					
		indexstore_DatacenterNameAliasSdkId: make(map[uint64]*Datacenter),
					
				
			
		
			
				
					
					
		indexstore_Name: make(map[string]*Datacenter),
					
				
			
		
	}
	
	configstore.FeatureFlagBools = &FeatureFlagBoolImplStore{
		configstore: configstore,
		client:   NewFeatureFlagBoolServiceClient(configstore.conn),
		store:    make(map[string]*FeatureFlagBool),
		
	}
	
	configstore.MapRegions = &MapRegionImplStore{
		configstore: configstore,
		client:   NewMapRegionServiceClient(configstore.conn),
		store:    make(map[string]*MapRegion),
		
	}
	
	configstore.Migrations = &MigrationImplStore{
		configstore: configstore,
		client:   NewMigrationServiceClient(configstore.conn),
		store:    make(map[string]*Migration),
		
	}
	
	configstore.Relays = &RelayImplStore{
		configstore: configstore,
		client:   NewRelayServiceClient(configstore.conn),
		store:    make(map[string]*Relay),
		
			
				
					
		indexstore_RelayCoreId: make(map[uint32]*Relay),
					
				
			
		
			
				
					
		indexstore_RelaySdkId: make(map[uint64]*Relay),
					
				
			
		
			
				
					
					
		indexstore_DisplayName: make(map[string]*Relay),
					
				
			
		
	}
	
	configstore.Releases = &ReleaseImplStore{
		configstore: configstore,
		client:   NewReleaseServiceClient(configstore.conn),
		store:    make(map[string]*Release),
		
	}
	
	configstore.RouteShaders = &RouteShaderImplStore{
		configstore: configstore,
		client:   NewRouteShaderServiceClient(configstore.conn),
		store:    make(map[string]*RouteShader),
		
	}
	
	configstore.Sellers = &SellerImplStore{
		configstore: configstore,
		client:   NewSellerServiceClient(configstore.conn),
		store:    make(map[string]*Seller),
		
			
				
					
					
		indexstore_Name: make(map[string]*Seller),
					
				
			
		
	}
	
	client := NewTransactionServiceClient(configstore.conn)
	var mut sync.Mutex
	isLocked := true
	mut.Lock()
	watcher, watcherErr := client.Watch(ctx, &TypedWatchTransactionsRequest{})
	if watcherErr != nil {
		return nil, watcherErr
	}
	go func() {
		for {
			if watcher == nil {
				// watcher can become nil if we lose connection, attempt to reconnect (setting watcher = newWatcher),
				// but the connection failed on the reconnection attempt and we don't actually have a valid connection
				// yet. in this case, the connection is already closed, and we just need to attempt to reconnect until
				// we're back.
				RecordTrace(&ConfigstoreTraceEntry{
					OperatorId:                     getTraceServiceName(),
					Type:                           ConfigstoreTraceEntry_CLIENT_CURRENTLY_DISCONNECTED_ATTEMPTING_RECONNECT,
				})
				newWatcher, watcherReconnectErr := client.Watch(ctx, &TypedWatchTransactionsRequest{})
				watcher = newWatcher
				if watcherReconnectErr != nil {
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_CLIENT_FAILED_RECONNECT,
						ErrorString: 										fmt.Sprintf("%v", watcherReconnectErr),
					})
					time.Sleep(30 * time.Second)
					continue
				} else {
					// Connection re-established, keep going to receive updates.
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_CLIENT_CONNECTION_REESTABLISHED,
					})
				}
			}

			resp, respErr := watcher.Recv()
			if respErr == io.EOF {
				// Retry the Watch request itself
				RecordTrace(&ConfigstoreTraceEntry{
					OperatorId:                     getTraceServiceName(),
					Type:                           ConfigstoreTraceEntry_CLIENT_GOT_EOF_ATTEMPTING_RECONNECTING,
				})
				watcher.CloseSend()
				newWatcher, watcherReconnectErr := client.Watch(ctx, &TypedWatchTransactionsRequest{})
				watcher = newWatcher
				if watcherReconnectErr != nil {
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_CLIENT_FAILED_RECONNECT,
						ErrorString: 										fmt.Sprintf("%v", watcherReconnectErr),
					})
					time.Sleep(30 * time.Second)
					continue
				} else {
					// Connection re-established, loop back around again to receive updates.
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_CLIENT_CONNECTION_REESTABLISHED,
					})
				}
			}
			if respErr == nil || status.Code(respErr) == codes.OK {
				if resp == nil {
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_CLIENT_GOT_NIL_BUG_IGNORING,
					})
					time.Sleep(1 * time.Second)
					continue
				}

				switch b := resp.Response.(type) {
				case *TypedWatchTransactionsResponse_InitialState:
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_BEGIN,
					})
					// handle receiving initial state
					configstore.mutex.Lock()
					
					{
						var keys []string
						ref := configstore.Buyers.(*BuyerImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				{
	key := oldEntity.SdkVersion3PublicKeyId
	idx :=key
	delete(ref.indexstore_SdkVersion3PublicKeyId, idx)
}
				

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.Customers.(*CustomerImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	{
	key := oldEntity.AutomaticSigninDomain
	idx :=key
	delete(ref.indexstore_AutomaticSigninDomain, idx)
}
				{
	key := oldEntity.Buyer
	idx :=SerializeKey(key)
	delete(ref.indexstore_Buyer, idx)
}
				

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.Datacenters.(*DatacenterImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	
{
	e := oldEntity
	key := e.Name
	idx := Fnv64a(key)
	delete(ref.indexstore_DatacenterSdkId, idx)
}
					
{
	e := oldEntity
	key := e.NameAlias
	idx := Fnv64a(key)
	delete(ref.indexstore_DatacenterNameAliasSdkId, idx)
}
					{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.FeatureFlagBools.(*FeatureFlagBoolImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.MapRegions.(*MapRegionImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.Migrations.(*MigrationImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.Relays.(*RelayImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	
{
	e := oldEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv32a(key)
	delete(ref.indexstore_RelayCoreId, idx)
}
					
{
	e := oldEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv64a(key)
	delete(ref.indexstore_RelaySdkId, idx)
}
					{
	key := oldEntity.DisplayName
	idx :=key
	delete(ref.indexstore_DisplayName, idx)
}
				

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.Releases.(*ReleaseImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.RouteShaders.(*RouteShaderImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					{
						var keys []string
						ref := configstore.Sellers.(*SellerImplStore)
						for k := range ref.store {
							keys = append(keys, k)
						}
						for _, s := range keys {
							oldEntity, ok := ref.store[s]
							if ok {
								_ = oldEntity
								
	{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				

								RecordTrace(&ConfigstoreTraceEntry{
									OperatorId:                     getTraceServiceName(),
									Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
									Key: 														oldEntity.Key,
								})
							}
							delete(ref.store, s)
						}
					}
					
					for _, entity := range b.InitialState.Entities {
						RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
							OperatorId:                     getTraceServiceName(),
							Type:                           ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_ENTITY,
						}, entity.Entity)

						switch e := entity.Entity.(type) {
						
						case *TypedTransactionEntity_Buyer:
							{
								newEntity := e.Buyer
								ref := configstore.Buyers.(*BuyerImplStore)
								s := SerializeKey(newEntity.Key)
								
	{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				{
	key := newEntity.SdkVersion3PublicKeyId
	idx :=key
	ref.indexstore_SdkVersion3PublicKeyId[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Customer:
							{
								newEntity := e.Customer
								ref := configstore.Customers.(*CustomerImplStore)
								s := SerializeKey(newEntity.Key)
								
	{
	key := newEntity.AutomaticSigninDomain
	idx :=key
	ref.indexstore_AutomaticSigninDomain[idx] = newEntity
}
				{
	key := newEntity.Buyer
	idx :=SerializeKey(key)
	ref.indexstore_Buyer[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Datacenter:
							{
								newEntity := e.Datacenter
								ref := configstore.Datacenters.(*DatacenterImplStore)
								s := SerializeKey(newEntity.Key)
								
	
{
	e := newEntity
	key := e.Name
	idx := Fnv64a(key)
	ref.indexstore_DatacenterSdkId[idx] = newEntity
}
					
{
	e := newEntity
	key := e.NameAlias
	idx := Fnv64a(key)
	ref.indexstore_DatacenterNameAliasSdkId[idx] = newEntity
}
					{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_FeatureFlagBool:
							{
								newEntity := e.FeatureFlagBool
								ref := configstore.FeatureFlagBools.(*FeatureFlagBoolImplStore)
								s := SerializeKey(newEntity.Key)
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_MapRegion:
							{
								newEntity := e.MapRegion
								ref := configstore.MapRegions.(*MapRegionImplStore)
								s := SerializeKey(newEntity.Key)
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Migration:
							{
								newEntity := e.Migration
								ref := configstore.Migrations.(*MigrationImplStore)
								s := SerializeKey(newEntity.Key)
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Relay:
							{
								newEntity := e.Relay
								ref := configstore.Relays.(*RelayImplStore)
								s := SerializeKey(newEntity.Key)
								
	
{
	e := newEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv32a(key)
	ref.indexstore_RelayCoreId[idx] = newEntity
}
					
{
	e := newEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv64a(key)
	ref.indexstore_RelaySdkId[idx] = newEntity
}
					{
	key := newEntity.DisplayName
	idx :=key
	ref.indexstore_DisplayName[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Release:
							{
								newEntity := e.Release
								ref := configstore.Releases.(*ReleaseImplStore)
								s := SerializeKey(newEntity.Key)
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_RouteShader:
							{
								newEntity := e.RouteShader
								ref := configstore.RouteShaders.(*RouteShaderImplStore)
								s := SerializeKey(newEntity.Key)
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Seller:
							{
								newEntity := e.Seller
								ref := configstore.Sellers.(*SellerImplStore)
								s := SerializeKey(newEntity.Key)
								
	{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						}
					}
					if isLocked {
						isLocked = false
						mut.Unlock()
					}
					configstore.mutex.Unlock()
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_INITIAL_STATE_RECEIVE_END,
					})
				case *TypedWatchTransactionsResponse_Batch:
					// handle receiving batch
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_BEGIN,
						TransactionId: 									b.Batch.Id,
					})
					configstore.mutex.Lock()
					for _, entity := range b.Batch.MutatedEntities {
						switch e := entity.Entity.(type) {
						
						case *TypedTransactionEntity_Buyer:
							{
								newEntity := e.Buyer
								ref := configstore.Buyers.(*BuyerImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				{
	key := oldEntity.SdkVersion3PublicKeyId
	idx :=key
	delete(ref.indexstore_SdkVersion3PublicKeyId, idx)
}
				

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				{
	key := newEntity.SdkVersion3PublicKeyId
	idx :=key
	ref.indexstore_SdkVersion3PublicKeyId[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Customer:
							{
								newEntity := e.Customer
								ref := configstore.Customers.(*CustomerImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	{
	key := oldEntity.AutomaticSigninDomain
	idx :=key
	delete(ref.indexstore_AutomaticSigninDomain, idx)
}
				{
	key := oldEntity.Buyer
	idx :=SerializeKey(key)
	delete(ref.indexstore_Buyer, idx)
}
				

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	{
	key := newEntity.AutomaticSigninDomain
	idx :=key
	ref.indexstore_AutomaticSigninDomain[idx] = newEntity
}
				{
	key := newEntity.Buyer
	idx :=SerializeKey(key)
	ref.indexstore_Buyer[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Datacenter:
							{
								newEntity := e.Datacenter
								ref := configstore.Datacenters.(*DatacenterImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	
{
	e := oldEntity
	key := e.Name
	idx := Fnv64a(key)
	delete(ref.indexstore_DatacenterSdkId, idx)
}
					
{
	e := oldEntity
	key := e.NameAlias
	idx := Fnv64a(key)
	delete(ref.indexstore_DatacenterNameAliasSdkId, idx)
}
					{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	
{
	e := newEntity
	key := e.Name
	idx := Fnv64a(key)
	ref.indexstore_DatacenterSdkId[idx] = newEntity
}
					
{
	e := newEntity
	key := e.NameAlias
	idx := Fnv64a(key)
	ref.indexstore_DatacenterNameAliasSdkId[idx] = newEntity
}
					{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_FeatureFlagBool:
							{
								newEntity := e.FeatureFlagBool
								ref := configstore.FeatureFlagBools.(*FeatureFlagBoolImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_MapRegion:
							{
								newEntity := e.MapRegion
								ref := configstore.MapRegions.(*MapRegionImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Migration:
							{
								newEntity := e.Migration
								ref := configstore.Migrations.(*MigrationImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Relay:
							{
								newEntity := e.Relay
								ref := configstore.Relays.(*RelayImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	
{
	e := oldEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv32a(key)
	delete(ref.indexstore_RelayCoreId, idx)
}
					
{
	e := oldEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv64a(key)
	delete(ref.indexstore_RelaySdkId, idx)
}
					{
	key := oldEntity.DisplayName
	idx :=key
	delete(ref.indexstore_DisplayName, idx)
}
				

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	
{
	e := newEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv32a(key)
	ref.indexstore_RelayCoreId[idx] = newEntity
}
					
{
	e := newEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv64a(key)
	ref.indexstore_RelaySdkId[idx] = newEntity
}
					{
	key := newEntity.DisplayName
	idx :=key
	ref.indexstore_DisplayName[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Release:
							{
								newEntity := e.Release
								ref := configstore.Releases.(*ReleaseImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_RouteShader:
							{
								newEntity := e.RouteShader
								ref := configstore.RouteShaders.(*RouteShaderImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						case *TypedTransactionEntity_Seller:
							{
								newEntity := e.Seller
								ref := configstore.Sellers.(*SellerImplStore)
								s := SerializeKey(newEntity.Key)
								oldEntity, ok := ref.store[s]
								if ok {
									_ = oldEntity
									
	{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				

									RecordTrace(&ConfigstoreTraceEntry{
										OperatorId:                     getTraceServiceName(),
										Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
										TransactionId: 									b.Batch.Id,
										Key: 														oldEntity.Key,
									})
								}
								
	{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				
								ref.store[s] = newEntity
								RecordTraceWithCustomEntity(&ConfigstoreTraceEntry{
									OperatorId:     getTraceServiceName(),
									Type:           ConfigstoreTraceEntry_IN_MEMORY_STORE_ENTITY,
									TransactionId: 	b.Batch.Id,
									Key: 						newEntity.Key,
								}, newEntity)
							}
						
						}
					}
					for _, key := range b.Batch.DeletedKeys {
						s := SerializeKey(key)
						RecordTrace(&ConfigstoreTraceEntry{
							OperatorId:                     getTraceServiceName(),
							Type:                           ConfigstoreTraceEntry_IN_MEMORY_DELETE_ENTITY,
							TransactionId: 									b.Batch.Id,
							Key: 														key,
						})
						
						delete(configstore.Buyers.(*BuyerImplStore).store, s)
						
						delete(configstore.Customers.(*CustomerImplStore).store, s)
						
						delete(configstore.Datacenters.(*DatacenterImplStore).store, s)
						
						delete(configstore.FeatureFlagBools.(*FeatureFlagBoolImplStore).store, s)
						
						delete(configstore.MapRegions.(*MapRegionImplStore).store, s)
						
						delete(configstore.Migrations.(*MigrationImplStore).store, s)
						
						delete(configstore.Relays.(*RelayImplStore).store, s)
						
						delete(configstore.Releases.(*ReleaseImplStore).store, s)
						
						delete(configstore.RouteShaders.(*RouteShaderImplStore).store, s)
						
						delete(configstore.Sellers.(*SellerImplStore).store, s)
						
					}
					configstore.mutex.Unlock()
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_TRANSACTION_BATCH_RECEIVE_END,
						TransactionId: 									b.Batch.Id,
					})
				}
			} else {
				// We got some other kind of error e.g. configstore is unavailable, or the Watch endpoint
				// returned an error and will no longer deliver new updates. In this case, we must always
				// reconnect as we can't trust the state of the server side requests to be one in which 
				// retrying Recv() will ever work.
				RecordTrace(&ConfigstoreTraceEntry{
					OperatorId:                     getTraceServiceName(),
					Type:                           ConfigstoreTraceEntry_CLIENT_GOT_UNEXPECTED_CODE_ATTEMPTING_RECONNECT,
					ReconnectionCodeString:         status.Code(respErr).String(),
				})
				watcher.CloseSend()
				newWatcher, watcherReconnectErr := client.Watch(ctx, &TypedWatchTransactionsRequest{})
				watcher = newWatcher
				if watcherReconnectErr != nil {
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_CLIENT_FAILED_RECONNECT,
						ErrorString: 										fmt.Sprintf("%v", watcherReconnectErr),
					})
					time.Sleep(30 * time.Second)
					continue
				} else {
					// Connection re-established, loop back around again to receive updates.
					RecordTrace(&ConfigstoreTraceEntry{
						OperatorId:                     getTraceServiceName(),
						Type:                           ConfigstoreTraceEntry_CLIENT_CONNECTION_REESTABLISHED,
					})
				}
			}
		}
	}()

	// wait for initial state
	mut.Lock()

	return configstore, nil
}


type BuyerImplStore struct {
	configstore *Configstore
	client BuyerServiceClient
	store map[string]*Buyer
	
		
			
				
				
	indexstore_Name map[string]*Buyer
				
			
		
	
		
			
				
				
	indexstore_SdkVersion3PublicKeyId map[uint64]*Buyer
				
			
		
	
}

type BuyerStore interface {
	Client() BuyerServiceClient
	Create(ctx context.Context, entity *Buyer) (*Buyer, error)
	Update(ctx context.Context, entity *Buyer) (*Buyer, error)
	Upsert(ctx context.Context, entity *Buyer) (*Buyer, error)
	Delete(ctx context.Context, key *Key) (*Buyer, error)
	GetAndCheck(key *Key) (*Buyer, bool)
	Get(key *Key) *Buyer
	GetKeys() []*Key
	GetByName(key string) *Buyer
	GetAndCheckByName(key string) (*Buyer, bool)
				
	GetBySdkVersion3PublicKeyId(key uint64) *Buyer
	GetAndCheckBySdkVersion3PublicKeyId(key uint64) (*Buyer, bool)
				
}

func (c *BuyerImplStore) Client() BuyerServiceClient {
	return c.client
}


func (c *BuyerImplStore) GetByName(key string) *Buyer {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_Name[key]
}

func (c *BuyerImplStore) GetAndCheckByName(key string) (*Buyer, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_Name[key]
	return val, ok
}

func (c *BuyerSnapshot) GetByName(key string) *Buyer {
	return c.Buyers_ByName[key]
}

func (c *BuyerSnapshot) GetAndCheckByName(key string) (*Buyer, bool) {
	val, ok := c.Buyers_ByName[key]
	return val, ok
}
func (c *BuyerImplStore) GetBySdkVersion3PublicKeyId(key uint64) *Buyer {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_SdkVersion3PublicKeyId[key]
}

func (c *BuyerImplStore) GetAndCheckBySdkVersion3PublicKeyId(key uint64) (*Buyer, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_SdkVersion3PublicKeyId[key]
	return val, ok
}

func (c *BuyerSnapshot) GetBySdkVersion3PublicKeyId(key uint64) *Buyer {
	return c.Buyers_BySdkVersion3PublicKeyId[key]
}

func (c *BuyerSnapshot) GetAndCheckBySdkVersion3PublicKeyId(key uint64) (*Buyer, bool) {
	val, ok := c.Buyers_BySdkVersion3PublicKeyId[key]
	return val, ok
}

func (c *BuyerImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *BuyerImplStore) Get(key *Key) *Buyer {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *BuyerImplStore) GetAndCheck(key *Key) (*Buyer, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *BuyerSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.Buyers))
	i := 0
	for _, entity := range c.Buyers {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *BuyerSnapshot) Get(key *Key) *Buyer {
	return c.Buyers[SerializeKey(key)]
}

func (c *BuyerSnapshot) GetAndCheck(key *Key) (*Buyer, bool) {
	val, ok := c.Buyers[SerializeKey(key)]
	return val, ok
}

func (ref *BuyerImplStore) Create(ctx context.Context, entity *Buyer) (*Buyer, error) {
	resp, err := ref.client.Create(ctx, &CreateBuyerRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				{
	key := newEntity.SdkVersion3PublicKeyId
	idx :=key
	ref.indexstore_SdkVersion3PublicKeyId[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *BuyerImplStore) Update(ctx context.Context, entity *Buyer) (*Buyer, error) {
	resp, err := ref.client.Update(ctx, &UpdateBuyerRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				{
	key := oldEntity.SdkVersion3PublicKeyId
	idx :=key
	delete(ref.indexstore_SdkVersion3PublicKeyId, idx)
}
				

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				{
	key := newEntity.SdkVersion3PublicKeyId
	idx :=key
	ref.indexstore_SdkVersion3PublicKeyId[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *BuyerImplStore) Upsert(ctx context.Context, entity *Buyer) (*Buyer, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *BuyerImplStore) Delete(ctx context.Context, key *Key) (*Buyer, error) {
	resp, err := ref.client.Delete(ctx, &DeleteBuyerRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				{
	key := oldEntity.SdkVersion3PublicKeyId
	idx :=key
	delete(ref.indexstore_SdkVersion3PublicKeyId, idx)
}
				

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type CustomerImplStore struct {
	configstore *Configstore
	client CustomerServiceClient
	store map[string]*Customer
	
		
			
				
				
	indexstore_AutomaticSigninDomain map[string]*Customer
				
			
		
	
		
			
				
				
	indexstore_Buyer map[string]*Customer
				
			
		
	
}

type CustomerStore interface {
	Client() CustomerServiceClient
	Create(ctx context.Context, entity *Customer) (*Customer, error)
	Update(ctx context.Context, entity *Customer) (*Customer, error)
	Upsert(ctx context.Context, entity *Customer) (*Customer, error)
	Delete(ctx context.Context, key *Key) (*Customer, error)
	GetAndCheck(key *Key) (*Customer, bool)
	Get(key *Key) *Customer
	GetKeys() []*Key
	GetByAutomaticSigninDomain(key string) *Customer
	GetAndCheckByAutomaticSigninDomain(key string) (*Customer, bool)
				
	GetByBuyer(key *Key) *Customer
	GetAndCheckByBuyer(key *Key) (*Customer, bool)
				
}

func (c *CustomerImplStore) Client() CustomerServiceClient {
	return c.client
}


func (c *CustomerImplStore) GetByAutomaticSigninDomain(key string) *Customer {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_AutomaticSigninDomain[key]
}

func (c *CustomerImplStore) GetAndCheckByAutomaticSigninDomain(key string) (*Customer, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_AutomaticSigninDomain[key]
	return val, ok
}

func (c *CustomerSnapshot) GetByAutomaticSigninDomain(key string) *Customer {
	return c.Customers_ByAutomaticSigninDomain[key]
}

func (c *CustomerSnapshot) GetAndCheckByAutomaticSigninDomain(key string) (*Customer, bool) {
	val, ok := c.Customers_ByAutomaticSigninDomain[key]
	return val, ok
}
func (c *CustomerImplStore) GetByBuyer(key *Key) *Customer {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_Buyer[SerializeKey(key)]
}

func (c *CustomerImplStore) GetAndCheckByBuyer(key *Key) (*Customer, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_Buyer[SerializeKey(key)]
	return val, ok
}

func (c *CustomerSnapshot) GetByBuyer(key *Key) *Customer {
	return c.Customers_ByBuyer[SerializeKey(key)]
}

func (c *CustomerSnapshot) GetAndCheckByBuyer(key *Key) (*Customer, bool) {
	val, ok := c.Customers_ByBuyer[SerializeKey(key)]
	return val, ok
}

func (c *CustomerImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *CustomerImplStore) Get(key *Key) *Customer {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *CustomerImplStore) GetAndCheck(key *Key) (*Customer, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *CustomerSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.Customers))
	i := 0
	for _, entity := range c.Customers {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *CustomerSnapshot) Get(key *Key) *Customer {
	return c.Customers[SerializeKey(key)]
}

func (c *CustomerSnapshot) GetAndCheck(key *Key) (*Customer, bool) {
	val, ok := c.Customers[SerializeKey(key)]
	return val, ok
}

func (ref *CustomerImplStore) Create(ctx context.Context, entity *Customer) (*Customer, error) {
	resp, err := ref.client.Create(ctx, &CreateCustomerRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	{
	key := newEntity.AutomaticSigninDomain
	idx :=key
	ref.indexstore_AutomaticSigninDomain[idx] = newEntity
}
				{
	key := newEntity.Buyer
	idx :=SerializeKey(key)
	ref.indexstore_Buyer[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *CustomerImplStore) Update(ctx context.Context, entity *Customer) (*Customer, error) {
	resp, err := ref.client.Update(ctx, &UpdateCustomerRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	{
	key := oldEntity.AutomaticSigninDomain
	idx :=key
	delete(ref.indexstore_AutomaticSigninDomain, idx)
}
				{
	key := oldEntity.Buyer
	idx :=SerializeKey(key)
	delete(ref.indexstore_Buyer, idx)
}
				

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	{
	key := newEntity.AutomaticSigninDomain
	idx :=key
	ref.indexstore_AutomaticSigninDomain[idx] = newEntity
}
				{
	key := newEntity.Buyer
	idx :=SerializeKey(key)
	ref.indexstore_Buyer[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *CustomerImplStore) Upsert(ctx context.Context, entity *Customer) (*Customer, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *CustomerImplStore) Delete(ctx context.Context, key *Key) (*Customer, error) {
	resp, err := ref.client.Delete(ctx, &DeleteCustomerRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	{
	key := oldEntity.AutomaticSigninDomain
	idx :=key
	delete(ref.indexstore_AutomaticSigninDomain, idx)
}
				{
	key := oldEntity.Buyer
	idx :=SerializeKey(key)
	delete(ref.indexstore_Buyer, idx)
}
				

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type DatacenterImplStore struct {
	configstore *Configstore
	client DatacenterServiceClient
	store map[string]*Datacenter
	
		
			
				
	indexstore_DatacenterSdkId map[uint64]*Datacenter
				
			
		
	
		
			
				
	indexstore_DatacenterNameAliasSdkId map[uint64]*Datacenter
				
			
		
	
		
			
				
				
	indexstore_Name map[string]*Datacenter
				
			
		
	
}

type DatacenterStore interface {
	Client() DatacenterServiceClient
	Create(ctx context.Context, entity *Datacenter) (*Datacenter, error)
	Update(ctx context.Context, entity *Datacenter) (*Datacenter, error)
	Upsert(ctx context.Context, entity *Datacenter) (*Datacenter, error)
	Delete(ctx context.Context, key *Key) (*Datacenter, error)
	GetAndCheck(key *Key) (*Datacenter, bool)
	Get(key *Key) *Datacenter
	GetKeys() []*Key
	GetByDatacenterSdkId(key uint64) *Datacenter
	GetAndCheckByDatacenterSdkId(key uint64) (*Datacenter, bool)
				
	GetByDatacenterNameAliasSdkId(key uint64) *Datacenter
	GetAndCheckByDatacenterNameAliasSdkId(key uint64) (*Datacenter, bool)
				
	GetByName(key string) *Datacenter
	GetAndCheckByName(key string) (*Datacenter, bool)
				
}

func (c *DatacenterImplStore) Client() DatacenterServiceClient {
	return c.client
}


func (c *DatacenterImplStore) GetByDatacenterSdkId(key uint64) *Datacenter {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_DatacenterSdkId[key]
}

func (c *DatacenterImplStore) GetAndCheckByDatacenterSdkId(key uint64) (*Datacenter, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_DatacenterSdkId[key]
	return val, ok
}

func (c *DatacenterSnapshot) GetByDatacenterSdkId(key uint64) *Datacenter {
	return c.Datacenters_ByDatacenterSdkId[key]
}

func (c *DatacenterSnapshot) GetAndCheckByDatacenterSdkId(key uint64) (*Datacenter, bool) {
	val, ok := c.Datacenters_ByDatacenterSdkId[key]
	return val, ok
}
			
func (c *DatacenterImplStore) GetByDatacenterNameAliasSdkId(key uint64) *Datacenter {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_DatacenterNameAliasSdkId[key]
}

func (c *DatacenterImplStore) GetAndCheckByDatacenterNameAliasSdkId(key uint64) (*Datacenter, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_DatacenterNameAliasSdkId[key]
	return val, ok
}

func (c *DatacenterSnapshot) GetByDatacenterNameAliasSdkId(key uint64) *Datacenter {
	return c.Datacenters_ByDatacenterNameAliasSdkId[key]
}

func (c *DatacenterSnapshot) GetAndCheckByDatacenterNameAliasSdkId(key uint64) (*Datacenter, bool) {
	val, ok := c.Datacenters_ByDatacenterNameAliasSdkId[key]
	return val, ok
}
			
func (c *DatacenterImplStore) GetByName(key string) *Datacenter {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_Name[key]
}

func (c *DatacenterImplStore) GetAndCheckByName(key string) (*Datacenter, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_Name[key]
	return val, ok
}

func (c *DatacenterSnapshot) GetByName(key string) *Datacenter {
	return c.Datacenters_ByName[key]
}

func (c *DatacenterSnapshot) GetAndCheckByName(key string) (*Datacenter, bool) {
	val, ok := c.Datacenters_ByName[key]
	return val, ok
}

func (c *DatacenterImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *DatacenterImplStore) Get(key *Key) *Datacenter {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *DatacenterImplStore) GetAndCheck(key *Key) (*Datacenter, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *DatacenterSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.Datacenters))
	i := 0
	for _, entity := range c.Datacenters {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *DatacenterSnapshot) Get(key *Key) *Datacenter {
	return c.Datacenters[SerializeKey(key)]
}

func (c *DatacenterSnapshot) GetAndCheck(key *Key) (*Datacenter, bool) {
	val, ok := c.Datacenters[SerializeKey(key)]
	return val, ok
}

func (ref *DatacenterImplStore) Create(ctx context.Context, entity *Datacenter) (*Datacenter, error) {
	resp, err := ref.client.Create(ctx, &CreateDatacenterRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	
{
	e := newEntity
	key := e.Name
	idx := Fnv64a(key)
	ref.indexstore_DatacenterSdkId[idx] = newEntity
}
					
{
	e := newEntity
	key := e.NameAlias
	idx := Fnv64a(key)
	ref.indexstore_DatacenterNameAliasSdkId[idx] = newEntity
}
					{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *DatacenterImplStore) Update(ctx context.Context, entity *Datacenter) (*Datacenter, error) {
	resp, err := ref.client.Update(ctx, &UpdateDatacenterRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	
{
	e := oldEntity
	key := e.Name
	idx := Fnv64a(key)
	delete(ref.indexstore_DatacenterSdkId, idx)
}
					
{
	e := oldEntity
	key := e.NameAlias
	idx := Fnv64a(key)
	delete(ref.indexstore_DatacenterNameAliasSdkId, idx)
}
					{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	
{
	e := newEntity
	key := e.Name
	idx := Fnv64a(key)
	ref.indexstore_DatacenterSdkId[idx] = newEntity
}
					
{
	e := newEntity
	key := e.NameAlias
	idx := Fnv64a(key)
	ref.indexstore_DatacenterNameAliasSdkId[idx] = newEntity
}
					{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *DatacenterImplStore) Upsert(ctx context.Context, entity *Datacenter) (*Datacenter, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *DatacenterImplStore) Delete(ctx context.Context, key *Key) (*Datacenter, error) {
	resp, err := ref.client.Delete(ctx, &DeleteDatacenterRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	
{
	e := oldEntity
	key := e.Name
	idx := Fnv64a(key)
	delete(ref.indexstore_DatacenterSdkId, idx)
}
					
{
	e := oldEntity
	key := e.NameAlias
	idx := Fnv64a(key)
	delete(ref.indexstore_DatacenterNameAliasSdkId, idx)
}
					{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type FeatureFlagBoolImplStore struct {
	configstore *Configstore
	client FeatureFlagBoolServiceClient
	store map[string]*FeatureFlagBool
	
}

type FeatureFlagBoolStore interface {
	Client() FeatureFlagBoolServiceClient
	Create(ctx context.Context, entity *FeatureFlagBool) (*FeatureFlagBool, error)
	Update(ctx context.Context, entity *FeatureFlagBool) (*FeatureFlagBool, error)
	Upsert(ctx context.Context, entity *FeatureFlagBool) (*FeatureFlagBool, error)
	Delete(ctx context.Context, key *Key) (*FeatureFlagBool, error)
	GetAndCheck(key *Key) (*FeatureFlagBool, bool)
	Get(key *Key) *FeatureFlagBool
	GetKeys() []*Key
}

func (c *FeatureFlagBoolImplStore) Client() FeatureFlagBoolServiceClient {
	return c.client
}



func (c *FeatureFlagBoolImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *FeatureFlagBoolImplStore) Get(key *Key) *FeatureFlagBool {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *FeatureFlagBoolImplStore) GetAndCheck(key *Key) (*FeatureFlagBool, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *FeatureFlagBoolSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.FeatureFlagBools))
	i := 0
	for _, entity := range c.FeatureFlagBools {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *FeatureFlagBoolSnapshot) Get(key *Key) *FeatureFlagBool {
	return c.FeatureFlagBools[SerializeKey(key)]
}

func (c *FeatureFlagBoolSnapshot) GetAndCheck(key *Key) (*FeatureFlagBool, bool) {
	val, ok := c.FeatureFlagBools[SerializeKey(key)]
	return val, ok
}

func (ref *FeatureFlagBoolImplStore) Create(ctx context.Context, entity *FeatureFlagBool) (*FeatureFlagBool, error) {
	resp, err := ref.client.Create(ctx, &CreateFeatureFlagBoolRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *FeatureFlagBoolImplStore) Update(ctx context.Context, entity *FeatureFlagBool) (*FeatureFlagBool, error) {
	resp, err := ref.client.Update(ctx, &UpdateFeatureFlagBoolRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *FeatureFlagBoolImplStore) Upsert(ctx context.Context, entity *FeatureFlagBool) (*FeatureFlagBool, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *FeatureFlagBoolImplStore) Delete(ctx context.Context, key *Key) (*FeatureFlagBool, error) {
	resp, err := ref.client.Delete(ctx, &DeleteFeatureFlagBoolRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type MapRegionImplStore struct {
	configstore *Configstore
	client MapRegionServiceClient
	store map[string]*MapRegion
	
}

type MapRegionStore interface {
	Client() MapRegionServiceClient
	Create(ctx context.Context, entity *MapRegion) (*MapRegion, error)
	Update(ctx context.Context, entity *MapRegion) (*MapRegion, error)
	Upsert(ctx context.Context, entity *MapRegion) (*MapRegion, error)
	Delete(ctx context.Context, key *Key) (*MapRegion, error)
	GetAndCheck(key *Key) (*MapRegion, bool)
	Get(key *Key) *MapRegion
	GetKeys() []*Key
}

func (c *MapRegionImplStore) Client() MapRegionServiceClient {
	return c.client
}



func (c *MapRegionImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *MapRegionImplStore) Get(key *Key) *MapRegion {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *MapRegionImplStore) GetAndCheck(key *Key) (*MapRegion, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *MapRegionSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.MapRegions))
	i := 0
	for _, entity := range c.MapRegions {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *MapRegionSnapshot) Get(key *Key) *MapRegion {
	return c.MapRegions[SerializeKey(key)]
}

func (c *MapRegionSnapshot) GetAndCheck(key *Key) (*MapRegion, bool) {
	val, ok := c.MapRegions[SerializeKey(key)]
	return val, ok
}

func (ref *MapRegionImplStore) Create(ctx context.Context, entity *MapRegion) (*MapRegion, error) {
	resp, err := ref.client.Create(ctx, &CreateMapRegionRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *MapRegionImplStore) Update(ctx context.Context, entity *MapRegion) (*MapRegion, error) {
	resp, err := ref.client.Update(ctx, &UpdateMapRegionRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *MapRegionImplStore) Upsert(ctx context.Context, entity *MapRegion) (*MapRegion, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *MapRegionImplStore) Delete(ctx context.Context, key *Key) (*MapRegion, error) {
	resp, err := ref.client.Delete(ctx, &DeleteMapRegionRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type MigrationImplStore struct {
	configstore *Configstore
	client MigrationServiceClient
	store map[string]*Migration
	
}

type MigrationStore interface {
	Client() MigrationServiceClient
	Create(ctx context.Context, entity *Migration) (*Migration, error)
	Update(ctx context.Context, entity *Migration) (*Migration, error)
	Upsert(ctx context.Context, entity *Migration) (*Migration, error)
	Delete(ctx context.Context, key *Key) (*Migration, error)
	GetAndCheck(key *Key) (*Migration, bool)
	Get(key *Key) *Migration
	GetKeys() []*Key
}

func (c *MigrationImplStore) Client() MigrationServiceClient {
	return c.client
}



func (c *MigrationImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *MigrationImplStore) Get(key *Key) *Migration {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *MigrationImplStore) GetAndCheck(key *Key) (*Migration, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *MigrationSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.Migrations))
	i := 0
	for _, entity := range c.Migrations {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *MigrationSnapshot) Get(key *Key) *Migration {
	return c.Migrations[SerializeKey(key)]
}

func (c *MigrationSnapshot) GetAndCheck(key *Key) (*Migration, bool) {
	val, ok := c.Migrations[SerializeKey(key)]
	return val, ok
}

func (ref *MigrationImplStore) Create(ctx context.Context, entity *Migration) (*Migration, error) {
	resp, err := ref.client.Create(ctx, &CreateMigrationRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *MigrationImplStore) Update(ctx context.Context, entity *Migration) (*Migration, error) {
	resp, err := ref.client.Update(ctx, &UpdateMigrationRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *MigrationImplStore) Upsert(ctx context.Context, entity *Migration) (*Migration, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *MigrationImplStore) Delete(ctx context.Context, key *Key) (*Migration, error) {
	resp, err := ref.client.Delete(ctx, &DeleteMigrationRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type RelayImplStore struct {
	configstore *Configstore
	client RelayServiceClient
	store map[string]*Relay
	
		
			
				
	indexstore_RelayCoreId map[uint32]*Relay
				
			
		
	
		
			
				
	indexstore_RelaySdkId map[uint64]*Relay
				
			
		
	
		
			
				
				
	indexstore_DisplayName map[string]*Relay
				
			
		
	
}

type RelayStore interface {
	Client() RelayServiceClient
	Create(ctx context.Context, entity *Relay) (*Relay, error)
	Update(ctx context.Context, entity *Relay) (*Relay, error)
	Upsert(ctx context.Context, entity *Relay) (*Relay, error)
	Delete(ctx context.Context, key *Key) (*Relay, error)
	GetAndCheck(key *Key) (*Relay, bool)
	Get(key *Key) *Relay
	GetKeys() []*Key
	GetByRelayCoreId(key uint32) *Relay
	GetAndCheckByRelayCoreId(key uint32) (*Relay, bool)
				
	GetByRelaySdkId(key uint64) *Relay
	GetAndCheckByRelaySdkId(key uint64) (*Relay, bool)
				
	GetByDisplayName(key string) *Relay
	GetAndCheckByDisplayName(key string) (*Relay, bool)
				
}

func (c *RelayImplStore) Client() RelayServiceClient {
	return c.client
}


func (c *RelayImplStore) GetByRelayCoreId(key uint32) *Relay {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_RelayCoreId[key]
}

func (c *RelayImplStore) GetAndCheckByRelayCoreId(key uint32) (*Relay, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_RelayCoreId[key]
	return val, ok
}

func (c *RelaySnapshot) GetByRelayCoreId(key uint32) *Relay {
	return c.Relays_ByRelayCoreId[key]
}

func (c *RelaySnapshot) GetAndCheckByRelayCoreId(key uint32) (*Relay, bool) {
	val, ok := c.Relays_ByRelayCoreId[key]
	return val, ok
}
			
func (c *RelayImplStore) GetByRelaySdkId(key uint64) *Relay {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_RelaySdkId[key]
}

func (c *RelayImplStore) GetAndCheckByRelaySdkId(key uint64) (*Relay, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_RelaySdkId[key]
	return val, ok
}

func (c *RelaySnapshot) GetByRelaySdkId(key uint64) *Relay {
	return c.Relays_ByRelaySdkId[key]
}

func (c *RelaySnapshot) GetAndCheckByRelaySdkId(key uint64) (*Relay, bool) {
	val, ok := c.Relays_ByRelaySdkId[key]
	return val, ok
}
			
func (c *RelayImplStore) GetByDisplayName(key string) *Relay {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_DisplayName[key]
}

func (c *RelayImplStore) GetAndCheckByDisplayName(key string) (*Relay, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_DisplayName[key]
	return val, ok
}

func (c *RelaySnapshot) GetByDisplayName(key string) *Relay {
	return c.Relays_ByDisplayName[key]
}

func (c *RelaySnapshot) GetAndCheckByDisplayName(key string) (*Relay, bool) {
	val, ok := c.Relays_ByDisplayName[key]
	return val, ok
}

func (c *RelayImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *RelayImplStore) Get(key *Key) *Relay {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *RelayImplStore) GetAndCheck(key *Key) (*Relay, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *RelaySnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.Relays))
	i := 0
	for _, entity := range c.Relays {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *RelaySnapshot) Get(key *Key) *Relay {
	return c.Relays[SerializeKey(key)]
}

func (c *RelaySnapshot) GetAndCheck(key *Key) (*Relay, bool) {
	val, ok := c.Relays[SerializeKey(key)]
	return val, ok
}

func (ref *RelayImplStore) Create(ctx context.Context, entity *Relay) (*Relay, error) {
	resp, err := ref.client.Create(ctx, &CreateRelayRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	
{
	e := newEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv32a(key)
	ref.indexstore_RelayCoreId[idx] = newEntity
}
					
{
	e := newEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv64a(key)
	ref.indexstore_RelaySdkId[idx] = newEntity
}
					{
	key := newEntity.DisplayName
	idx :=key
	ref.indexstore_DisplayName[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *RelayImplStore) Update(ctx context.Context, entity *Relay) (*Relay, error) {
	resp, err := ref.client.Update(ctx, &UpdateRelayRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	
{
	e := oldEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv32a(key)
	delete(ref.indexstore_RelayCoreId, idx)
}
					
{
	e := oldEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv64a(key)
	delete(ref.indexstore_RelaySdkId, idx)
}
					{
	key := oldEntity.DisplayName
	idx :=key
	delete(ref.indexstore_DisplayName, idx)
}
				

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	
{
	e := newEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv32a(key)
	ref.indexstore_RelayCoreId[idx] = newEntity
}
					
{
	e := newEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv64a(key)
	ref.indexstore_RelaySdkId[idx] = newEntity
}
					{
	key := newEntity.DisplayName
	idx :=key
	ref.indexstore_DisplayName[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *RelayImplStore) Upsert(ctx context.Context, entity *Relay) (*Relay, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *RelayImplStore) Delete(ctx context.Context, key *Key) (*Relay, error) {
	resp, err := ref.client.Delete(ctx, &DeleteRelayRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	
{
	e := oldEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv32a(key)
	delete(ref.indexstore_RelayCoreId, idx)
}
					
{
	e := oldEntity
	key := GetInputForHashingKey(e.Key)
	idx := Fnv64a(key)
	delete(ref.indexstore_RelaySdkId, idx)
}
					{
	key := oldEntity.DisplayName
	idx :=key
	delete(ref.indexstore_DisplayName, idx)
}
				

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type ReleaseImplStore struct {
	configstore *Configstore
	client ReleaseServiceClient
	store map[string]*Release
	
}

type ReleaseStore interface {
	Client() ReleaseServiceClient
	Create(ctx context.Context, entity *Release) (*Release, error)
	Update(ctx context.Context, entity *Release) (*Release, error)
	Upsert(ctx context.Context, entity *Release) (*Release, error)
	Delete(ctx context.Context, key *Key) (*Release, error)
	GetAndCheck(key *Key) (*Release, bool)
	Get(key *Key) *Release
	GetKeys() []*Key
}

func (c *ReleaseImplStore) Client() ReleaseServiceClient {
	return c.client
}



func (c *ReleaseImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *ReleaseImplStore) Get(key *Key) *Release {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *ReleaseImplStore) GetAndCheck(key *Key) (*Release, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *ReleaseSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.Releases))
	i := 0
	for _, entity := range c.Releases {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *ReleaseSnapshot) Get(key *Key) *Release {
	return c.Releases[SerializeKey(key)]
}

func (c *ReleaseSnapshot) GetAndCheck(key *Key) (*Release, bool) {
	val, ok := c.Releases[SerializeKey(key)]
	return val, ok
}

func (ref *ReleaseImplStore) Create(ctx context.Context, entity *Release) (*Release, error) {
	resp, err := ref.client.Create(ctx, &CreateReleaseRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *ReleaseImplStore) Update(ctx context.Context, entity *Release) (*Release, error) {
	resp, err := ref.client.Update(ctx, &UpdateReleaseRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *ReleaseImplStore) Upsert(ctx context.Context, entity *Release) (*Release, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *ReleaseImplStore) Delete(ctx context.Context, key *Key) (*Release, error) {
	resp, err := ref.client.Delete(ctx, &DeleteReleaseRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type RouteShaderImplStore struct {
	configstore *Configstore
	client RouteShaderServiceClient
	store map[string]*RouteShader
	
}

type RouteShaderStore interface {
	Client() RouteShaderServiceClient
	Create(ctx context.Context, entity *RouteShader) (*RouteShader, error)
	Update(ctx context.Context, entity *RouteShader) (*RouteShader, error)
	Upsert(ctx context.Context, entity *RouteShader) (*RouteShader, error)
	Delete(ctx context.Context, key *Key) (*RouteShader, error)
	GetAndCheck(key *Key) (*RouteShader, bool)
	Get(key *Key) *RouteShader
	GetKeys() []*Key
}

func (c *RouteShaderImplStore) Client() RouteShaderServiceClient {
	return c.client
}



func (c *RouteShaderImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *RouteShaderImplStore) Get(key *Key) *RouteShader {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *RouteShaderImplStore) GetAndCheck(key *Key) (*RouteShader, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *RouteShaderSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.RouteShaders))
	i := 0
	for _, entity := range c.RouteShaders {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *RouteShaderSnapshot) Get(key *Key) *RouteShader {
	return c.RouteShaders[SerializeKey(key)]
}

func (c *RouteShaderSnapshot) GetAndCheck(key *Key) (*RouteShader, bool) {
	val, ok := c.RouteShaders[SerializeKey(key)]
	return val, ok
}

func (ref *RouteShaderImplStore) Create(ctx context.Context, entity *RouteShader) (*RouteShader, error) {
	resp, err := ref.client.Create(ctx, &CreateRouteShaderRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *RouteShaderImplStore) Update(ctx context.Context, entity *RouteShader) (*RouteShader, error) {
	resp, err := ref.client.Update(ctx, &UpdateRouteShaderRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *RouteShaderImplStore) Upsert(ctx context.Context, entity *RouteShader) (*RouteShader, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *RouteShaderImplStore) Delete(ctx context.Context, key *Key) (*RouteShader, error) {
	resp, err := ref.client.Delete(ctx, &DeleteRouteShaderRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

type SellerImplStore struct {
	configstore *Configstore
	client SellerServiceClient
	store map[string]*Seller
	
		
			
				
				
	indexstore_Name map[string]*Seller
				
			
		
	
}

type SellerStore interface {
	Client() SellerServiceClient
	Create(ctx context.Context, entity *Seller) (*Seller, error)
	Update(ctx context.Context, entity *Seller) (*Seller, error)
	Upsert(ctx context.Context, entity *Seller) (*Seller, error)
	Delete(ctx context.Context, key *Key) (*Seller, error)
	GetAndCheck(key *Key) (*Seller, bool)
	Get(key *Key) *Seller
	GetKeys() []*Key
	GetByName(key string) *Seller
	GetAndCheckByName(key string) (*Seller, bool)
				
}

func (c *SellerImplStore) Client() SellerServiceClient {
	return c.client
}


func (c *SellerImplStore) GetByName(key string) *Seller {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.indexstore_Name[key]
}

func (c *SellerImplStore) GetAndCheckByName(key string) (*Seller, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.indexstore_Name[key]
	return val, ok
}

func (c *SellerSnapshot) GetByName(key string) *Seller {
	return c.Sellers_ByName[key]
}

func (c *SellerSnapshot) GetAndCheckByName(key string) (*Seller, bool) {
	val, ok := c.Sellers_ByName[key]
	return val, ok
}

func (c *SellerImplStore) GetKeys() []*Key {
	c.configstore.mutex.RLock()
	keys := make([]*Key, len(c.store))
	i := 0
	for _, entity := range c.store {
		keys[i] = entity.Key
		i += 1
	}
	defer c.configstore.mutex.RUnlock()
	return keys
}

func (c *SellerImplStore) Get(key *Key) *Seller {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	return c.store[SerializeKey(key)]
}

func (c *SellerImplStore) GetAndCheck(key *Key) (*Seller, bool) {
	c.configstore.mutex.RLock()
	defer c.configstore.mutex.RUnlock()
	val, ok := c.store[SerializeKey(key)]
	return val, ok
}

func (c *SellerSnapshot) GetKeys() []*Key {
	keys := make([]*Key, len(c.Sellers))
	i := 0
	for _, entity := range c.Sellers {
		keys[i] = entity.Key
		i += 1
	}
	return keys
}

func (c *SellerSnapshot) Get(key *Key) *Seller {
	return c.Sellers[SerializeKey(key)]
}

func (c *SellerSnapshot) GetAndCheck(key *Key) (*Seller, bool) {
	val, ok := c.Sellers[SerializeKey(key)]
	return val, ok
}

func (ref *SellerImplStore) Create(ctx context.Context, entity *Seller) (*Seller, error) {
	resp, err := ref.client.Create(ctx, &CreateSellerRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	newEntity := resp.Entity
	_ = newEntity
	
	{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *SellerImplStore) Update(ctx context.Context, entity *Seller) (*Seller, error) {
	resp, err := ref.client.Update(ctx, &UpdateSellerRequest{
		Entity: entity,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				

	}

	
	newEntity := resp.Entity
	_ = newEntity
	
	{
	key := newEntity.Name
	idx :=key
	ref.indexstore_Name[idx] = newEntity
}
				

	ref.store[s] = resp.Entity
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}

func (ref *SellerImplStore) Upsert(ctx context.Context, entity *Seller) (*Seller, error) {
	_, ok := ref.GetAndCheck(entity.Key)
	if !ok {
		// try create
		entity, err := ref.Create(ctx, entity)
		if err != nil {
			if strings.Contains(err.Error(), "already exists") {
				// fallback to update
			} else {
				return nil, err
			}
		} else {
			return entity, nil
		}
	}
	entity, err := ref.Update(ctx, entity)
	return entity, err
}

func (ref *SellerImplStore) Delete(ctx context.Context, key *Key) (*Seller, error) {
	resp, err := ref.client.Delete(ctx, &DeleteSellerRequest{
		Key: key,
	})
	if err != nil {
		return nil, err
	}
	s := SerializeKey(resp.Entity.Key)
	ref.configstore.mutex.Lock()
	
	oldEntity, ok := ref.store[s]
	if ok {
		_ = oldEntity
		
	{
	key := oldEntity.Name
	idx :=key
	delete(ref.indexstore_Name, idx)
}
				

	}

	delete(ref.store, s)
	ref.configstore.mutex.Unlock()
	return resp.Entity, nil
}