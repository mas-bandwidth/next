DONE

	Print out set of relays when control message is received

	Verify that the relay threads see the pings

	Make the ping thread own the relay manager.

	Create a ping thread.

	Setup mutex and queues for control messages sent to ping thread.

	Send the control message to the ping thread.

	Pump control messages on the ping thread, and pass them in to the relay manager.

	Print out control data relays when received on ping thread.

	Pass in num_threads to ping_t 

	Pass in relay port to ping thread so it knows where to send

	Create n sockets to the ping_t on main thread before starting ping thread, bind to 127.0.0.1:0, n = num_threads

	Destroy the n ping sockets on main thread in cleanup

	Pass the ping sockets into the ping_t

	Pass the ping address to relay threads.

	Logic to send pings from ping thread w. relay manager

RELAY

	Pump recv on primary [0] ping socket.

	At this point the ping thread structure should be complete.

	Implement internal ping packet to send to 127.0.0.1:relay port

	Implement code to listen for internal pong packet on primary [0] ping socket.

	Implement code in relay thread to listen for internal ping, and translate it to a real ping sent to the address.

	Implement code in relay thread to listen for relay pong packets, and translate them into internal pong packets sent to primary ping socket address [0].

	Verify that pings and pongs work.

	------------------

	Now work out what we need to do to get pings/pongs setup to use basic and advanced packet filter.

	At minimum there will need to be some awareness of internal vs. external addresses in the relay thread on send/recv.

	The internal ping thread shouldn't need to worry about this. Internal ping/pong packets can be raw.

	------------------























































	------------------

	Need to bring back version auto update into the relay, but have it disable by default, enabled by env var.

	------------------

	Ideally, relay should have multiple HTTPS connections to backends, and process the union of relays across all backends. But is this overcomplication?

	------------------

	Relay should have functional tests, these should be separate from sdk func tests, and runnable inside semaphore.

	------------------

	Relay should have load test harness framework (totally separate from the SDK and backend...)

	------------------

	Relay should be load tested in google cloud

	------------------

	Relay should be load tested in bare metal with 1G NIC, 10G NIC

	------------------
