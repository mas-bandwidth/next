DONE

	Print out set of relays when control message is received

	Verify that the relay threads see the pings

	Make the ping thread own the relay manager.

	Create a ping thread.

	Setup mutex and queues for control messages sent to ping thread.

	Send the control message to the ping thread.

	Pump control messages on the ping thread, and pass them in to the relay manager.

	Print out control data relays when received on ping thread.

	Pass in num_threads to ping_t 

	Pass in relay port to ping thread so it knows where to send

	Create n sockets to the ping_t on main thread before starting ping thread, bind to 127.0.0.1:0, n = num_threads

	Destroy the n ping sockets on main thread in cleanup

	Pass the ping sockets into the ping_t

	Pass the ping address to relay threads.

	Logic to send pings from ping thread w. relay manager

	Pump recv on primary [0] ping socket.

	At this point the ping thread structure should be complete.

	Add new "LOCAL_PING" and "LOCAL_PONG" packet types.

	Implement internal ping packet to send to 127.0.0.1:relay port (cache address at top of ping function)

	Extend local packets to send/recv ping, and pong. Needs comms for each packet in both directions from ping thread.

	Implement code in relay thread to listen for internal ping. Print out.

	For some reason, relay thread is not receiving local send ping packets.

	Not sure why?

	It was a bug where the last relay update response time wasn't set on control. Fixed, and the local ping packets work.

	Process the local ping and send a real ping via the relay thread socket.

	Listen for real pings on the relay thread, and reply with pong.

	Verify with multiple relays that pings are sent and received.

	Clean up the extra packet types. Only need internal send ping, internal receive pong.

RELAY

	Implement code in relay thread to listen for relay pong packets, and translate them into internal pong packets sent to primary ping socket address [0].

	Implement code to listen for internal pong packet on primary [0] ping socket.

	Handle the pong and insert it into the relay manager.

	------------------

	Now work out what we need to do to get pings/pongs setup to use basic and advanced packet filter.

	Make sure we only respond to a ping, if we know about that relay in our list (ping thread).

	------------------























































	------------------

	Need to bring back version auto update into the relay, but have it disable by default, enabled by env var.

	------------------

	Ideally, relay should have multiple HTTPS connections to backends, and process the union of relays across all backends. But is this overcomplication?

	------------------

	Relay should have functional tests, these should be separate from sdk func tests, and runnable inside semaphore.

	------------------

	Relay should have load test harness framework (totally separate from the SDK and backend...)

	------------------

	Relay should be load tested in google cloud

	------------------

	Relay should be load tested in bare metal with 1G NIC, 10G NIC

	------------------
