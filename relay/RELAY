DONE

	I'm going to use the crypto_auth symmetric signature (32 bytes).

	The reason for this is the current use-case of network next doesn't have relays run by anybody except the system owner, so there is no problem having a symmetric key shared with relays in this case. It doesn't provide an attacker with anything other than the ability to generate ping tokens.

	And managing a brand new set of keygen for public/private keypairs on the relay backend, server backend and SDK side would be a HUGE pain in the ass.

	And it's half the size. 32 bytes per-signature vs. 64.

	Do it.

	Extend crypto with crypto_auth methods from sodium.

	Unit test crypto auth methods.

	Implement generate ping token signature function with crypto auth methods.

	Unit test ping token signature in golang.

	Include ping token signatures in the session update response packet in golang.

RELAY

	Make sure unit tests include the near relay ping tokens in golang.

	-------

	Include ping token signatures in the SDK5 session update response packet.

	Make sure C++ unit tests include ping token signatures in session update response.

	-------

	Actually calculate and send down the ping token signatures to the SDK

	Implement code in the SDK to pass up the signature (32 bytes) in near relay ping packets.

	Implement code in the relay to verify the ping token signature in near relay ping packets.












































	------------------

	Implement the near relay ping token

	Significant work end-to-end from server backend down to SDK, then up to relay in pings.

	Basic idea, have a token, secured by server backend key that specifies IP address and a timestamp when the ping token expires.

	One token per-near relay. Otherwise, too expensive when pinging.

	Might need > 1500 byte response packet down to SDK, need to do the math....

	------------------

	Debug why the happy path is not working on linux

	------------------

	Relay should have functional tests, separate from sdk func tests, and runnable inside semaphore.

	Start with the absolute basics of the relay functionality, and test everything from top to bottom.

	------------------

	Relay should have load test harness framework (totally separate from the SDK and backend...)

	------------------

	Relay should be load tested in google cloud (driven by terraform)

	------------------

	Relay should be load tested in bare metal with 1G NIC, 10G NIC

	------------------
