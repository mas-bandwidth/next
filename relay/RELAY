DONE

	Add near relay expire timestamp to session update response packet in golang

	Add near relay ping tokens to session update response packet in next.cpp

	Add near relay expire timestamp to session update response packet in next.cpp

	Implement the serialize in session update response packet in next.cpp to match golang.

RELAY

	Extend next.cpp unit tests to cover the ping tokens and expire timestamp for session update response (w. near relays)

	-------

	Plumb the expire timestamp from the session update response to the place where we construct near relay ping packets

	-------

	Work out how all relays have a "RELAY_PING_KEY"

	Is it passed in, in env vars, or does it get passed down in the relay update response?

	I prefer it to be zero config, so just pass down in relay update response, and have it be something that the relay backend and server backend knows via env var.

	-------

	Plumb the relay ping key down from the relay backend to relays in the relay update response

	-------

	Plumb the relay ping key up from the server backend to the handlers.

	-------

	Actually calculate and send down the ping token signatures and the expire timestamp to the SDK

	-------

	Store the ping tokens (signatures), and pass them up with near relay pings packets.

	-------

	Make relay ignore expired near relay ping packets

	Make relay ignore near relay packets when signature doesn't verify.

	-------

	Extend the relay ping packet to include 32 byte signature and expire timestamp (2 seconds in future?)

	When processing relay ping packet, ignore if it's expired.

	When processing relay ping packet, ignore if signature doesn't verify.

	-------











































	------------------

	Debug why the happy path is not working on linux

	------------------

	Relay should have functional tests, separate from sdk func tests, and runnable inside semaphore.

	Start with the absolute basics of the relay functionality, and test everything from top to bottom.

	------------------

	Relay should have load test harness framework (totally separate from the SDK and backend...)

	------------------

	Relay should be load tested in google cloud (driven by terraform)

	------------------

	Relay should be load tested in bare metal with 1G NIC, 10G NIC

	------------------
