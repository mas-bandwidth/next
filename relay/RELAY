DONE

	Extend the relay backend and server backends so they have required env vars "RELAY_PING_KEY" as base64

	Fail if it's not supplied.

	Add something to generate ping key to next tool.

	Add ping key base64 to the local.env

	Extend RelayUpdateResponsePacket to include the ping key

	Add the ping key to golang unit tests

	Send the ping key down in the relay update response packet in the relay gateway. 

	Extend the relay to read the ping key in the update response

	Pass to the relay and ping threads via relay control message

	Actually store the ping key in relay_t and ping_t via contral

	Track in ping thread whether we have received a ping key or not yet.

	Do not send any pings from the relay until we have a valid ping key.

	Plumb the relay ping key up from the server backend (read env var) to the handlers when session update is processed.

	Calculate the ping token signatures and the expire timestamp in the session update get near relays.

	Transform calc ping tokens to work in the format as per-the packet struct without allocations

	Check the ping tokens validate in the unit test for the session update handler

RELAY

	Add enough logs to verify everything gets passed down to the client as expected.

	Verify that when the whole system is brought up, the client has ping token and expire timestamp when it sends near relay pings.

	-------

	Make relay ignore expired near relay ping packets

	Make relay ignore near relay packets when signature doesn't verify.

	-------

	Verify that happy path passes

	Verify that func tests pass

	-------
















	-------

	Now we can do the same with relay <-> relay pings.

	Extend the relay ping packet to include 32 byte signature and expire timestamp (2 seconds in future?)

	When processing relay ping packet, ignore if it's expired.

	When processing relay ping packet, ignore if signature doesn't verify.

	-------











































	------------------

	Debug why the happy path is not working on linux

	------------------

	Relay should have functional tests, separate from sdk func tests, and runnable inside semaphore.

	Start with the absolute basics of the relay functionality, and test everything from top to bottom.

	------------------

	Relay should have load test harness framework (totally separate from the SDK and backend...)

	------------------

	Relay should be load tested in google cloud (driven by terraform)

	------------------

	Relay should be load tested in bare metal with 1G NIC, 10G NIC

	------------------
