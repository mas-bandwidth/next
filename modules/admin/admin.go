package admin

import (
	"database/sql"
	"fmt"

	_ "github.com/lib/pq"
)

type Admin struct {
	pgsql *sql.DB
}

func CreateAdmin(config string) *Admin {
	pgsql, err := sql.Open("postgres", config)
	if err != nil {
		panic(fmt.Sprintf("could not connect to postgres: %v", err))
	}
	err = pgsql.Ping()
	if err != nil {
		panic(fmt.Sprintf("could not ping postgres: %v", err))
	}
	fmt.Printf("successfully connected to postgres\n")
	return &Admin{pgsql: pgsql}
}

// -----------------------------------------------------------------------

type CustomerData struct {
	CustomerId   uint64 `json:"customer_id"`
	CustomerName string `json:"customer_name"`
	CustomerCode string `json:"customer_code"`
	Live         bool   `json:"live"`
	Debug        bool	`json:"debug"`
}

func (admin *Admin) CreateCustomer(customerData *CustomerData) {
	// ...
}

func (admin *Admin) ReadCustomers() []CustomerData {
	// ...
	return nil
}

func (admin *Admin) UpdateCustomer(customerData *CustomerData) {
	// ...
}

func (admin *Admin) DeleteCustomer(customerId uint64) {
	// ...
}

// -----------------------------------------------------------------------

type RouteShaderData struct {
	RouteShaderId             uint64 `json:"route_shader_id"`
	Name                      string `json:"name"`
	ABTest                    bool
	AcceptableLatency         int
	AcceptablePacketLoss      float32
	PacketLossSustained       float32
	AnalysisOnly              bool
	BandwidthEnvelopeUpKbps   int
	BandwidthEnvelopeDownKbps int
	DisableNetworkNext        bool
	LatencyThreshold          int
	Multipath                 bool
	ReduceLatency             bool
	ReducePacketLoss          bool
	SelectionnPercent         float32
	MaxLatencyTradeOff        int
	MaxNextRTT                int
	RouteSwitchThreshold      int
	RouteSelectThreshold      int
	RTTVeto_Default           int
	RTTVeto_MultiPath         int
	RTTVeto_PacketLoss        int
	ForceNext                 bool
	RouteDiversity            int
}

func (admin *Admin) CreateRouteShader(routeShaderData *RouteShaderData) {
	// ...
}

func (admin *Admin) ReadRouteShaders() []RouteShaderData {
	// ...
	return nil
}

func (admin *Admin) UpdateRouteShader(routeShaderData *RouteShaderData) {
	// ...
}

func (admin *Admin) DeleteRouteShader(routeShaderId uint64) {
	// ...
}

// -----------------------------------------------------------------------

type BuyerData struct {
	/*
	   id integer generated by default as identity,
	   short_name varchar not null,
	   public_key_base64 varchar not null,
	   customer_id integer not null,
	   route_shader_id integer not null,
	*/
}

func (admin *Admin) CreateBuyer(buyerData *BuyerData) {
	// ...
}

func (admin *Admin) ReadBuyers() []BuyerData {
	// ...
	return nil
}

func (admin *Admin) UpdateBuyer(buyerData *BuyerData) {
	// ...
}

func (admin *Admin) DeleteBuyer(buyerId uint64) {
	// ...
}

// -----------------------------------------------------------------------

type SellerData struct {
	/*
	   id integer generated by default as identity,
	   short_name varchar not null,
	   customer_id integer,
	*/
}

func (admin *Admin) CreateSeller(sellerData *SellerData) {
	// ...
}

func (admin *Admin) ReadSellers() []SellerData {
	// ...
	return nil
}

func (admin *Admin) UpdateSeller(sellerData *SellerData) {
	// ...
}

func (admin *Admin) DeleteSeller(sellerId uint64) {
	// ...
}

// -----------------------------------------------------------------------

type DatacenterData struct {
	/*
	   id integer generated by default as identity,
	   display_name varchar not null unique,
	   latitude numeric not null,
	   longitude numeric not null,
	   seller_id integer not null,
	   notes varchar,
	*/
}

func (admin *Admin) CreateDatacenter(datacenterData *SellerData) {
	// ...
}

func (admin *Admin) ReadDatacenters() []DatacenterData {
	// ...
	return nil
}

func (admin *Admin) UpdateDatacenter(datacenterData *DatacenterData) {
	// ...
}

func (admin *Admin) DeleteDatacenter(datacenterId uint64) {
	// ...
}

// -----------------------------------------------------------------------

type RelayData struct {
	/*
	   id integer generated by default as identity,
	   display_name varchar not null,
	   datacenter integer not null,
	   public_ip inet not null,
	   public_port integer not null default 40000,
	   internal_ip inet not null default '0.0.0.0',
	   internal_port integer not null default 0,
	   internal_group varchar default ‚Äù,
	   ssh_ip inet not null default '0.0.0.0',
	   ssh_port integer not null default 22,
	   ssh_user varchar not null default 'root',
	   public_key_base64 varchar not null,
	   private_key_base64 varchar,
	   version varchar,
	   mrc integer not null default 0,
	   port_speed integer not null default 1000,
	   max_sessions integer not null default 0,
	   notes varchar,
	*/
}

func (admin *Admin) CreateRelay(relayData *RelayData) {
	// ...
}

func (admin *Admin) ReadRelays() []RelayData {
	// ...
	return nil
}

func (admin *Admin) UpdateRelay(relayData *RelayData) {
	// ...
}

func (admin *Admin) DeleteRelay(relayId uint64) {
	// ...
}

// -----------------------------------------------------------------------

// todo: datacenter maps (rename to something else?)

// -----------------------------------------------------------------------
